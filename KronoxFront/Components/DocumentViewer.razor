@using KronoxFront.Services
@inject DocumentService DocumentService
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ILogger<DocumentViewer> Logger

@*
   Modal-komponent för att visa och ladda ner dokument (PDF och övriga filtyper).
   Visar PDF-filer direkt i webbläsaren, andra filtyper kan laddas ner.
*@

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content d-flex flex-column" style="max-height:90vh;">
                <div class="modal-header">
                    <h4 class="modal-title">@DocumentTitle</h4>
                    <button type="button" class="btn-close" @onclick="CloseViewer"></button>
                </div>
                <div class="modal-body flex-fill" style="overflow:auto; min-height:0; max-height:65vh;">
                    @if (isLoading)
                    {
                        <div class="w-100 text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Laddar...</span>
                            </div>
                            <p class="mt-2">Laddar dokument...</p>
                        </div>
                    }
                    else if (error)
                    {
                        <div class="alert alert-danger m-3 w-100">
                            @errorMessage
                        </div>
                    }
                    else
                    {
                        <div class="w-100">
                            @if (isPdf)
                            {
                                <div class="alert alert-info">
                                    <p class="mb-0">Använd <strong>Ladda ner</strong>-knappen nedan för att spara med rätt filnamn.</p>
                                </div>
                                <embed src="@dataUrl" type="application/pdf" width="100%" height="600px" style="border-radius:4px;" />
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center h-100 border rounded bg-light">
                                    <div class="p-4 text-center">
                                        <i class="fas fa-file fa-3x mb-3"></i>
                                        <h5>@DocumentTitle</h5>
                                        <p>Denna filtyp kan inte förhandsgranskas direkt i webbläsaren.</p>
                                        <p>Använd nedladdningsknappen för att öppna filen i ett lämpligt program.</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" @onclick="CloseViewer">Stäng</button>
                    <button type="button" class="btn btn-primary" @onclick="DownloadDocument">Ladda ner</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public int DocumentId { get; set; }

    [Parameter]
    public string DocumentTitle { get; set; } = "";

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<int> OnDownload { get; set; }

    private bool isLoading = true;
    private bool error = false;
    private string errorMessage = "";
    private string dataUrl = "";
    private bool isPdf = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && DocumentId > 0)
        {
            await LoadDocument();
        }
    }

    private async Task LoadDocument()
    {
        try
        {
            isLoading = true;
            error = false;
            dataUrl = "";

            // Hämta dokumentet via DocumentService (som använder API-nyckeln automatiskt)
            var result = await DocumentService.DownloadDocumentAsync(DocumentId);
            if (result == null)
            {
                error = true;
                errorMessage = "Kunde inte hämta dokumentet";
                return;
            }

            var (stream, fileName) = result.Value;

            // Bestäm filtyp och om den kan visas
            isPdf = fileName.ToLower().EndsWith(".pdf");

            // Bara skapa data URL för PDF filer
            if (isPdf)
            {
                // Konvertera stream till base64
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var base64String = Convert.ToBase64String(memoryStream.ToArray());
                    dataUrl = $"data:application/pdf;base64,{base64String}";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av dokument {DocumentId}", DocumentId);
            error = true;
            errorMessage = $"Ett fel inträffade: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CloseViewer()
    {
        await OnClose.InvokeAsync();
    }

    private async Task DownloadDocument()
    {
        await OnDownload.InvokeAsync(DocumentId);
    }
}