@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@inject KronoxFront.Services.CmsService Cms
@inject IToastService Toast

<div class="card mb-4">
    <div class="card-header bg-light">
        <h3 class="h5 mb-0">Bannerbild</h3>
    </div>
    <div class="card-body">
        @if (CurrentBanner != null)
        {
            <div class="mb-3">
                <label class="form-label">Nuvarande bannerbild:</label>
                <small class="text-muted d-block mb-2">
                    <span class="text-danger">*</span> Observera: Tar du bort Banner-bilden tas den bort helt från wwwroot/images/hero
                </small>
                <div class="position-relative">
                    <img src="@CurrentBanner.Url" class="img-fluid img-thumbnail mb-2"
                         alt="@CurrentBanner.AltText.Substring(5)" />
                    <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2"
                            @onclick="RemoveBanner"
                            aria-label="Ta bort nuvarande bannerbild">
                        <i class="fa-solid fa-times"></i> Ta bort
                    </button>
                </div>
                <div class="mb-3 mt-2">
                    <label class="form-label" for="bannerAltText">Bildbeskrivning:</label>
                    <div class="input-group">
                        <span class="input-group-text">hero:</span>
                        <input type="text" class="form-control" id="bannerAltText" value="@(CurrentBanner.AltText.Substring(5))"
                               @onchange="@(e => UpdateAltText(e.Value?.ToString()))" aria-label="Beskrivning av nuvarande bannerbild" />
                    </div>
                    <div class="form-text">
                        Beskrivning av bilden för tillgänglighet (alt-text)
                    </div>
                </div>
            </div>
        }

        <div class="mb-3">
            <label class="form-label" for="newBannerFile">Ladda upp ny bannerbild:</label>
            <InputFile OnChange="HandleFileSelected" class="form-control" id="newBannerFile" accept="image/*" aria-label="Välj ny bannerbild" />
            <div class="form-text">
                Ladda upp en bannerbild för startsidan. Rekommenderad storlek: 1920x400px.
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public string PageKey { get; set; } = "home";
    [Parameter] public EventCallback<PageImageViewModel> OnUploaded { get; set; }

    private PageImageViewModel? CurrentBanner { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentBanner();
    }

    private async Task LoadCurrentBanner()
    {
        // Hämta sidan och dess bilder
        var page = await Cms.GetPageContentAsync(PageKey);
        if (page != null)
        {
            // Hitta den aktuella bannerbilden
            CurrentBanner = page.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));

            // Om ingen bannerbild hittades, registrera standardbilden
            if (CurrentBanner == null)
            {
                try
                {
                    // Standardbannerbildens sökväg (relativ till wwwroot)
                    string standardBannerPath = "images/hero/hero_students.jpeg";

                    // Registrera bilden i databasen
                    var standardBanner = await Cms.RegisterPageImageMetadataAsync(
                        PageKey,
                        standardBannerPath,
                        "hero:Standardbanner för startsidan",
                        true);  // Bevara filnamnet

                    if (standardBanner != null)
                    {
                        CurrentBanner = standardBanner;

                        // Meddela parent-komponenten att vi har lagt till standardbilden
                        if (OnUploaded.HasDelegate)
                        {
                            await OnUploaded.InvokeAsync(standardBanner);
                        }
                    }
                }
                catch (Exception ex)
                {
                    // Logga felet men visa inte ett felmeddelande till användaren
                    Console.WriteLine($"Kunde inte registrera standardbannerbilden: {ex.Message}");
                }
            }
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                // Validera filen
                if (e.File.Size > 5 * 1024 * 1024) // 5MB gräns
                {
                    await Toast.Error("Filen är för stor. Maximal storlek är 5MB.");
                    return;
                }

                var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
                if (!allowedTypes.Contains(e.File.ContentType))
                {
                    await Toast.Error("Endast JPG, PNG, GIF och WebP bilder är tillåtna.");
                    return;
                }

                await Toast.Info("Laddar upp bild...");

                using var stream = e.File.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                ms.Position = 0;

                // Ladda upp bilden som banner med prefix "hero:" i altText
                var uploadedImage = await Cms.UploadPageImageAsync(
                    PageKey, ms, e.File.Name, $"hero:Bannerbild för {PageKey}");

                if (uploadedImage != null)
                {
                    // Uppdatera UI
                    CurrentBanner = uploadedImage;

                    // Meddela parent-komponenten
                    if (OnUploaded.HasDelegate)
                    {
                        await OnUploaded.InvokeAsync(uploadedImage);
                    }

                    await Toast.Success("Bannerbild uppladdad!");
                }
            }
            catch (Exception ex)
            {
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
    }

    private async Task RemoveBanner()
    {
        if (CurrentBanner != null)
        {
            try
            {
                // Ta bort bilden från databasen
                await Cms.DeletePageImageAsync(PageKey, CurrentBanner.Id);

                // Meddela parent-komponenten
                if (OnUploaded.HasDelegate)
                {
                    await OnUploaded.InvokeAsync(null);
                }

                // Uppdatera UI
                CurrentBanner = null;

                await Toast.Success("Bannerbild borttagen!");
            }
            catch (Exception ex)
            {
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
    }

    private async Task UpdateAltText(string? newAltText)
    {
        if (CurrentBanner != null && !string.IsNullOrWhiteSpace(newAltText))
        {
            try
            {
                // Skapa en kopia av bilden med uppdaterad altText
                var updatedImage = new PageImageViewModel
                    {
                        Id = CurrentBanner.Id,
                        Url = CurrentBanner.Url,
                        AltText = $"hero:{newAltText}"
                    };

                // Uppdatera i databasen via API
                await Cms.UpdatePageImageAltTextAsync(PageKey, updatedImage);

                // Uppdatera lokal reference
                CurrentBanner = updatedImage;

                // Meddela parent-komponenten
                if (OnUploaded.HasDelegate)
                {
                    await OnUploaded.InvokeAsync(updatedImage);
                }

                await Toast.Success("Bildbeskrivning uppdaterad!");
            }
            catch (Exception ex)
            {
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
    }
}