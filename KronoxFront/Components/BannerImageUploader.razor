@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@inject KronoxFront.Services.CmsService Cms
@inject IToastService Toast
@inject ILogger<BannerImageUploader> Logger

<div class="card mb-4">
    <div class="card-header bg-light">
        <h2 class="h5 mb-0">Bannerbild</h2>
    </div>
    <div class="card-body">
        @if (CurrentBanner != null)
        {
            <div class="mb-3">
                <span class="form-label">Nuvarande bannerbild:</span>
                <small class="text-muted d-block mb-2">
                    <span class="text-danger">*</span> Observera: Tar du bort Banner-bilden tas den bort helt från wwwroot/images/hero
                </small>
                <div class="position-relative">
                    <img src="@CurrentBanner.Url" class="img-fluid img-thumbnail mb-2"
                         alt="@CurrentBanner.AltText.Substring(5)" />
                    <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2"
                            @onclick="RemoveBanner"
                            aria-label="Ta bort nuvarande bannerbild">
                        <i class="fa-solid fa-times"></i> Ta bort
                    </button>
                </div>
                <div class="mb-3 mt-2">
                    <label class="form-label" for="bannerAltText">Bildbeskrivning:</label>
                    <div class="input-group">
                        <span class="input-group-text">hero:</span>
                        <input type="text" class="form-control" id="bannerAltText" value="@(CurrentBanner.AltText.Substring(5))"
                               @onchange="@(e => UpdateAltText(e.Value?.ToString()))" aria-label="Beskrivning av nuvarande bannerbild" />
                    </div>
                    <div class="form-text">
                        Beskrivning av bilden för tillgänglighet (alt-text)
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info mb-3">
                <i class="fa-solid fa-info-circle me-2"></i>
                Ingen bannerbild är uppladdad. Ladda upp en bild nedan eller så kommer standardbilden att visas på den publika sidan.
            </div>
        }

        <div class="mb-3">
            <label class="form-label" for="newBannerFile">Ladda upp ny bannerbild:</label>
            <InputFile OnChange="HandleFileSelected" class="form-control" id="newBannerFile" accept="image/*" aria-label="Välj ny bannerbild" />
            <div class="form-text">
                Ladda upp en bannerbild för startsidan. Rekommenderad storlek: 1920x400px.
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string PageKey { get; set; } = "home";
    [Parameter] public EventCallback<PageImageViewModel> OnUploaded { get; set; }

    private PageImageViewModel? CurrentBanner { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentBanner();
    }

    private async Task LoadCurrentBanner()
    {
        // Hämta sidan och dess bilder
        var page = await Cms.GetPageContentAsync(PageKey);
        if (page != null)
        {
            // Hitta den aktuella bannerbilden
            CurrentBanner = page.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
            
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                // Validering
                if (e.File.Size > 5 * 1024 * 1024)
                {
                    await Toast.Error("Filen är för stor. Maximal storlek är 5MB.");
                    return;
                }

                var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp", "image/svg+xml" };
                if (!allowedTypes.Contains(e.File.ContentType))
                {
                    await Toast.Error("Endast JPG, PNG, GIF, WebP och SVG bilder är tillåtna.");
                    return;
                }

                await Toast.Info("Laddar upp bild...");

                // Ta bort befintlig bannerbild först
                if (CurrentBanner != null)
                {
                    try
                    {
                        await Cms.DeletePageImageAsync(PageKey, CurrentBanner.Id);
                        Logger.LogInformation("Befintlig bannerbild {ImageId} borttagen", CurrentBanner.Id);
                    }
                    catch (Exception deleteEx)
                    {
                        Logger.LogWarning(deleteEx, "Kunde inte ta bort befintlig bannerbild {ImageId}", CurrentBanner.Id);
                    }
                }

                using var stream = e.File.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                ms.Position = 0;

                // Ladda upp ny bannerbild
                var uploadedImage = await Cms.UploadPageImageAsync(
                    PageKey, ms, e.File.Name, $"hero:Bannerbild för {PageKey}");

                if (uploadedImage != null)
                {
                    CurrentBanner = uploadedImage;

                    // Meddela parent-komponenten
                    if (OnUploaded.HasDelegate)
                    {
                        await OnUploaded.InvokeAsync(uploadedImage);
                    }

                    await Toast.Success("Bannerbild uppladdad!");
                }
                else
                {
                    await Toast.Error("Bilduppladdning misslyckades. Kontrollera filen och försök igen.");
                    Logger.LogError("UploadPageImageAsync returnerade null för fil: {FileName}", e.File.Name);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av bannerbild för {PageKey}", PageKey);
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
    }

    private async Task RemoveBanner()
    {
        if (CurrentBanner != null)
        {
            try
            {
                // Ta bort bilden från databasen
                await Cms.DeletePageImageAsync(PageKey, CurrentBanner.Id);

                // Meddela parent-komponenten
                if (OnUploaded.HasDelegate)
                {
                    await OnUploaded.InvokeAsync(null);
                }

                // Uppdatera UI
                CurrentBanner = null;

                await Toast.Success("Bannerbild borttagen!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid borttagning av bannerbild för {PageKey}", PageKey);
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
    }

    private async Task UpdateAltText(string? newAltText)
    {
        if (CurrentBanner != null && !string.IsNullOrWhiteSpace(newAltText))
        {
            try
            {
                // Skapa en kopia av bilden med uppdaterad altText
                var updatedImage = new PageImageViewModel
                {
                    Id = CurrentBanner.Id,
                    Url = CurrentBanner.Url,
                    AltText = $"hero:{newAltText}"
                };

                // Uppdatera i databasen via API
                var success = await Cms.UpdatePageImageAltTextAsync(PageKey, updatedImage);

                if (success)
                {
                    // Uppdatera lokal reference
                    CurrentBanner = updatedImage;

                    // Meddela parent-komponenten
                    if (OnUploaded.HasDelegate)
                    {
                        await OnUploaded.InvokeAsync(updatedImage);
                    }

                    await Toast.Success("Bildbeskrivning uppdaterad!");
                }
                else
                {
                    await Toast.Error("Kunde inte uppdatera bildbeskrivningen.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppdatering av alt-text för bannerbild på {PageKey}", PageKey);
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
        }
        else if (string.IsNullOrWhiteSpace(newAltText))
        {
            await Toast.Warning("Alt-text kan inte vara tom.");
        }
    }
}