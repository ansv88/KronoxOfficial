@page "/admin/page/{PageKey}"
@using KronoxFront.Components.Editors
@using KronoxFront.Components.Shared.Admin
@using KronoxFront.Components.Shared.Content
@using KronoxFront.Components.Shared.Layout
@using KronoxFront.Components.Shared.UI
@using KronoxFront.ViewModels
@using KronoxFront.Extensions
@using KronoxFront.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@implements IDisposable
@inject CmsService Cms
@inject IHttpClientFactory HttpClientFactory
@inject IToastService Toast
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ILogger<CustomPageAdmin> Logger
@inject CacheService Cache

<HeadContent>
    <meta name="description" content="Redigera innehållet för anpassad sida @PageKey" />
</HeadContent>

<PageTitle>Admin - @customPage?.DisplayName</PageTitle>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else if (customPage == null)
{
    <div class="container-fluid">
        <div class="alert alert-danger">
            <h4>Sidan hittades inte</h4>
            <p>Den sida du försöker redigera existerar inte eller har tagits bort.</p>
            <a href="/admin/pages" class="btn btn-primary">Tillbaka till sidhantering</a>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="h3">Redigera "@customPage.DisplayName"</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
                                <li class="breadcrumb-item"><a href="/admin/pages">Sidhantering</a></li>
                                <li class="breadcrumb-item active">@customPage.DisplayName</li>
                            </ol>
                        </nav>
                    </div>
                    <div class="d-flex flex-column align-items-end">
                        <div class="d-flex gap-2 mb-2 align-items-center">
                            <a href="/admin/pages" class="btn btn-outline-secondary">
                                <i class="fa-solid fa-arrow-left me-1"></i>
                                Tillbaka
                            </a>

                            <PageStatusText PageKey="@PageKey" />

                            <a href="@($"/{PageKey}")" class="btn btn-outline-secondary" target="_blank" title="Visar sparade ändringar">
                                <i class="fa-solid fa-eye me-1"></i>
                                Visa sparad sida
                            </a>

                            <button type="button" class="btn btn-success" @onclick="SaveContent" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                else
                                {
                                    <i class="fa-solid fa-save me-1"></i>
                                }
                                Spara allt innehåll
                            </button>
                        </div>
                        <small class="text-muted">
                            <i class="fa-solid fa-info-circle me-1"></i>
                            För att se dina ändringar, spara först och klicka sedan på "Visa sparad sida"
                        </small>
                    </div>
                </div>

                <div class="alert alert-info mb-4">
                    <div class="row">
                        <div class="col-md-8">
                            <h6 class="mb-1">
                                <i class="fa-solid fa-info-circle me-2"></i>
                                Sidinformation
                            </h6>
                            <div class="row small">
                                <div class="col-sm-6">
                                    <strong>URL:</strong> /@PageKey<br>
                                    <strong>Typ:</strong> @GetNavigationTypeText(customPage.NavigationType)
                                </div>
                                <div class="col-sm-6">
                                    <strong>Status:</strong> @(customPage.IsActive ? "Aktiv" : "Inaktiv")<br>
                                    <strong>I navigation:</strong> @(customPage.ShowInNavigation ? "Ja" : "Nej")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => Nav.NavigateTo("/admin/pages"))">
                                <i class="fa-solid fa-cog me-1"></i>
                                Ändra inställningar
                            </button>
                        </div>
                    </div>
                </div>

                @* ---------- Navigeringsinställningar ----------- *@
                <NavigationSettings PageKey="@PageKey"
                                    InitialDisplayName="@customPage.DisplayName"
                                    OnDisplayNameChanged="OnNavigationNameChanged" />

                @* ---------- Section Configuration Manager ----------- *@
                <PageSectionConfigurator PageKey="@PageKey"
                                         AvailableSections="sectionConfigItems"
                                         OnConfigurationChanged="OnSectionConfigurationChanged"
                                         OnSave="SaveSectionConfiguration" />

                @* ---------- DYNAMISKA SEKTIONER BASERAT PÅ KONFIGURATION --------- *@
                @foreach (var sectionConfig in sectionConfigItems.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
                {
                    @switch (sectionConfig.Type)
                    {
                        case SectionType.Banner:
                            <BannerImageUploader PageKey="@PageKey" OnUploaded="OnBannerUploaded" OnSaveRequested="SaveContent" />
                            break;

                        case SectionType.Intro:
                            <IntroSectionEditor @ref="introSectionEditorRef"
                                                IntroSection="@introSection"
                                                PageKey="@PageKey"
                                                BreadcrumbPlaceholder="@GetBreadcrumbPlaceholder()"
                                                IsSaving="@isSaving"
                                                OnIntroSectionChanged="OnIntroSectionChanged"
                                                OnSaveIntroSection="SaveIntroSectionFromEditor" />
                            break;

                        case SectionType.NavigationButtons:
                            <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                                     NavigationButtons="introSection.NavigationButtons"
                                                     ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                                     NavigationButtonsChanged="OnNavigationButtonsChanged" />
                            break;

                        case SectionType.FeatureSections:
                            <FeatureSectionEditor @ref="featureSectionEditorRef"
                                                  Sections="featureSections"
                                                  OnSectionsChanged="OnFeatureSectionsChanged"
                                                  OnImageUpload="OnFeatureImageUploaded"
                                                  OnImageDelete="OnFeatureImageDeleted"
                                                  OnSaveSections="SaveFeatureSectionsFromEditor" />
                            break;

                        case SectionType.FaqSections:
                            <FaqEditor @ref="faqEditorRef"
                                       FaqSections="faqSections"
                                       OnFaqSectionsChanged="OnFaqSectionsChanged"
                                       OnFaqImageUpload="OnFaqImageUploaded" />
                            break;

                        case SectionType.ContactForm:
                            <ContactFormEditor ContactInfo="@contactInfo"
                                               IsSaving="@isSaving"
                                               OnContactInfoChanged="OnContactInfoChanged" />
                            break;

                        case SectionType.NewsSection:
                            <NewsSectionEditor PageKey="@PageKey" />
                            break;

                        case SectionType.DocumentSection:
                            <DocumentSectionEditor PageKey="@PageKey"
                                                   Title="@GetDocumentSectionTitle()"
                                                   Description="@GetDocumentSectionDescription()" />
                            break;

                        case SectionType.ActionPlanTable:
                            <ActionPlanSection ActionPlan="@actionPlan"
                                               Title="Handlingsplan"
                                               IsAdminContext="true"
                                               ShowAdminButton="true"
                                               AdminButtonUrl="/admin/actionplan" />
                            break;

                        case SectionType.DevelopmentSuggestionForm:
                            <DevelopmentSuggestionEditor PageKey="@PageKey" />
                            break;

                        case SectionType.MemberLogos:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-users me-2"></i>
                                        Medlemslogotyper
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Medlemslogotyper visas automatiskt på denna sida när sektionen är aktiverad.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Sektionen "Våra medlemmar" kommer att visas på sidan med alla aktiva medlemslogotyper.
                                        För att hantera vilka logotyper som ska visas, deras ordning och beskrivningar, använd hanteringssidan nedan.
                                    </p>
                                    <div class="d-flex gap-2">
                                        <a href="/admin/memberlogos" class="btn btn-primary">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Hantera medlemslogotyper
                                        </a>
                                    </div>
                                </div>
                            </div>
                            break;

                        default:
                            <div class="card mb-4">
                                <div class="card-header bg-warning">
                                    <h3 class="h5 mb-0">Okänd sektion: @sectionConfig.Type</h3>
                                </div>
                                <div class="card-body">
                                    <p class="text-muted">Denna sektionstyp stöds inte ännu i editorn.</p>
                                </div>
                            </div>
                            break;
                    }
                }

                @* Visar meddelande om inga sektioner är aktiverade *@
                @if (!sectionConfigItems.Any(s => s.IsEnabled))
                {
                    <div class="card">
                        <div class="card-body text-center py-5">
                            <i class="fa-solid fa-layer-group fa-3x text-muted mb-3"></i>
                            <h4>Inga sektioner aktiverade</h4>
                            <p class="text-muted">Aktivera sektioner ovan för att börja redigera innehållet på denna sida.</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<ScrollTopButton />

@code {
    [Parameter] public string PageKey { get; set; } = "";

    private CustomPageViewModel? customPage;
    private IntroSectionViewModel introSection = new();
    private IntroSectionEditor? introSectionEditorRef;
    private List<FeatureSectionViewModel> featureSections = new();
    private List<SectionConfigItem> sectionConfigItems = new();
    private FeatureSectionEditor? featureSectionEditorRef;
    private List<FaqSectionViewModel> faqSections = new();
    private FaqEditor? faqEditorRef;
    private ActionPlanTableViewModel actionPlan = new();
    private ContactPageInfoViewModel contactInfo = new();

    private bool isLoading = true;
    private bool isSaving = false;
    private bool needsEditorInitialization = false;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(PageKey)) return;

        try
        {
            isLoading = true;

            // Rensa tidigare data först
            ClearPreviousPageData();

            // Tvinga uppdatering av UI
            StateHasChanged();

            // Ladda custom page data
            await LoadPageData();

            // Ladda sektionskonfiguration
            sectionConfigItems = await Cms.GetPageSectionConfigAsync(PageKey);

            // Om ingen konfiguration finns, skapa standardkonfiguration
            if (!sectionConfigItems.Any())
            {
                sectionConfigItems = GetDefaultSectionConfig();
                await Cms.SavePageSectionConfigAsync(PageKey, sectionConfigItems);
            }

            // Ladda sektionsdata baserat på aktiverade sektioner
            await LoadSectionData();

            // Säkerställ standardinnehåll
            EnsureDefaultContent();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av innehåll för custom page {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");
        }
        finally
        {
            isLoading = false;
            needsEditorInitialization = true;
        }
    }

    private void ClearPreviousPageData()
    {
        // Rensa all data från föregående sida
        customPage = null;
        introSection = new();
        featureSections = new();
        sectionConfigItems = new();
        faqSections = new();
        actionPlan = new();
        contactInfo = new();

        // Rensa referenser till editorer
        introSectionEditorRef = null;
        featureSectionEditorRef = null;
        faqEditorRef = null;
    }

    private async Task LoadPageData()
    {
        var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
        var response = await httpClient.GetAsync($"api/custompage/{PageKey}");
        if (!response.IsSuccessStatusCode)
        {
            customPage = null;
            return;
        }

        var dto = await response.Content.ReadFromJsonAsync<KronoxFront.DTOs.CustomPageDto>();
        customPage = dto?.ToViewModel();
    }

    private async Task LoadSectionData()
    {
        var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

        // Ladda endast data för aktiverade sektioner för bättre prestanda
        var loadTasks = new List<Task>();

        if (activeSections.Any(s => s.Type == SectionType.Intro))
        {
            loadTasks.Add(LoadIntroSection());
        }

        if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
        {
            loadTasks.Add(LoadFeatureSections());
        }

        if (activeSections.Any(s => s.Type == SectionType.FaqSections))
        {
            loadTasks.Add(LoadFaqSections());
        }

        if (activeSections.Any(s => s.Type == SectionType.ActionPlanTable))
        {
            loadTasks.Add(LoadActionPlan());
        }

        if (activeSections.Any(s => s.Type == SectionType.ContactForm))
        {
            loadTasks.Add(LoadContactInfo());
        }

        await Task.WhenAll(loadTasks);
    }

    private async Task LoadIntroSection()
    {
        introSection = await Cms.GetIntroSectionAsync(PageKey);

        if (string.IsNullOrEmpty(introSection.Title) && customPage != null)
        {
            introSection.Title = customPage.DisplayName;
            introSection.Content = customPage.Description ?? "";
        }
    }

    private async Task LoadFeatureSections()
    {
        featureSections = await Cms.GetFeatureSectionsAsync(PageKey);
    }

    private async Task LoadFaqSections()
    {
        faqSections = await Cms.GetFaqSectionsAsync(PageKey);
    }

    private async Task LoadActionPlan()
    {
        actionPlan = await Cms.GetActionPlanAsync(PageKey);
    }

    private async Task LoadContactInfo()
    {
        contactInfo = await Cms.GetContactInfoAsync();
    }

    private List<SectionConfigItem> GetDefaultSectionConfig()
    {
        // Skapa alla tillgängliga sektioner för custom pages
        var allSections = Enum.GetValues<SectionType>()
            .Select((type, index) => new SectionConfigItem
            {
                Type = type,
                IsEnabled = GetDefaultEnabledState(type),
                SortOrder = index
            }).ToList();

        return allSections;
    }

    private bool GetDefaultEnabledState(SectionType type)
    {
        return type switch
        {
            SectionType.Banner => true,
            SectionType.Intro => true,
            SectionType.NavigationButtons => false,
            SectionType.FeatureSections => false,
            SectionType.FaqSections => false,
            SectionType.MemberLogos => false,
            _ => false
        };
    }

    private void EnsureDefaultContent()
    {
        var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

        // Skapa standardinnehåll för aktiverade sektioner som saknar innehåll
        if (activeSections.Any(s => s.Type == SectionType.Intro) && string.IsNullOrEmpty(introSection.Title))
        {
            introSection.Title = customPage?.DisplayName ?? "Ny sida";
            introSection.Content = customPage?.Description ?? "<p>Välkommen till denna sida.</p>";
            introSection.BreadcrumbTitle = customPage?.DisplayName?.ToUpper() ?? "NY SIDA";
        }

        if (activeSections.Any(s => s.Type == SectionType.FeatureSections) && featureSections.Count == 0)
        {
            featureSections.Add(new FeatureSectionViewModel
            {
                Id = 0,
                PageKey = PageKey,
                Title = "Information",
                Content = "<p>Lägg till innehåll här...</p>",
                ImageUrl = "",
                ImageAltText = "",
                HasImage = false,
                SortOrder = 0
            });
        }

        if (activeSections.Any(s => s.Type == SectionType.FaqSections) && faqSections.Count == 0)
        {
            faqSections.Add(new FaqSectionViewModel
            {
                Id = 0,
                PageKey = PageKey,
                Title = "Vanliga frågor",
                Description = "Här hittar du svar på vanliga frågor",
                SortOrder = 0,
                FaqItems = new List<FaqItemViewModel>
                {
                    new FaqItemViewModel
                    {
                        Question = "Exempel på fråga",
                        Answer = "<p>Exempel på svar...</p>",
                        SortOrder = 0
                    }
                }
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || needsEditorInitialization)
        {
            needsEditorInitialization = false;
            await Task.Delay(500);
            await InitializeEditors();
        }
    }

    private async Task InitializeEditors()
    {
        try
        {
            Logger.LogInformation("=== Startar TinyMCE-initialisering för custom page {PageKey} ===", PageKey);

            await JS.InvokeVoidAsync("eval", "if(typeof tinymce !== 'undefined') { tinymce.remove(); }");
            await Task.Delay(500);

            await JS.InvokeVoidAsync("destroyAllEditors");
            await Task.Delay(300);

            StateHasChanged();
            await Task.Delay(200);

            var initializationTasks = new List<Task>();

            // Intro-editor
            if (introSectionEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.Intro && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await introSectionEditorRef.InitializeEditor();
                        Logger.LogInformation("Intro-editor initialiserad framgångsrikt");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av intro-editor");
                    }
                }));
            }

            // Feature-editorer
            if (featureSectionEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await Task.Delay(200);
                        await featureSectionEditorRef.InitializeEditorsOnly();
                        Logger.LogInformation("Feature-editorer initialiserade");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av feature-editorer");
                    }
                }));
            }

            // FAQ-editorer
            if (faqEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await Task.Delay(400);
                        await faqEditorRef.InitializeEditorsOnly();
                        Logger.LogInformation("FAQ-editorer initialiserade");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av FAQ-editorer");
                    }
                }));
            }

            if (initializationTasks.Any())
            {
                await Task.WhenAll(initializationTasks);
            }

            Logger.LogInformation("=== TinyMCE-initialisering slutförd för custom page {PageKey} ===", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "=== KRITISKT FEL vid TinyMCE-initialisering för custom page {PageKey} ===", PageKey);
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            // Synkronisera intro-editor
            await SyncIntroEditor();

            // Synkronisera alla editorer
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer för {PageKey}: {Message}", PageKey, ex.Message);
            }

            var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();
            var saveTasks = new List<Task>();

            // Spara intro-sektion om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.Intro))
            {
                saveTasks.Add(Cms.SaveIntroSectionAsync(PageKey, introSection));
            }

            // Spara feature-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
            {
                saveTasks.Add(Cms.SaveFeatureSectionsAsync(PageKey, featureSections));
            }

            // Spara FAQ-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FaqSections))
            {
                saveTasks.Add(Cms.SaveFaqSectionsAsync(PageKey, faqSections));
            }

            // Spara handlingsplan om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.ActionPlanTable))
            {
                saveTasks.Add(Cms.SaveActionPlanAsync(PageKey, actionPlan));
            }

            // Vänta på att alla sparningar slutförs
            await Task.WhenAll(saveTasks);

            // Invalidera cache
            Cache.InvalidatePageCache(PageKey);

            await Toast.Success($"Innehållet för {customPage?.DisplayName} har sparats framgångsrikt!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av innehåll för custom page {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid sparning av innehållet.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task SyncIntroEditor()
    {
        if (introSectionEditorRef != null)
        {
            try
            {
                await introSectionEditorRef.SyncEditor();
                Logger.LogInformation("Intro-editor synkroniserad för {PageKey}", PageKey);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte synkronisera intro-editor för {PageKey}", PageKey);
            }
        }
    }

    private async Task OnSectionConfigurationChanged()
    {
        try
        {
            Logger.LogInformation("Sektionskonfiguration ändrad för custom page {PageKey}, laddar om...", PageKey);

            // Ladda data för nyligen aktiverade sektioner
            await LoadSectionData();

            EnsureDefaultContent();

            StateHasChanged();

            await Task.Delay(200);
            await InitializeEditors();

            Logger.LogInformation("Sektionskonfiguration och editorer uppdaterade för custom page {PageKey}", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av sektionskonfiguration för custom page {PageKey}", PageKey);
        }
    }

    private async Task SaveSectionConfiguration(List<SectionConfigItem> configItems)
    {
        try
        {
            var success = await Cms.SavePageSectionConfigAsync(PageKey, configItems);
            if (success)
            {
                sectionConfigItems = configItems;
                await Toast.Success("Sektionskonfiguration sparad!");
                await OnSectionConfigurationChanged();
            }
            else
            {
                await Toast.Error("Fel vid sparning av sektionskonfiguration");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av sektionskonfiguration för custom page {PageKey}", PageKey);
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private void OnBannerUploaded(PageImageViewModel? img)
    {
        Toast.Success("Bannerbild uppdaterad!");
        StateHasChanged();
    }

    private void OnIntroSectionChanged()
    {
        StateHasChanged();
    }

    private async Task SaveIntroSectionFromEditor(IntroSectionViewModel intro)
    {
        await Cms.SaveIntroSectionAsync(PageKey, intro);
        await Toast.Success("Intro-sektion har sparats!");
    }

    private Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
        return Task.CompletedTask;
    }

    private Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnFeatureSectionsChanged() { }

    private async Task OnFeatureImageUploaded(FeatureSectionEditor.ImageUploadInfo info)
    {
        if (info.File != null && info.Section != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, PageKey);
                info.Section.ImageUrl = imageUrl;
                info.CloseModal?.Invoke();
                await Toast.Success("Feature-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild för custom page {PageKey}", PageKey);
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void OnFeatureImageDeleted(FeatureSectionEditor.ImageDeleteInfo info) { }

    private void OnFaqSectionsChanged() { }

    private async Task OnFaqImageUploaded(FaqEditor.FaqImageUploadInfo info)
    {
        if (info.File != null && info.Item != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, PageKey);
                info.Item.ImageUrl = imageUrl;
                await Toast.Success("FAQ-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av FAQ-bild för custom page {PageKey}", PageKey);
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void OnContactInfoChanged()
    {
        StateHasChanged();
    }

    private async Task OnNavigationNameChanged(string newDisplayName)
    {
        if (string.IsNullOrWhiteSpace(newDisplayName) || customPage == null)
            return;

        try
        {
            // 1) Uppdatera CustomPage.DisplayName via API
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            customPage.DisplayName = newDisplayName;
            var response = await httpClient.PutAsJsonAsync($"api/custompage/{PageKey}", customPage.ToUpdateRequest());
            if (!response.IsSuccessStatusCode)
            {
                await Toast.Error("Kunde inte uppdatera sidans visningsnamn");
                return;
            }

            // 2) Uppdatera endast breadcrumb i Intro (inte Intro.Title)
            introSection.BreadcrumbTitle = newDisplayName.ToUpperInvariant();
            await Cms.SaveIntroSectionAsync(PageKey, introSection);

            // 3) Invalidera cache
            Cache.InvalidatePageCache(PageKey);

            await Toast.Success("Navigationsnamn och breadcrumb uppdaterades.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av CustomPage DisplayName");
            await Toast.Error("Fel vid uppdatering av sidans visningsnamn");
        }
    }

    private string GetBreadcrumbPlaceholder()
    {
        return customPage?.DisplayName?.ToUpper() ?? "MIN SIDA";
    }

    private string GetDocumentSectionTitle()
    {
        return $"Dokument för {customPage?.DisplayName ?? PageKey}";
    }

    private string GetDocumentSectionDescription()
    {
        return $"Dokumentsektionen visar relevanta dokument för {customPage?.DisplayName ?? "denna sida"}.";
    }

    // private RenderFragment GetPageSpecificButtons()
    // {
    //     var activeSections = sectionConfigItems.Where(s => s.IsEnabled).Select(s => s.Type).ToList();
    //     var buttons = new List<RenderFragment>();

    //     if (activeSections.Contains(SectionType.NewsSection))
    //     {
    //         buttons.Add(@<a href="/admin/news" class="btn btn-outline-primary">
    //             <i class="fa-solid fa-newspaper me-1"></i>
    //             Hantera nyheter
    //         </a>);
    //     }

    //     if (activeSections.Contains(SectionType.DocumentSection))
    //     {
    //         buttons.Add(@<a href="/admin/documents/manage" class="btn btn-outline-primary">
    //             <i class="fa-solid fa-file me-1"></i>
    //             Hantera dokument
    //         </a>);
    //     }

    //     if (activeSections.Contains(SectionType.DevelopmentSuggestionForm))
    //     {
    //         buttons.Add(@<a href="/admin/suggestions" class="btn btn-outline-primary">
    //             <i class="fa-solid fa-lightbulb me-1"></i>
    //             Visa förslag
    //         </a>);
    //     }

    //     if (activeSections.Contains(SectionType.MemberLogos))
    //     {
    //         buttons.Add(@<a href="/admin/memberlogos" class="btn btn-outline-primary">
    //             <i class="fa-solid fa-users me-1"></i>
    //             Hantera logotyper
    //         </a>);
    //     }

    //     if (activeSections.Contains(SectionType.ActionPlanTable))
    //     {
    //         buttons.Add(@<a href="/admin/actionplan" class="btn btn-outline-primary">
    //             <i class="fa-solid fa-tasks me-1"></i>
    //             Hantera handlingsplan
    //         </a>);
    //     }

    //     return builder =>
    //     {
    //         foreach (var button in buttons)
    //         {
    //             builder.AddContent(0, button);
    //         }
    //     };
    // }

    private string GetNavigationTypeText(string navigationType)
    {
        return navigationType switch
        {
            "main" => "Huvudnavigation",
            "dropdown" => "Dropdown",
            "footer" => "Footer",
            "hidden" => "Dold",
            _ => navigationType
        };
    }

    public void Dispose()
    {
        try
        {
            // Rensa alla TinyMCE-editorer
            _ = JS.InvokeVoidAsync("destroyAllEditors");
            Logger.LogInformation("Disposed CustomPageAdmin för {PageKey}", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Fel vid dispose av CustomPageAdmin");
        }
    }

    private async Task SaveFeatureSectionsFromEditor()
    {
        try
        {
            isSaving = true;

            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(50);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte synkronisera editorer innan sparning av featuresektioner för {PageKey}", PageKey);
            }

            await Cms.SaveFeatureSectionsAsync(PageKey, featureSections);
            Cache.InvalidatePageCache(PageKey);
            await Toast.Success("Featuresektioner sparade!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av featuresektioner för custom page {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid sparning av featuresektioner.");
        }
        finally
        {
            isSaving = false;
        }
    }
}