@page "/admin/omkonsortiet"
@using Microsoft.AspNetCore.Authorization
@using KronoxFront.Components.Layout
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject IJSRuntime JS
@inject ILogger<OmKonsortietAdmin> Logger
@inject IToastService Toast

<HeadContent>
    <meta name="description" content="Redigera Om konsortiet-sidan för KronoX. Lägg till, ändra och hantera innehåll, bilder och sektioner." />
</HeadContent>

<PageTitle>Admin - Om konsortiet</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Redigera Om konsortiet-sidan</h1>
                <div class="d-flex flex-column align-items-end">
                    <div class="d-flex gap-2 mb-2 align-items-center">

                        <PageStatusText PageKey="omkonsortiet" />
                        
                        <a href="/omkonsortiet" class="btn btn-outline-secondary" title="Visar sparade ändringar">
                            <i class="fa-solid fa-eye me-1"></i>
                            Visa sparad sida
                        </a>
                        <button type="button" class="btn btn-success" @onclick="SaveContent" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1"></i>
                            }
                            Spara allt innehåll
                        </button>
                        
                        <button type="button" class="btn btn-outline-secondary" @onclick="ScrollToNavigationSettings" title="Gå till navigationsinställningar">
                            <i class="fa-solid fa-cog"></i>
                        </button>
                    </div>
                    <small class="text-muted">
                        <i class="fa-solid fa-info-circle me-1"></i>
                        För att se dina ändringar, spara först och klicka sedan på "Visa sparad sida"
                    </small>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else
            {
                @* ---------- Section Configuration Manager ----------- *@
                <PageSectionConfigurator PageKey="omkonsortiet"
                                         AvailableSections="sectionConfigItems"
                                         OnConfigurationChanged="OnSectionConfigurationChanged"
                                         OnSave="SaveSectionConfiguration" />

                @* ---------- Navigeringsinställningar ----------- *@
                <NavigationSettings PageKey="omkonsortiet" 
                                    InitialDisplayName="@pageContent.Title"
                                    OnDisplayNameChanged="OnNavigationNameChanged" />

                @* ---------- Sidans titel ------------------------------------ *@
                <EditForm Model="pageContent" OnValidSubmit="SavePageContent">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Sidans titel</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="pageTitle" class="form-label">Titel</label>
                                <InputText id="pageTitle"
                                           class="form-control"
                                           @bind-Value="pageContent.Title"
                                           placeholder="T.ex. Om konsortiet" />
                                <ValidationMessage For="() => pageContent.Title" />
                                <div class="form-text">Denna titel visas i webbläsarens flik och som sidhuvud</div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- DYNAMISKA SEKTIONER BASERAT PÅ KONFIGURATION --------- *@
                @foreach (var sectionConfig in sectionConfigItems.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
                {
                    @switch (sectionConfig.Type)
                    {
                        case SectionType.Banner:
                            <BannerImageUploader PageKey="omkonsortiet" OnUploaded="OnBannerUploaded" />
                            break;

                        case SectionType.Intro:
                            <EditForm Model="introSection" OnValidSubmit="SaveIntroSection">
                                <DataAnnotationsValidator />
                                <div class="card mb-4">
                                    <div class="card-header bg-light">
                                        <h3 class="h5 mb-0">Intro-sektion</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Breadcrumb-titel (visas ovanför introt)</label>
                                            <InputText class="form-control" 
                                                       @bind-Value="introSection.BreadcrumbTitle" 
                                                       placeholder="T.ex. OM KONSORTIET" />
                                            <ValidationMessage For="() => introSection.BreadcrumbTitle" />
                                            <div class="form-text">Lämna tomt för att dölja breadcrumb-titeln</div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="mb-2 form-check">
                                                    <InputCheckbox class="form-check-input" 
                                                                   id="intro-has-image" 
                                                                   @bind-Value="introSection.HasImage" />
                                                    <label class="form-check-label" for="intro-has-image">Inkludera bild</label>
                                                </div>

                                                @if (introSection.HasImage)
                                                {
                                                    <div class="border p-3 mb-2 bg-light text-center" style="min-height: 200px;">
                                                        @if (!string.IsNullOrEmpty(introSection.ImageUrl))
                                                        {
                                                            <img src="@introSection.ImageUrl" class="img-fluid img-thumbnail mb-2" style="max-height: 200px;" />
                                                            <div class="mt-2">
                                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearIntroImage">
                                                                    <i class="fa-solid fa-times"></i> Ta bort bild
                                                                </button>
                                                            </div>
                                                            <div class="mt-2">
                                                                <label class="form-label">Bildbeskrivning:</label>
                                                                <InputText class="form-control form-control-sm" 
                                                                           @bind-Value="introSection.ImageAltText" 
                                                                           placeholder="Beskriv bilden" />
                                                                <ValidationMessage For="() => introSection.ImageAltText" />
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <InputFile OnChange="HandleIntroImageSelected" class="form-control" accept="image/*" />
                                                            <div class="text-muted small mt-2">Klicka för att välja bild</div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-8">
                                                <div class="mb-3">
                                                    <label class="form-label">Rubrik</label>
                                                    <InputText class="form-control" @bind-Value="introSection.Title" />
                                                    <ValidationMessage For="() => introSection.Title" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Innehåll</label>
                                                    <InputTextArea id="intro-editor" 
                                                                   @bind-Value="introSection.Content" 
                                                                   class="form-control tinymce-editor"
                                                                   rows="8" />
                                                    <ValidationMessage For="() => introSection.Content" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                            break;

                        case SectionType.NavigationButtons:
                            <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                                      NavigationButtons="introSection.NavigationButtons"
                                                      ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                                      NavigationButtonsChanged="OnNavigationButtonsChanged" />
                            break;

                        case SectionType.FeatureSections:
                            <FeatureSectionManager @ref="featureSectionManagerRef"
                                                   Sections="featureSections"
                                                   OnSectionsChanged="OnFeatureSectionsChanged"
                                                   OnImageUpload="OnFeatureImageUploaded"
                                                   OnImageDelete="OnFeatureImageDeleted" />
                            break;

                        case SectionType.FaqSections:
                            <FaqManager @ref="faqManagerRef"
                                        FaqSections="faqSections"
                                        OnFaqSectionsChanged="OnFaqSectionsChanged"
                                        OnFaqImageUpload="OnFaqImageUploaded" />
                            break;

                        case SectionType.MemberLogos:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">Medlemslogotyper</h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Medlemslogotyper visas automatiskt på denna sida när sektionen är aktiverad.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Sektionen "Våra medlemmar" kommer att visas på sidan med alla aktiva medlemslogotyper.
                                        För att hantera vilka logotyper som ska visas, deras ordning och beskrivningar, använd hanteringssidan nedan.
                                    </p>
                                    <div class="d-flex gap-2">
                                        <a href="/admin/memberlogos" class="btn btn-primary">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Hantera medlemslogotyper
                                        </a>
                                    </div>
                                </div>
                            </div>
                            break;
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    private PageContentViewModel pageContent = new();
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();
    private List<SectionConfigItem> sectionConfigItems = new();
    
    private bool isLoading = true;
    private bool isSaving = false;
    private FeatureSectionManager? featureSectionManagerRef;
    private FaqManager? faqManagerRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("omkonsortiet") ?? new PageContentViewModel
            {
                PageKey = "omkonsortiet",
                Title = "Om konsortiet",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };
            
            // Ladda alla sektionsdata
            introSection = await Cms.GetIntroSectionAsync("omkonsortiet");
            featureSections = await Cms.GetFeatureSectionsAsync("omkonsortiet", includePrivate: true);
            faqSections = await Cms.GetFaqSectionsAsync("omkonsortiet");
            
            // Ladda sektionskonfiguration
            sectionConfigItems = await Cms.GetPageSectionConfigAsync("omkonsortiet");

            // Säkerställ att vi har innehåll för sektioner
            await EnsureDefaultContent();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av innehåll för Om konsortiet admin");
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");
            await SetFallbackContent();
        }
        finally
        {
            isLoading = false;
        }
    }

    private Task EnsureDefaultContent()
    {
        // Säkerställ att vi har feature-sektioner om de är aktiverade
        if (sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled) && 
            featureSections.Count == 0)
        {
            featureSections.Add(new FeatureSectionViewModel
            {
                Id = 0,
                PageKey = "omkonsortiet",
                Title = "Välkommen till konsortiet",
                Content = "<p>Lägg till innehåll här...</p>",
                ImageUrl = "",
                ImageAltText = "",
                HasImage = false,
                HasPrivateContent = false,
                PrivateContent = "",
                ContactPersons = new List<ContactPersonViewModel>(),
                SortOrder = 0
            });
        }

        // Säkerställ att vi har FAQ-sektioner om de är aktiverade
        if (sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled) && 
            faqSections.Count == 0)
        {
            faqSections.Add(new FaqSectionViewModel
            {
                Id = 0,
                PageKey = "omkonsortiet",
                Title = "Vanliga frågor om konsortiet",
                Description = "Här hittar du svar på vanliga frågor om konsortiet",
                SortOrder = 0,
                FaqItems = new List<FaqItemViewModel>
                {
                    new FaqItemViewModel
                    {
                        Question = "Vad är KronoX-konsortiet?",
                        Answer = "<p>KronoX-konsortiet är en sammanslutning av svenska högskolor och universitet.</p>",
                        SortOrder = 0
                    }
                }
            });
        }
        
        return Task.CompletedTask;
    }

    private async Task SetFallbackContent()
    {
        introSection = new IntroSectionViewModel
        {
            Title = "Om konsortiet",
            Content = "<p>Information om KronoX-konsortiet</p>"
        };
        featureSections = new List<FeatureSectionViewModel>();
        faqSections = new List<FaqSectionViewModel>();
        sectionConfigItems = await Cms.GetPageSectionConfigAsync("omkonsortiet");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await InitializeEditors();
        }
    }

    private async Task InitializeEditors()
    {
        try
        {
            // Global rensning endast en gång
            await JS.InvokeVoidAsync("destroyAllEditors");
            await Task.Delay(300);

            StateHasChanged();
            await Task.Delay(200);

            // Initiera varje komponents editorer separat
            var initializationTasks = new List<Task>();

            // Intro-editor
            if (sectionConfigItems.Any(s => s.Type == SectionType.Intro && s.IsEnabled))
            {
                initializationTasks.Add(InitializeIntroEditor());
            }

            // Feature-editorer
            if (featureSectionManagerRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled))
            {
                initializationTasks.Add(featureSectionManagerRef.InitializeEditorsOnly());
            }

            // FAQ-editorer
            if (faqManagerRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled))
            {
                initializationTasks.Add(faqManagerRef.InitializeEditorsOnly());
            }

            // Vänta på att alla editorer initialiseras parallellt
            await Task.WhenAll(initializationTasks);

            Logger.LogInformation("Alla editorer initialiserade framgångsrikt");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initiering av editorer");
        }
    }

    private async Task InitializeIntroEditor()
    {
        try
        {
            var elementExists = await JS.InvokeAsync<bool>("elementExists", "intro-editor");
            if (elementExists)
            {
                await JS.InvokeVoidAsync("initTinyMCE", "intro-editor");
                Logger.LogInformation("Intro-editor initialiserad");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid intro-editor initialisering");
        }
    }

    // Synkronisera intro-editor med Blazor ViewModel
    private async Task SyncIntroEditor()
    {
        try
        {
            var editorExists = await JS.InvokeAsync<bool>("tinymceExists", "intro-editor");
            if (editorExists)
            {
                var content = await JS.InvokeAsync<string>("eval", 
                    "tinymce.get('intro-editor') ? tinymce.get('intro-editor').getContent() : ''");
                
                if (!string.IsNullOrEmpty(content))
                {
                    introSection.Content = content;
                    Logger.LogInformation("Intro-editor synkroniserad: {ContentLength} tecken", content.Length);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunde inte synkronisera intro-editor");
        }
    }

    private async Task OnSectionConfigurationChanged()
    {
        await EnsureDefaultContent();
        StateHasChanged();
        
        // Längre fördröjning för DOM-uppdatering
        await Task.Delay(500);
        await InitializeEditors();
    }

    private async Task SaveSectionConfiguration(List<SectionConfigItem> configItems)
    {
        try
        {
            var success = await Cms.SavePageSectionConfigAsync("omkonsortiet", configItems);
            if (success)
            {
                sectionConfigItems = configItems;
                await Toast.Success("Sektionskonfiguration sparad!");
                await OnSectionConfigurationChanged();
            }
            else
            {
                await Toast.Error("Fel vid sparning av sektionskonfiguration");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av sektionskonfiguration");
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            // Synkronisera editorer
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer: {Message}", ex.Message);
            }

            // Explicit synkronisering av intro-editor INNAN allmän syncAllEditors
            await SyncIntroEditor();

            // Spara endast aktiverade sektioner
            var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

            // Spara intro-sektion om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.Intro))
            {
                await Cms.SaveIntroSectionAsync("omkonsortiet", introSection);
            }

            // Spara feature-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
            {
                await Cms.SaveFeatureSectionsAsync("omkonsortiet", featureSections);
            }

            // Spara FAQ-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FaqSections))
            {
                await Cms.SaveFaqSectionsAsync("omkonsortiet", faqSections);
            }
            else
            {
                // Ta bort FAQ-sektioner om de är inaktiverade
                await Cms.DeleteFaqSectionsAsync("omkonsortiet");
            }

            await Toast.Success("Innehållet har sparats framgångsrikt!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av innehåll för Om konsortiet");
            await Toast.Error("Ett fel inträffade vid sparning av innehållet.");
        }
        finally
        {
            isSaving = false;
        }
    }

    // Event handlers för olika sektioner
    private async Task OnBannerUploaded(PageImageViewModel? img)
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("omkonsortiet") ?? new PageContentViewModel();
            await Toast.Success("Bannerbild uppdaterad!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda om pageContent efter bannerbildändring");
            await Toast.Error("Bannerbilden laddades upp men sidan kunde inte uppdateras.");
        }
        StateHasChanged();
    }

    private async Task HandleIntroImageSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(e.File, "omkonsortiet");
                introSection.ImageUrl = imageUrl;
                introSection.HasImage = true;
                await Toast.Success("Introbild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av introbild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void ClearIntroImage()
    {
        introSection.ImageUrl = "";
        introSection.ImageAltText = "";
    }

    private async Task OnFeatureImageUploaded(FeatureSectionManager.ImageUploadInfo info)
    {
        if (info.File != null && info.Section != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "omkonsortiet");
                info.Section.ImageUrl = imageUrl;
                info.CloseModal?.Invoke();
                await Toast.Success("Feature-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task OnFaqImageUploaded(FaqManager.FaqImageUploadInfo info)
    {
        if (info.File != null && info.Item != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "omkonsortiet");
                info.Item.ImageUrl = imageUrl;
                await Toast.Success("FAQ-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av FAQ-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    // Övriga event handlers
    private async Task SavePageContent()
    {
        try
        {
            await Cms.SavePageContentAsync("omkonsortiet", pageContent);
            await Toast.Success("Sidans titel har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av sidtitel");
            await Toast.Error("Fel vid sparande av sidtitel");
        }
    }

    private async Task SaveIntroSection()
    {
        try
        {
            // Synkronisera först
            await SyncIntroEditor();
            
            await Cms.SaveIntroSectionAsync("omkonsortiet", introSection);
            await Toast.Success("Intro-sektion har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av intro-sektion");
            await Toast.Error("Fel vid sparande av intro-sektion");
        }
    }

    private void OnFeatureSectionsChanged() { }
    private void OnFeatureImageDeleted(FeatureSectionManager.ImageDeleteInfo info) { }
    private void OnFaqSectionsChanged() { }
    private Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
        return Task.CompletedTask;
    }

    private Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnNavigationNameChanged(string newDisplayName)
    {
        // Synkronisera sidtiteln om önskas
        if (!string.IsNullOrEmpty(newDisplayName) && pageContent.Title != newDisplayName)
        {
            var shouldSync = await JS.InvokeAsync<bool>("confirm", 
                $"Vill du också ändra sidtiteln till '{newDisplayName}'?");
            
            if (shouldSync)
            {
                pageContent.Title = newDisplayName;
                await SavePageContent();
            }
        }
    }

    private async Task ScrollToNavigationSettings()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToNavigationSettings");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunde inte scrolla till navigationsinställningar");
        }
    }
}