@page "/admin/{PageKey}"
@using System.Collections.Generic
@using System.Linq
@using KronoxFront.Components.Editors
@using KronoxFront.Components.Shared.Admin
@using KronoxFront.Components.Shared.Content
@using KronoxFront.Components.Shared.Layout
@using KronoxFront.Components.Shared.UI
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@implements IDisposable
@inject CmsService Cms
@inject IToastService Toast
@inject IJSRuntime JS
@inject ILogger<MainPageAdmin> Logger
@inject NavigationManager Navigation
@inject CacheService Cache
@inject IHttpClientFactory HttpClientFactory

<HeadContent>
    <meta name="description" content="Redigera sidan '@CurrentDisplayName()' för KronoX. Hantera innehåll, bilder och sektioner." />
</HeadContent>

<PageTitle>Admin - @CurrentDisplayName()</PageTitle>

@if (isChecking)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Kontrollerar sidtyp...</span>
        </div>
        <p class="mt-2 text-muted">Kontrollerar om sidan är en fast sida eller anpassad sida...</p>
    </div>
    return;
}

@if (string.IsNullOrEmpty(PageKey) || (!IsValidPageKey(PageKey) && !isCustomPage))
{
    <div class="container-fluid">
        <div class="alert alert-danger">
            <h4>Ogiltig sida</h4>
            <p>Sidan "@PageKey" finns inte eller är inte tillgänglig för redigering.</p>
            <p class="mb-3">Giltiga fasta sidor som kan redigeras:</p>
            <ul class="mb-3">
                @foreach (var validPage in GetValidFixedPages())
                {
                    <li>
                        <a href="/admin/@validPage.Key" class="text-decoration-none">
                            @validPage.Value (@validPage.Key)
                        </a>
                    </li>
                }
            </ul>
            <div class="d-flex gap-2">
                <a href="/admin/dashboard" class="btn btn-primary">Tillbaka till admin-dashboard</a>
                <a href="/admin/pages" class="btn btn-outline-secondary">Hantera anpassade sidor</a>
            </div>
        </div>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3">Redigera sidan "@CurrentDisplayName()"</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><a href="/admin/dashboard">Admin</a></li>
                            <li class="breadcrumb-item">Sidor</li>
                            <li class="breadcrumb-item active" aria-current="page">@CurrentDisplayName()</li>
                        </ol>
                    </nav>
                </div>
                <div class="d-flex flex-column align-items-end">
                    <div class="d-flex gap-2 mb-2 align-items-center">
                        <PageStatusText PageKey="@PageKey" />

                        <a href="/@GetPageUrl()" class="btn btn-outline-secondary" title="Visar sparade ändringar">
                            <i class="fa-solid fa-eye me-1"></i>
                            Visa sparad sida
                        </a>

                        <button type="button" class="btn btn-success" @onclick="SaveContent" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1"></i>
                            }
                            Spara allt innehåll
                        </button>

                        <button type="button" class="btn btn-outline-secondary" @onclick="ScrollToNavigationSettings" title="Gå till navigationsinställningar">
                            <i class="fa-solid fa-cog"></i>
                        </button>
                    </div>
                    <small class="text-muted">
                        <i class="fa-solid fa-info-circle me-1"></i>
                        För att se dina ändringar, spara först och klicka sedan på "Visa sparad sida"
                    </small>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else
            {
                @* ---------- Navigeringsinställningar (ALLTID TILLGÄNGLIG) ----------- *@
                <NavigationSettings PageKey="@PageKey"
                                    InitialDisplayName="@pageContent.Title"
                                    OnDisplayNameChanged="OnNavigationNameChanged" />

                @* ---------- Section Configuration Manager (ALLTID TILLGÄNGLIG) ----------- *@
                <PageSectionConfigurator PageKey="@PageKey"
                                         AvailableSections="sectionConfigItems"
                                         OnConfigurationChanged="OnSectionConfigurationChanged"
                                         OnSave="SaveSectionConfiguration" />

                @* ---------- DYNAMISKA SEKTIONER BASERAT PÅ KONFIGURATION --------- *@
                @foreach (var sectionConfig in sectionConfigItems.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
                {
                    @switch (sectionConfig.Type)
                    {
                        case SectionType.Banner:
                            <BannerImageUploader PageKey="@PageKey" OnUploaded="OnBannerUploaded" OnSaveRequested="SaveContent" />
                            break;

                        case SectionType.Intro:
                            <IntroSectionEditor @ref="introSectionEditorRef"
                                                IntroSection="@introSection"
                                                PageKey="@PageKey"
                                                BreadcrumbPlaceholder="@GetBreadcrumbPlaceholder()"
                                                IsSaving="@isSaving"
                                                OnIntroSectionChanged="OnIntroSectionChanged"
                                                OnSaveIntroSection="SaveIntroSectionFromEditor" />
                            break;

                        case SectionType.NavigationButtons:
                            <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                                     NavigationButtons="introSection.NavigationButtons"
                                                     ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                                     NavigationButtonsChanged="OnNavigationButtonsChanged" />
                            break;

                        case SectionType.FeatureSections:
                            <FeatureSectionEditor @ref="featureSectionEditorRef"
                                                  Sections="featureSections"
                                                  OnSectionsChanged="OnFeatureSectionsChanged"
                                                  OnImageUpload="OnFeatureImageUploaded"
                                                  OnImageDelete="OnFeatureImageDeleted"
                                                  OnSaveSections="SaveFeatureSectionsFromEditor" />
                            break;

                        case SectionType.FaqSections:
                            <FaqEditor @ref="faqEditorRef"
                                       FaqSections="faqSections"
                                       OnFaqSectionsChanged="OnFaqSectionsChanged"
                                       OnFaqImageUpload="OnFaqImageUploaded" />
                            break;

                        case SectionType.ContactForm:
                            <ContactFormEditor ContactInfo="@contactInfo"
                                               IsSaving="@isSaving"
                                               OnContactInfoChanged="OnContactInfoChanged" />
                            break;

                        case SectionType.NewsSection:
                            <NewsSectionEditor PageKey="@PageKey" />
                            break;

                        case SectionType.DocumentSection:
                            <DocumentSectionEditor PageKey="@PageKey"
                                                   Title="@GetDocumentSectionTitle()"
                                                   Description="@GetDocumentSectionDescription()" />
                            break;

                        case SectionType.ActionPlanTable:
                            <ActionPlanSection ActionPlan="@actionPlan"
                                               Title="Handlingsplan"
                                               IsAdminContext="true"
                                               ShowAdminButton="true"
                                               AdminButtonUrl="/admin/actionplan" />
                            break;

                        case SectionType.DevelopmentSuggestionForm:
                            <DevelopmentSuggestionEditor PageKey="@PageKey" />
                            break;

                        case SectionType.MemberLogos:
                            <AdminSectionFrame Title="Medlemslogotyper"
                                               IconClass="fa-solid fa-users"
                                               ShowAdminButton="true"
                                               AdminButtonUrl="/admin/memberlogos"
                                               AdminButtonText="Hantera medlemslogotyper"
                                               AdminButtonIcon="fa-solid fa-cog">
                                <ChildContent>
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Medlemslogotyper visas automatiskt på denna sida när sektionen är aktiverad.
                                    </div>
                                    <p class="text-muted mb-0">
                                        Sektionen ”Våra medlemmar” visar alla aktiva logotyper. Använd knappen ”Hantera medlemslogotyper”
                                        för att justera vilka logotyper som visas, deras ordning och beskrivningar.
                                    </p>
                                </ChildContent>
                            </AdminSectionFrame>
                            break;
                    }
                }

                @* Visar meddelande om inga sektioner är aktiverade *@
                @if (!sectionConfigItems.Any(s => s.IsEnabled))
                {
                    <div class="card">
                        <div class="card-body text-center py-5">
                            <i class="fa-solid fa-layer-group fa-3x text-muted mb-3"></i>
                            <h4>Inga sektioner aktiverade</h4>
                            <p class="text-muted">Aktivera sektioner ovan för att börja redigera innehållet på denna sida.</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<ScrollTopButton />

@code {
    [Parameter] public string PageKey { get; set; } = "";

    private bool isChecking = true;
    private bool isCustomPage = false;

    private PageContentViewModel pageContent = new();
    private IntroSectionViewModel introSection = new();
    private IntroSectionEditor? introSectionEditorRef;
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();
    private List<SectionConfigItem> sectionConfigItems = new();
    private ActionPlanTableViewModel actionPlan = new();
    private ContactPageInfoViewModel contactInfo = new();

    private bool isLoading = true;
    private bool isSaving = false;
    private FeatureSectionEditor? featureSectionEditorRef;
    private FaqEditor? faqEditorRef;
    private bool needsEditorInitialization = false;

    // Dynamiska giltiga fasta sidor (endast sidor med .razor-filer)
    private readonly Dictionary<string, string> validFixedPages = new()
    {
        ["home"] = "Startsida",
        ["omkonsortiet"] = "Om konsortiet",
        ["visioner"] = "Visioner & Verksamhetsidé",
        ["kontaktaoss"] = "Kontakta oss",
        ["omsystemet"] = "Om systemet",
        ["forstyrelsen"] = "För styrelsen",
        ["forvnsg"] = "För VNSG",
        ["forvaltning"] = "Förvaltning",
        ["medlemsnytt"] = "Medlemsnytt",
        ["dokument"] = "Dokument"
    };

    // URL-mapping för vissa sidor
    private readonly Dictionary<string, string> pageUrlMapping = new()
    {
        ["home"] = "",
        ["visioner"] = "visioner",
        ["omsystemet"] = "omsystemet",
        ["omkonsortiet"] = "omkonsortiet",
        ["kontaktaoss"] = "kontaktaoss",
        ["forstyrelsen"] = "forstyrelsen",
        ["forvnsg"] = "forvnsg",
        ["forvaltning"] = "forvaltning",
        ["medlemsnytt"] = "medlemsnytt",
        ["dokument"] = "dokument"
    };

    private string? _navDisplayName;

    private string CurrentDisplayName() => _navDisplayName ?? GetPageDisplayName();

    protected override async Task OnParametersSetAsync()
    {
        // Rensa tidigare data först
        ClearPreviousPageData();

        isChecking = true;
        StateHasChanged();

        await CheckPageType();

        if (isCustomPage)
        {
            // Omdirigera till CustomPageEditor istället
            Navigation.NavigateTo($"/admin/page/{PageKey}");
            return;
        }

        if (string.IsNullOrEmpty(PageKey) || !IsValidPageKey(PageKey))
        {
            isChecking = false;
            return;
        }

        try
        {
            isLoading = true;

            // Ladda pageContent
            pageContent = await Cms.GetPageContentAsync(PageKey) ?? new PageContentViewModel
            {
                PageKey = PageKey,
                Title = GetPageDisplayName(),
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            // Initiera _navDisplayName från lagrat innehåll om det finns
            _navDisplayName = pageContent.Title;

            // Ladda sektionskonfiguration först
            sectionConfigItems = await Cms.GetPageSectionConfigAsync(PageKey);

            if (!sectionConfigItems.Any())
            {
                sectionConfigItems = GetDefaultSectionConfig(PageKey);
                await Cms.SavePageSectionConfigAsync(PageKey, sectionConfigItems);
            }

            // Ladda sektionsdata baserat på aktiverade sektioner
            await LoadSectionData();

            // Säkerställ standardinnehåll
            EnsureDefaultContent();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av innehåll för {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");
            await SetFallbackContent();
        }
        finally
        {
            isLoading = false;
            isChecking = false;

            needsEditorInitialization = true;
        }
    }

    // Metod för att rensa tidigare data
    private void ClearPreviousPageData()
    {
        // Rensa all data från föregående sida
        pageContent = new();
        introSection = new();
        featureSections = new();
        faqSections = new();
        sectionConfigItems = new();
        actionPlan = new();
        contactInfo = new();

        // Rensa referenser till editorer
        introSectionEditorRef = null;
        featureSectionEditorRef = null;
        faqEditorRef = null;
        _navDisplayName = null;
    }

    private async Task CheckPageType()
    {
        if (string.IsNullOrEmpty(PageKey))
        {
            isChecking = false;
            return;
        }

        // Kontrollera om det är en fast sida först
        if (IsValidPageKey(PageKey))
        {
            isCustomPage = false;
            isChecking = false;
            return;
        }

        // Kontrollera om det är en anpassad sida
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            var response = await httpClient.GetAsync($"api/custompage/{PageKey}");

            if (response.IsSuccessStatusCode)
            {
                isCustomPage = true;
                Logger.LogInformation("Sida {PageKey} identifierad som anpassad sida, omdirigerar till CustomPageEditor", PageKey);
            }
            else
            {
                isCustomPage = false;
                Logger.LogWarning("Sida {PageKey} hittades inte som varken fast sida eller anpassad sida", PageKey);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid kontroll av sidtyp för {PageKey}", PageKey);
            isCustomPage = false;
        }
        finally
        {
            isChecking = false;
        }
    }

    private async Task LoadSectionData()
    {
        var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

        // Ladda endast data för aktiverade sektioner för bättre prestanda
        var loadTasks = new List<Task>();

        if (activeSections.Any(s => s.Type == SectionType.Intro))
        {
            loadTasks.Add(LoadIntroSection());
        }

        if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
        {
            loadTasks.Add(LoadFeatureSections());
        }

        if (activeSections.Any(s => s.Type == SectionType.FaqSections))
        {
            loadTasks.Add(LoadFaqSections());
        }

        if (activeSections.Any(s => s.Type == SectionType.ActionPlanTable))
        {
            loadTasks.Add(LoadActionPlan());
        }

        if (activeSections.Any(s => s.Type == SectionType.ContactForm))
        {
            loadTasks.Add(LoadContactInfo());
        }

        await Task.WhenAll(loadTasks);
    }

    private async Task LoadIntroSection()
    {
        introSection = await Cms.GetIntroSectionAsync(PageKey);
    }

    private async Task LoadFeatureSections()
    {
        featureSections = await Cms.GetFeatureSectionsAsync(PageKey, includePrivate: true);
    }

    private async Task LoadFaqSections()
    {
        faqSections = await Cms.GetFaqSectionsAsync(PageKey);
    }

    private async Task LoadActionPlan()
    {
        actionPlan = await Cms.GetActionPlanAsync(PageKey);
    }

    private async Task LoadContactInfo()
    {
        contactInfo = await Cms.GetContactInfoAsync();
    }

    private List<SectionConfigItem> GetDefaultSectionConfig(string pageKey)
    {
        // Skapa alla tillgängliga sektioner
        var allSections = Enum.GetValues<SectionType>()
            .Where(type => IsSectionAvailableForPage(type, pageKey))
            .Select((type, index) => new SectionConfigItem
            {
                Type = type,
                IsEnabled = GetDefaultEnabledState(type, pageKey),
                SortOrder = index
            }).ToList();

        return allSections;
    }

    private bool IsSectionAvailableForPage(SectionType type, string pageKey)
    {
        // ContactForm är endast tillgängligt för kontaktsidan
        if (type == SectionType.ContactForm && !IsContactPage(pageKey))
        {
            return false;
        }

        return true;
    }

    private bool IsContactPage(string pageKey)
    {
        var key = pageKey.ToLowerInvariant();
        return key == "kontaktaoss";
    }

    private bool GetDefaultEnabledState(SectionType type, string pageKey)
    {
        var key = pageKey.ToLowerInvariant();

        return (key, type) switch
        {
            ("home", SectionType.Banner) => true,
            ("home", SectionType.Intro) => true,
            ("home", SectionType.FeatureSections) => true,
            ("home", SectionType.MemberLogos) => true,

            ("kontaktaoss", SectionType.Banner) => true,
            ("kontaktaoss", SectionType.Intro) => true,
            ("kontaktaoss", SectionType.ContactForm) => true,
            ("kontaktaoss", SectionType.MemberLogos) => true,

            ("medlemsnytt", SectionType.Banner) => true,
            ("medlemsnytt", SectionType.Intro) => true,
            ("medlemsnytt", SectionType.NewsSection) => true,
            ("medlemsnytt", SectionType.MemberLogos) => true,

            ("forvaltning", SectionType.Banner) => true,
            ("forvaltning", SectionType.Intro) => true,
            ("forvaltning", SectionType.ActionPlanTable) => true,
            ("forvaltning", SectionType.DevelopmentSuggestionForm) => true,

            ("dokument", SectionType.Banner) => true,
            ("dokument", SectionType.Intro) => true,
            ("dokument", SectionType.DocumentSection) => true,

            // Standard för alla andra sidor
            (_, SectionType.Banner) => true,
            (_, SectionType.Intro) => true,
            _ => false
        };
    }

    private Dictionary<string, string> GetValidFixedPages()
    {
        return validFixedPages;
    }

    private bool IsValidPageKey(string key)
    {
        return !string.IsNullOrEmpty(key) && validFixedPages.ContainsKey(key.ToLowerInvariant());
    }

    private string GetPageDisplayName()
    {
        if (string.IsNullOrEmpty(PageKey)) return "Okänd sida";

        return validFixedPages.TryGetValue(PageKey.ToLowerInvariant(), out var displayName)
            ? displayName
            : PageKey;
    }

    private string GetPageUrl()
    {
        if (string.IsNullOrEmpty(PageKey)) return "";

        return pageUrlMapping.TryGetValue(PageKey.ToLowerInvariant(), out var url)
            ? url
            : PageKey;
    }

    private string GetBreadcrumbPlaceholder()
    {
        return $"T.ex. {CurrentDisplayName().ToUpper()}";
    }

    private string GetPageTitlePlaceholder()
    {
        return $"T.ex. KronoX - {CurrentDisplayName()}";
    }

    private bool ShouldShowDocumentPreview()
    {
        return PageKey.ToLowerInvariant() is "medlemsnytt" or "dokument";
    }

    private bool IsFullActionPlanEditor()
    {
        return PageKey.ToLowerInvariant() == "forvaltning";
    }

    private string GetDocumentSectionTitle()
    {
        return PageKey.ToLowerInvariant() switch
        {
            "medlemsnytt" => "Medlemsdokument",
            "dokument" => "Alla dokument",
            "forstyrelsen" => "Styrelsehandlingar",
            "forvnsg" => "VNSG-dokument",
            _ => "Dokument"
        };
    }

    private string GetDocumentSectionDescription()
    {
        return PageKey.ToLowerInvariant() switch
        {
            "medlemsnytt" => "Visar dokument baserat på användarens roller. Medlemmar ser endast dokument för sina roller.",
            "dokument" => "Huvudsida för alla dokument. Användare ser dokument baserat på sina roller och behörigheter.",
            "forstyrelsen" => "Styrelsespecifika dokument som endast är tillgängliga för styrelsemedlemmar.",
            "forvnsg" => "Dokument för VNSG-medlemmar och relaterat material.",
            _ => "Dokumentsektionen visar relevanta dokument för denna sida."
        };
    }

    private void EnsureDefaultContent()
    {
        var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

        // Skapa standardinnehåll för aktiverade sektioner som saknar innehåll
        if (activeSections.Any(s => s.Type == SectionType.Intro) && string.IsNullOrEmpty(introSection.Title))
        {
            var (title, content, breadcrumb) = GetDefaultIntroContent();
            introSection.Title = title;
            introSection.Content = content;
            introSection.BreadcrumbTitle = breadcrumb;
        }

        if (activeSections.Any(s => s.Type == SectionType.FeatureSections) && featureSections.Count == 0)
        {
            var (featureTitle, featureContent) = GetDefaultFeatureContent();
            featureSections.Add(new FeatureSectionViewModel
            {
                Id = 0,
                PageKey = PageKey,
                Title = featureTitle,
                Content = featureContent,
                ImageUrl = "",
                ImageAltText = "",
                HasImage = false,
                SortOrder = 0
            });
        }

        if (activeSections.Any(s => s.Type == SectionType.FaqSections) && faqSections.Count == 0)
        {
            var (faqTitle, faqDescription, faqQuestion, faqAnswer) = GetDefaultFaqContent();
            faqSections.Add(new FaqSectionViewModel
            {
                Id = 0,
                PageKey = PageKey,
                Title = faqTitle,
                Description = faqDescription,
                SortOrder = 0,
                FaqItems = new List<FaqItemViewModel>
                {
                    new FaqItemViewModel
                    {
                        Question = faqQuestion,
                        Answer = faqAnswer,
                        SortOrder = 0
                    }
                }
            });
        }
    }

    private (string title, string content, string breadcrumb) GetDefaultIntroContent()
    {
        return PageKey.ToLowerInvariant() switch
        {
            "home" => ("Välkommen till KronoX", "<p>KronoX är ett konsortium som förvaltar schemasystemet KronoX för högre utbildning i Sverige.</p>", "STARTSIDA"),
            "omkonsortiet" => ("Om konsortiet", "<p>Information om KronoX-konsortiet och vårt arbete.</p>", "OM KONSORTIET"),
            "visioner" => ("Visioner & Verksamhetsidé", "<p>Våra visioner och mål för framtiden.</p>", "VISIONER"),
            "kontaktaoss" => ("Kontakt", "<p>Kontakta oss för mer information. Supportfrågor för KronoX-systemet hanteras av vårt lärosätes KronoX-administratör.</p><p>Formuläret ska ej användas för lärosätesspecifika frågor, som t ex glömt lösenord eller problem vid anmälan till tentamen (i dessa fall bör ni ta kontakt med aktuellt lärosäte).</p>", "KONTAKTA OSS"),
            "omsystemet" => ("Om systemet", "<p>Information om KronoX-systemet och dess funktioner.</p>", "OM SYSTEMET"),
            "forstyrelsen" => ("För styrelsen", "<p>Information och resurser för styrelsemedlemmar.</p>", "FÖR STYRELSEN"),
            "forvnsg" => ("För VNSG", "<p>Information för VNSG-medlemmar och representanter.</p>", "FÖR VNSG"),
            "forvaltning" => ("Handlingsplan och utvecklingsförslag", "<p>Här finns konsortiets handlingsplan med utvecklingsförslag för 2024 och framåt. Denna uppdateras löpande.</p><p>Sist på sidan hittar du också ett formulär för utvecklingsförslag, där du kan skicka in dina utvecklingsförslag direkt till systemgruppen. Glöm inte att beskriva ditt förslag för att undvika missförstånd.</p>", "FÖRVALTNING"),
            "medlemsnytt" => ("För medlemmar", "<p>Här hittar du de senaste uppdateringarna och nyheterna om KronoX och konsortiet.</p><p>Vill du läsa mer om Konsortiets medlemmar och hur de arbetar med KronoX hittar du det under <strong>Hur vi arbetar med KronoX</strong>.</p><p>Letar du efter kontaktuppgifter till medlemmarna finns det under <strong>Om konsortiet</strong>.</p><p>Söker du information om handhavande/användarinstruktioner för schemasystemet, hittar du det i <strong>Manualen</strong>.</p>", "MEDLEMSNYTT"),
            "dokument" => ("Dokument och resurser", "<p>Här hittar du alla dokument och resurser relaterade till KronoX.</p>", "DOKUMENT"),
            _ => (CurrentDisplayName(), $"<p>Välkommen till {CurrentDisplayName()}.</p>", CurrentDisplayName().ToUpper())
        };
    }

    private (string title, string content) GetDefaultFeatureContent()
    {
        return PageKey.ToLowerInvariant() switch
        {
            "home" => ("Välkommen till KronoX", "<p>Lägg till innehåll här</p>"),
            "omkonsortiet" => ("Information om konsortiet", "<p>Lägg till innehåll här...</p>"),
            "visioner" => ("Våra visioner", "<p>Lägg till innehåll här...</p>"),
            "omsystemet" => ("Systemfunktioner", "<p>Lägg till innehåll här...</p>"),
            "forstyrelsen" => ("För styrelsen", "<p>Lägg till innehåll här...</p>"),
            "forvnsg" => ("För VNSG", "<p>Lägg till innehåll här...</p>"),
            "medlemsnytt" => ("Information för medlemmar", "<p>Lägg till innehåll här...</p>"),
            "dokument" => ("Dokument och resurser", "<p>Lägg till innehåll här...</p>"),
            "forvaltning" => ("Utveckling och förvaltning", "<p>Lägg till innehåll här...</p>"),
            _ => ($"Information om {CurrentDisplayName()}", "<p>Lägg till innehåll här...</p>")
        };
    }

    private (string title, string description, string question, string answer) GetDefaultFaqContent()
    {
        return PageKey.ToLowerInvariant() switch
        {
            "home" => ("Vanliga frågor", "Här hittar du svar på vanliga frågor", "Vad är KronoX?", "<p>KronoX är ett schemaläggningssystem för högre utbildning.</p>"),
            "omkonsortiet" => ("Vanliga frågor om konsortiet", "Här hittar du svar på frågor om konsortiet", "Vad är KronoX-konsortiet?", "<p>Konsortiet förvaltar schemasystemet KronoX.</p>"),
            "visioner" => ("Vanliga frågor om visioner", "Här hittar du svar på frågor om våra visioner", "Vilka är era visioner?", "<p>Vi strävar efter att utveckla den bästa schemaläggningslösningen.</p>"),
            "kontaktaoss" => ("Vanliga frågor om kontakt", "Här hittar du svar på vanliga frågor om att kontakta oss", "Hur kontaktar jag support?", "<p>Du kan kontakta support genom formuläret ovan eller via e-post.</p>"),
            "omsystemet" => ("Vanliga frågor om systemet", "Här hittar du svar på frågor om KronoX-systemet", "Vad kan systemet göra?", "<p>KronoX hanterar schemaläggning för högskolor och universitet.</p>"),
            "forstyrelsen" => ("Vanliga frågor för styrelsen", "Här hittar du svar på styrelsespecifika frågor", "Hur får jag tillgång till styrelsehandlingar?", "<p>Kontakta din kontaktperson för att få tillgång.</p>"),
            "forvnsg" => ("Vanliga frågor för VNSG", "Här hittar du svar på frågor för VNSG-medlemmar", "Vad är VNSG?", "<p>VNSG är vårdnadshavarnas samarbetsgrupp.</p>"),
            "medlemsnytt" => ("Vanliga frågor för medlemmar", "Här hittar du svar på vanliga frågor från medlemmar", "Hur får jag tillgång till medlemsområdet?", "<p>Kontakta din kontaktperson för att få tillgång.</p>"),
            "dokument" => ("Vanliga frågor om dokument", "Här hittar du svar på frågor om dokumenthantering", "Var hittar jag dokumenten?", "<p>Dokument finns organiserade efter kategorier och roller.</p>"),
            "forvaltning" => ("Vanliga frågor om förvaltning och utveckling", "Här hittar du svar på frågor om förvaltning och utveckling", "Hur kan jag skicka utvecklingsförslag?", "<p>Du kan skicka förslag genom formuläret på denna sida.</p>"),
            _ => ($"Vanliga frågor om {CurrentDisplayName()}", $"Här hittar du svar på frågor om {CurrentDisplayName()}", "Exempel på fråga", "<p>Exempel på svar...</p>")
        };
    }

    private async Task SetFallbackContent()
    {
        introSection = new IntroSectionViewModel
        {
            Title = CurrentDisplayName(),
            Content = "<p>Information laddas...</p>",
            BreadcrumbTitle = CurrentDisplayName().ToUpper()
        };
        featureSections = new List<FeatureSectionViewModel>();
        faqSections = new List<FaqSectionViewModel>();
        sectionConfigItems = GetDefaultSectionConfig(PageKey);
        contactInfo = new ContactPageInfoViewModel();
        actionPlan = new ActionPlanTableViewModel { PageKey = PageKey, Items = new List<ActionPlanItem>() };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || needsEditorInitialization)
        {
            needsEditorInitialization = false;
            await Task.Delay(500);
            await InitializeEditors();
        }
    }

    private async Task InitializeEditors()
    {
        try
        {
            Logger.LogInformation("=== Startar TinyMCE-initialisering för {PageKey} ===", PageKey);

            await JS.InvokeVoidAsync("eval", "if(typeof tinymce !== 'undefined') { tinymce.remove(); }");
            await Task.Delay(500);

            await JS.InvokeVoidAsync("destroyAllEditors");
            await Task.Delay(300);

            StateHasChanged();
            await Task.Delay(200);

            var initializationTasks = new List<Task>();

            // Intro-editor
            if (introSectionEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.Intro && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await introSectionEditorRef.InitializeEditor();
                        Logger.LogInformation("Intro-editor initialiserad framgångsrikt");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av intro-editor");
                    }
                }));
            }

            // Feature-editorer
            if (featureSectionEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await Task.Delay(200);
                        await featureSectionEditorRef.InitializeEditorsOnly();
                        Logger.LogInformation("Feature-editorer initialiserade");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av feature-editorer");
                    }
                }));
            }

            // FAQ-editorer
            if (faqEditorRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled))
            {
                initializationTasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        await Task.Delay(400);
                        await faqEditorRef.InitializeEditorsOnly();
                        Logger.LogInformation("FAQ-editorer initialiserade");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Fel vid initialisering av FAQ-editorer");
                    }
                }));
            }

            // Vänta på alla editorer
            if (initializationTasks.Any())
            {
                await Task.WhenAll(initializationTasks);
            }

            Logger.LogInformation("=== TinyMCE-initialisering slutförd för {PageKey} ===", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "=== KRITISKT FEL vid TinyMCE-initialisering för {PageKey} ===", PageKey);
        }
    }

    private async Task SyncIntroEditor()
    {
        if (introSectionEditorRef != null)
        {
            try
            {
                await introSectionEditorRef.SyncEditor();
                Logger.LogInformation("Intro-editor synkroniserad för {PageKey}", PageKey);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte synkronisera intro-editor för {PageKey}", PageKey);
            }
        }
    }

    private async Task OnSectionConfigurationChanged()
    {
        try
        {
            Logger.LogInformation("Sektionskonfiguration ändrad för {PageKey}, laddar om...", PageKey);

            // Ladda data för nyligen aktiverade sektioner
            await LoadSectionData();
            EnsureDefaultContent();

            StateHasChanged();

            await Task.Delay(200);
            await InitializeEditors();

            Logger.LogInformation("Sektionskonfiguration och editorer uppdaterade för {PageKey}", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av sektionskonfiguration för {PageKey}", PageKey);
        }
    }

    private async Task SaveSectionConfiguration(List<SectionConfigItem> configItems)
    {
        try
        {
            var success = await Cms.SavePageSectionConfigAsync(PageKey, configItems);
            if (success)
            {
                sectionConfigItems = configItems;
                await Toast.Success("Sektionskonfiguration sparad!");
                await OnSectionConfigurationChanged();
            }
            else
            {
                await Toast.Error("Fel vid sparning av sektionskonfiguration");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av sektionskonfiguration för {PageKey}", PageKey);
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            await SyncIntroEditor();

            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer för {PageKey}: {Message}", PageKey, ex.Message);
            }

            var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();
            var saveTasks = new List<Task>();

            // Spara sidtitel och innehåll
            saveTasks.Add(Cms.SavePageContentAsync(PageKey, pageContent));

            // Spara intro-sektion om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.Intro))
            {
                saveTasks.Add(Cms.SaveIntroSectionAsync(PageKey, introSection));
            }

            // Spara feature-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
            {
                saveTasks.Add(Cms.SaveFeatureSectionsAsync(PageKey, featureSections));
            }

            // Spara FAQ-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FaqSections))
            {
                saveTasks.Add(Cms.SaveFaqSectionsAsync(PageKey, faqSections));
            }

            // Spara handlingsplan om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.ActionPlanTable))
            {
                saveTasks.Add(Cms.SaveActionPlanAsync(PageKey, actionPlan));
            }

            await Task.WhenAll(saveTasks);

            Cache.InvalidatePageCache(PageKey);

            await Toast.Success($"Innehållet för {CurrentDisplayName()} har sparats framgångsrikt!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av innehåll för {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid sparning av innehållet.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task OnBannerUploaded(PageImageViewModel? img)
    {
        try
        {
            // Invalidera cache så ny bild hämtas direkt
            Cache.InvalidatePageCache(PageKey);

            // Ladda om pageContent så Images uppdateras
            pageContent = await Cms.GetPageContentAsync(PageKey) ?? pageContent;

            await Toast.Success("Bannerbild uppdaterad!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda om pageContent efter bannerbildändring för {PageKey}", PageKey);
            await Toast.Error("Bannerbilden laddades upp men sidan kunde inte uppdateras.");
        }
        StateHasChanged();
    }

    private async Task OnFeatureImageUploaded(FeatureSectionEditor.ImageUploadInfo info)
    {
        if (info.File != null && info.Section != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, PageKey);
                info.Section.ImageUrl = imageUrl;
                info.CloseModal?.Invoke();
                await Toast.Success("Feature-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild för {PageKey}", PageKey);
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task OnFaqImageUploaded(FaqEditor.FaqImageUploadInfo info)
    {
        if (info.File != null && info.Item != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, PageKey);
                info.Item.ImageUrl = imageUrl;
                await Toast.Success("FAQ-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av FAQ-bild för {PageKey}", PageKey);
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task SavePageContent()
    {
        try
        {
            await Cms.SavePageContentAsync(PageKey, pageContent);
            await Toast.Success("Sidans titel har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av sidtitel för {PageKey}", PageKey);
            await Toast.Error("Fel vid sparande av sidtitel");
        }
    }

    private void OnIntroSectionChanged()
    {
        StateHasChanged();
    }

    private async Task SaveIntroSectionFromEditor(IntroSectionViewModel intro)
    {
        await Cms.SaveIntroSectionAsync(PageKey, intro);
        await Toast.Success("Intro-sektion har sparats!");
    }

    private void OnFeatureSectionsChanged() { }
    private void OnFeatureImageDeleted(FeatureSectionEditor.ImageDeleteInfo info) { }
    private void OnFaqSectionsChanged() { }

    private Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
        return Task.CompletedTask;
    }

    private Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ScrollToNavigationSettings()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToNavigationSettings");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunde inte scrolla till navigationsinställningar för {PageKey}", PageKey);
        }
    }

    private async Task OnNavigationNameChanged(string newDisplayName)
    {
        if (string.IsNullOrWhiteSpace(newDisplayName))
            return;

        try
        {
            _navDisplayName = newDisplayName;

            // 1) Uppdatera sidtitel i CMS (driver webbläsarflik + H1 på publika sidor)
            pageContent.Title = newDisplayName;

            // 2) Uppdatera endast breadcrumb i Intro (om intro är aktiv)
            if (sectionConfigItems.Any(s => s.Type == SectionType.Intro))
            {
                introSection.BreadcrumbTitle = newDisplayName.ToUpperInvariant();
            }

            var tasks = new List<Task> { Cms.SavePageContentAsync(PageKey, pageContent) };
            if (sectionConfigItems.Any(s => s.Type == SectionType.Intro))
            {
                tasks.Add(Cms.SaveIntroSectionAsync(PageKey, introSection));
            }

            await Task.WhenAll(tasks);

            // Invalidera cache
            Cache.InvalidatePageCache(PageKey);

            await Toast.Success("Navigationsnamn uppdaterade sidtitel och breadcrumb.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid synk av sidtitel/breadcrumb för {PageKey}", PageKey);
            await Toast.Error("Kunde inte uppdatera sidtitel/breadcrumb.");
        }
    }

    private void OnContactInfoChanged()
    {
        StateHasChanged();
    }

    // Dispose-metod
    public void Dispose()
    {
        try
        {
            _ = JS.InvokeVoidAsync("destroyAllEditors");
            Logger.LogInformation("Disposed MainPageAdmin för {PageKey}", PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Fel vid dispose av MainPageAdmin");
        }
    }

    private async Task SaveFeatureSectionsFromEditor()
    {
        try
        {
            isSaving = true;

            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(50);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte synka editorer innan sparning av featuresektioner för {PageKey}", PageKey);
            }

            await Cms.SaveFeatureSectionsAsync(PageKey, featureSections);
            Cache.InvalidatePageCache(PageKey);
            await Toast.Success("Featuresektioner sparade!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av featuresektioner för {PageKey}", PageKey);
            await Toast.Error("Ett fel inträffade vid sparning av featuresektioner.");
        }
        finally
        {
            isSaving = false;
        }
    }
}