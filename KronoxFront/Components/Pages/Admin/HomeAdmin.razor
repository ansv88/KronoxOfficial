@page "/admin/home"
@using System.Collections.Generic
@using System.Linq
@using System.Text
@using System.Text.Json
@using System.Threading.Tasks
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging;
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject IToastService Toast
@inject IJSRuntime JS
@inject ILogger<HomeAdmin> Logger
@inject HttpClient _http

<HeadContent>
    <meta name="description" content="Redigera startsidan för KronoX. Lägg till, ändra och hantera innehåll, bilder och sektioner." />
</HeadContent>

<PageTitle>@pageContent.Title</PageTitle>

<h1 class="text-center">Redigera startsidan</h1>

<EditForm Model="pageContent" OnValidSubmit="SavePageAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="pageTitle" class="form-label">Sidans titel</label>
        <InputText id="pageTitle"
                   class="form-control"
                   @bind-Value="pageContent.Title"
                   aria-label="Sidans titel" />
        <ValidationMessage For="() => pageContent.Title" />
    </div>

    <!-- Bannerbild-sektion -->
    <BannerImageUploader PageKey="home"
                         OnUploaded="@OnBannerUploaded" />

    <!-- Intro-sektion -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h3 class="h5 mb-0">Intro-sektion</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-2 form-check">
                        <input type="checkbox" class="form-check-input" id="intro-has-image"
                               @bind="introSection.HasImage" aria-label="Inkludera bild i introsektionen" />
                        <label class="form-check-label" for="intro-has-image">Inkludera bild</label>
                    </div>
                    @if (introSection.HasImage)
                    {
                        <label class="form-label">Introbild</label>
                        <div class="border p-3 mb-2 bg-light text-center" style="min-height: 150px;">
                            @if (!string.IsNullOrEmpty(introSection.ImageUrl))
                            {
                                <img src="@introSection.ImageUrl" class="img-fluid img-thumbnail mb-2"
                                     style="max-height: 150px; cursor: pointer" />
                                <div class="mt-2 d-flex justify-content-center">
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearIntroImage" aria-label="Ta bort introbild">
                                        <i class="fa-solid fa-times"></i> Ta bort bild
                                    </button>
                                </div>
                                <div class="mt-2">
                                    <label for="introImageAltText" class="form-label">Bildbeskrivning (alt-text):</label>
                                    <input id="introImageAltText"
                                           type="text"
                                           class="form-control form-control-sm"
                                           @bind="introSection.ImageAltText"
                                           placeholder="Beskriv bilden för tillgänglighet" />
                                </div>
                            }
                            else
                            {
                                <div>
                                    <InputFile OnChange="@HandleIntroImageSelected"
                                               class="form-control"
                                               accept="image/*"
                                               aria-label="Välj introbild" />
                                    <div class="text-muted small mt-2">
                                        Klicka för att välja bild (rekommenderad storlek: 800x600px)
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="col-md-8">
                    <div class="mb-3">
                        <label for="introTitle" class="form-label">Rubrik</label>
                        <input type="text" class="form-control" id="introTitle" @bind="introSection.Title" aria-label="Rubrik för introsektionen" />
                    </div>
                    <div class="mb-3">
                        <label for="introContent" class="form-label">Innehåll</label>
                        <textarea id="introContent"
                                  @bind="introSection.Content"
                                  @bind:event="oninput"
                                  @ref="introEditorRef">
                        </textarea>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Medlemslogotyper -->
    <div class="row">
        <div class="col-md-12 mt-3">
            <MemberLogoManager Logos="memberLogos" OnLogosChanged="@LoadMemberLogos" />
        </div>
    </div>

    <!-- Featuresektioner -->
    <FeatureSectionManager @ref="featureSectionManagerRef"
                           Sections="featureSections"
                           OnSectionsChanged="HandleFeatureSectionsChanged"
                           OnImageUpload="HandleFeatureImageUpload" />

    <!-- Spara-knappar -->
    <div class="mb-4">
        <button type="button" class="btn btn-success me-2" @onclick="SavePageAsync" aria-label="Spara innehåll">
            <i class="fa-solid fa-save me-1"></i> Spara innehåll
        </button>
@*         <button type="button" class="btn btn-info me-2" @onclick="ShowPreview" aria-label="Förhandsgranska startsidan">
            >
            <i class="fa-solid fa-eye me-1"></i> Förhandsgranska
        </button> *@
        <a href="/" class="btn btn-outline-secondary" target="_blank" aria-label="Visa startsidan i ny flik">
            <i class="fa-solid fa-external-link-alt me-1"></i> Visa startsidan
        </a>
    </div>

    <!-- Förhandsgranskningsmodal, ej implementerad -->
    @if (showPreview)
    {
<div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
     role="dialog" aria-modal="true" aria-labelledby="previewModalTitle">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalTitle">Förhandsgranskning</h5>
                <button type="button" class="btn-close" @onclick="ClosePreview" aria-label="Stäng"></button>
            </div>
                    <div class="modal-body bg-light p-0">
                        <!-- Innehållet i förhandsgranskningsmodalfönstret -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePreview">Stäng</button>
                    </div>
                </div>
            </div>
        </div>
    }
</EditForm>

@code {
    private PageContentViewModel pageContent = new();
    private List<MemberLogoViewModel> memberLogos = new();
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private bool showPreview = false;
    private bool isLoading = true;
    private bool shouldInitEditors = false;

    private ElementReference introEditorRef;
    private FeatureSectionManager featureSectionManagerRef;

    private async Task InitializeIntroEditor()
    {
        try
        {
            string editorId = "introContent";
            await Task.Delay(100);

            // Försök initiera
            await JS.InvokeVoidAsync("initTinyMCE", editorId);

            // Verifiera att det lyckades
            try
            {
                bool exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
                if (!exists)
                {
                    Logger.LogWarning("TinyMCE-editor skapades inte vid första försöket, försöker igen");
                    await Task.Delay(200);
                    await JS.InvokeVoidAsync("initTinyMCE", editorId);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte verifiera TinyMCE-status");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editor för intro-sektion");
            await Toast.Error("Kunde inte initiera texteditorn");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("home") ?? new PageContentViewModel();
            memberLogos = await Cms.GetMemberLogosAsync() ?? new List<MemberLogoViewModel>();

            // Hämta intro-sektion direkt från metadatafältet
            introSection = await Cms.GetIntroSectionAsync("home");

            var homeSections = await Cms.GetHomeFeatureSectionsAsync("home");
            featureSections = Cms.ConvertToAdminFeatureSections(homeSections);

            // Om inga sektioner hittades, skapa en tom standardsektion
            if (featureSections.Count == 0)
            {
                featureSections.Add(new FeatureSectionViewModel
                    {
                        Id = 0,
                        PageKey = "home",
                        Title = "",
                        Content = "<p>Lägg till innehåll här</p>",
                        ImageUrl = "",
                        ImageAltText = "",
                        HasImage = false,
                        SortOrder = 0
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av innehåll - standardvärdena används");
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");

            // Tillämpa enkla standardvärden vid fel
            introSection = new IntroSectionViewModel
                {
                    Title = "Välkommen",
                    Content = "<p>Schemaläggning för högre utbildning</p>"
                };
            featureSections = new List<FeatureSectionViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Förstör eventuella existerande editorer först
            await JS.InvokeVoidAsync("destroyAllEditors");
            await Task.Delay(100);

            // Initiera sedan intro-editor och feature-editorer
            await InitializeIntroEditor();

            // Om feature-section-managern är initialiserad kan du även uppdatera dess editorer
            if (featureSectionManagerRef != null)
            {
                await featureSectionManagerRef.RefreshEditors();
            }
        }
    }

    // Extrahera innehåll från metadata
    private async Task LoadContentFromMetadata()
    {
        if (string.IsNullOrEmpty(pageContent.Metadata))
        {
            introSection = new IntroSectionViewModel
                {
                    Title = "Välkommen",
                    Content = "<p>Ange innehåll för startsidan här</p>"
                };
            featureSections = new List<FeatureSectionViewModel>();
            return;
        }

        try
        {
            var metadata = JsonDocument.Parse(pageContent.Metadata);
            var root = metadata.RootElement;

            if (root.TryGetProperty("introSection", out var introElement))
            {
                introSection = new IntroSectionViewModel
                    {
                        Title = introElement.TryGetProperty("title", out var titleElement)
                                ? titleElement.GetString() ?? ""
                                : "",
                        Content = introElement.TryGetProperty("content", out var contentElement)
                                ? contentElement.GetString() ?? ""
                                : ""
                    };
            }

            if (root.TryGetProperty("features", out var featuresElement))
            {
                featureSections = new List<FeatureSectionViewModel>();
                int index = 0;

                foreach (var feature in featuresElement.EnumerateArray())
                {
                    string imageUrl = "";
                    if (feature.TryGetProperty("imageUrl", out var imageUrlProp))
                    {
                        imageUrl = imageUrlProp.GetString() ?? "";

                        if (!string.IsNullOrEmpty(imageUrl) && !imageUrl.StartsWith("/"))
                        {
                            imageUrl = "/" + imageUrl;
                        }
                    }

                    featureSections.Add(new FeatureSectionViewModel
                        {
                            Id = 0,
                            PageKey = "home",
                            Title = feature.TryGetProperty("title", out var titleProp)
                                        ? titleProp.GetString() ?? ""
                                        : "",
                            Content = feature.TryGetProperty("content", out var contentProp)
                                        ? contentProp.GetString() ?? ""
                                        : "",
                            ImageUrl = imageUrl,
                            ImageAltText = feature.TryGetProperty("imageAltText", out var imageAltTextProp)
                                        ? imageAltTextProp.GetString() ?? ""
                                        : "",
                            HasImage = feature.TryGetProperty("hasImage", out var hasImageProp)
                                        ? hasImageProp.GetBoolean()
                                        : !string.IsNullOrEmpty(imageUrl),
                            SortOrder = index
                        });
                    index++;
                }
            }

            // Om inga sektioner hittades, skapa en tom standardsektion
            if (featureSections == null || !featureSections.Any())
            {
                featureSections = new List<FeatureSectionViewModel>
{
    new FeatureSectionViewModel
    {
        Id = 0,
        PageKey = "home",
        Title = "",
        Content = "<p>Lägg till innehåll här</p>",
        HasImage = false,
        SortOrder = 0
    }
};
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid tolkning av metadata");
            throw;
        }
    }

    private async Task OnBannerUploaded(PageImageViewModel img)
    {
        var existingBanner = pageContent.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
        if (existingBanner != null)
        {
            pageContent.Images.Remove(existingBanner);
        }

        if (img != null)
        {
            pageContent.Images.Add(img);
            await Toast.Success("Bannerbild uppladdad");
        }
    }

    private async Task HandleIntroImageSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            if (e.File.Size > 2 * 1024 * 1024)
            {
                await Toast.Error("Bilden är för stor. Maximal storlek är 2MB.");
                return;
            }

            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp", "image/svg+xml" };
            if (!allowedTypes.Contains(e.File.ContentType))
            {
                await Toast.Error("Endast JPG, PNG, GIF, WebP och SVG-bilder tillåts.");
                return;
            }

            await Toast.Info("Laddar upp bild...");

            try
            {
                // Starta uppladdning med mindre buffer för att undvika minnesproblem
                using var stream = e.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
                using var ms = new MemoryStream();

                // Kopiera i mindre segment för att förhindra minnesproblem
                await stream.CopyToAsync(ms, 81920); // 80KB segments
                ms.Position = 0;

                // Ladda upp filen
                var uploadedImage = await Cms.UploadFeatureImageAsync("home", ms, e.File.Name, "intro:0");

                if (uploadedImage != null)
                {
                    if (!uploadedImage.Url.StartsWith("/"))
                    {
                        uploadedImage.Url = "/" + uploadedImage.Url;
                    }

                    introSection.ImageUrl = uploadedImage.Url;
                    introSection.HasImage = true;
                    introSection.ImageAltText = uploadedImage.AltText ?? introSection.Title;

                    StateHasChanged();
                    await Toast.Success("Introbild uppladdad");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av introbild");
                await Toast.Error($"Ett fel inträffade vid uppladdning av bilden: {ex.Message}");
            }
        }
    }

    private void ClearIntroImage()
    {
        introSection.ImageUrl = "";
        introSection.ImageAltText = "";
    }

    private async Task OnLogoUploaded(MemberLogoViewModel logo)
    {
        memberLogos.Add(logo);
        await Toast.Success("Logotyp uppladdad");
    }

    private async Task LoadMemberLogos()
    {
        memberLogos = await Cms.GetMemberLogosAsync();
    }

    private async Task HandleFeatureImageUpload(FeatureSectionManager.ImageUploadInfo info)
    {
        try
        {
            if (info.File.Size > 2 * 1024 * 1024)
            {
                await Toast.Error("Bilden är för stor. Maximal storlek är 2MB.");
                return;
            }

            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp", "image/svg+xml" };
            if (!allowedTypes.Contains(info.File.ContentType))
            {
                await Toast.Error("Endast JPG, PNG, GIF, WebP och SVG-bilder tillåts.");
                return;
            }

            info.CloseModal?.Invoke();
            await Toast.Info("Laddar upp bild...");

            try
            {
                // Starta uppladdning med mindre buffer för att undvika minnesproblem
                using var stream = info.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
                using var ms = new MemoryStream();

                // Kopiera i mindre segment för att förhindra minnesproblem
                await stream.CopyToAsync(ms, 81920); // 80KB segments
                ms.Position = 0;

                // Ladda upp filen till den angivna sektionen
                var uploadedImage = await Cms.UploadFeatureImageAsync("home", ms, info.File.Name, $"feature:{info.SectionIndex}");

                if (uploadedImage != null)
                {
                    if (!uploadedImage.Url.StartsWith("/"))
                    {
                        uploadedImage.Url = "/" + uploadedImage.Url;
                    }

                    info.Section.ImageUrl = uploadedImage.Url;
                    info.Section.HasImage = true;
                    info.Section.ImageAltText = uploadedImage.AltText ?? "";

                    StateHasChanged();
                    await Toast.Success($"Bild uppladdad för sektion {info.SectionIndex + 1}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild");
                await Toast.Error($"Ett fel inträffade vid uppladdning av bilden: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid validering av feature-bild");
            try
            {
                await Toast.Error($"Ett fel inträffade: {ex.Message}");
            }
            catch { }
        }
    }

    private void HandleFeatureSectionsChanged()
    {
        StateHasChanged();
    }

    private async Task SavePageAsync()
    {
        try
        {
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer: {Message}", ex.Message);
            }

            if (introSection.HasImage && !string.IsNullOrEmpty(introSection.ImageUrl) && !introSection.ImageUrl.StartsWith("/"))
            {
                introSection.ImageUrl = "/" + introSection.ImageUrl;
            }

            foreach (var section in featureSections.Where(s => s.HasImage))
            {
                if (!string.IsNullOrEmpty(section.ImageUrl) && !section.ImageUrl.StartsWith("/"))
                {
                    section.ImageUrl = "/" + section.ImageUrl;
                }
            }

            var metadataObj = new
            {
                introSection = new
                {
                    title = introSection.Title,
                    content = introSection.Content,
                    imageUrl = introSection.ImageUrl,
                    imageAltText = introSection.ImageAltText,
                    hasImage = introSection.HasImage
                },
                features = featureSections.Select(f => new
                {
                    title = f.Title,
                    content = f.Content,
                    imageUrl = f.ImageUrl,
                    imageAltText = f.ImageAltText,
                    hasImage = f.HasImage
                }).ToArray()
            };

            pageContent.Metadata = JsonSerializer.Serialize(metadataObj);

            var sb = new StringBuilder();
            sb.Append(introSection.Content);

            foreach (var section in featureSections)
            {
                sb.Append("<div class='feature-section'>");

                if (!string.IsNullOrEmpty(section.Title))
                {
                    sb.Append($"<h3 class='text-center mb-4 fw-bold'>{section.Title}</h3>");
                }

                sb.Append($"<div class='text-center'>{section.Content}</div>");
                sb.Append("</div>");

                if (section != featureSections.Last())
                {
                    sb.Append("<div class='divider'></div>");
                }
            }

            pageContent.HtmlContent = sb.ToString();
            await Cms.SavePageContentAsync("home", pageContent);

            await Toast.Success("Innehåll sparat!");
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "HTTP-fel vid sparande");
            await Toast.Error("Kunde inte spara - kontrollera att du är inloggad och har behörighet, eller kontrollera serverloggarna.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Oväntat fel vid sparande");
            await Toast.Error("Ett oväntat fel inträffade vid sparande av innehållet.");
        }
    }

    private async Task ShowPreview()
    {
        showPreview = true;
        StateHasChanged();
        await Task.Delay(100);
        await JS.InvokeVoidAsync("initPreviewForHomeAdmin");
    }

    private void ClosePreview()
    {
        showPreview = false;
    }
}