@using KronoxFront.Components.Layout
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Authorization
@page "/admin/page/{PageKey}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ILogger<PageAdmin> Logger

<div class="alert alert-warning mb-4" role="alert">
    Detta är en tillfällig adminsida. Ett nytt admingränssnitt är på väg!
</div>

<h2>Redigera sidan: @pageContent.Title</h2>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Laddar...</span>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="pageTitle" class="form-label">Sidans titel</label>
                <input type="text" class="form-control" id="pageTitle" @bind="pageContent.Title" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Senast uppdaterad</label>
                <input type="text" class="form-control" value="@pageContent.LastModified.ToString("g")" readonly />
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="tinymce-editor" class="form-label">Innehåll</label>
        <textarea id="tinymce-editor"
                  @bind="pageContent.HtmlContent"
                  @bind:event="oninput"
                  @ref="editorTextArea">
        </textarea>
    </div>

    <div class="mb-4">
        <button class="btn btn-primary me-2" @onclick="SaveContent">
            <i class="fa-solid fa-save me-1"></i> Spara
        </button>
        <a href="/@PageKey.ToLower()" class="btn btn-outline-secondary" target="_blank">
            <i class="fa-solid fa-external-link-alt me-1"></i> Visa sidan
        </a>
    </div>

    <hr />

    <h3>Bilder</h3>
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Alternativ text för bilden" @bind="imageAltText" />
                <InputFile OnChange="UploadImage" class="form-control" accept="image/*" />
                <button class="btn btn-primary" @onclick="() => UploadImageAction()">
                    <i class="fa-solid fa-upload me-1"></i> Ladda upp
                </button>
            </div>
        </div>
    </div>

    @if (!pageContent.Images.Any())
    {
        <div class="alert alert-info">
            Inga bilder har laddats upp för denna sida ännu.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-4 g-4">
            @foreach (var image in pageContent.Images)
            {
                <div class="col">
                    <div class="card h-100">
                        <img src="@image.Url" class="card-img-top" alt="@image.AltText" style="object-fit: cover; height: 150px;" />
                        <div class="card-body">
                            <p class="card-text text-truncate mb-0">@image.AltText</p>
                            <small class="text-muted">@Path.GetFileName(image.Url)</small>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => CopyToClipboard(image.Url)">
                                    <i class="fa-solid fa-copy"></i> Kopiera URL
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteImage(image.Id)">
                                    <i class="fa-solid fa-trash"></i> Ta bort
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public string PageKey { get; set; } = default!;

    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private string imageAltText = "";
    private IBrowserFile? selectedFile;

    private ElementReference editorTextArea;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialisera TinyMCE när komponenten är renderad
            await InitializeTinyMCE();
        }
    }

    private async Task InitializeTinyMCE()
    {
        // Lite fördröjning för att säkerställa att DOM är uppdaterad
        await Task.Delay(100);

        // Anropa initieringsfunktionen från tinymce-config.js
        await JS.InvokeVoidAsync("initTinyMCE", "tinymce-editor");
    }

    // Uppdatera SaveContent-metoden för att synka editor innehåll
    private async Task SaveContent()
    {
        try
        {
            // Synkronisera TinyMCE-innehåll till modellen innan sparande
            await JS.InvokeVoidAsync("syncAllEditors");

            await Cms.SavePageContentAsync(PageKey, pageContent);
            await JS.InvokeVoidAsync("alert", "Innehållet har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av innehåll");
            await JS.InvokeVoidAsync("alert", $"Fel vid sparande: {ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPageContent();

        await JS.InvokeVoidAsync("destroyAllEditors");
        await Task.Delay(50);
        await InitializeTinyMCE();
    }

    private async Task LoadPageContent()
    {
        loading = true;
        var content = await Cms.GetPageContentAsync(PageKey);

        if (content != null)
        {
            pageContent = content;
        }
        else
        {
            pageContent = new PageContentViewModel
                {
                    PageKey = PageKey,
                    Title = PageKey.ToUpper()[0] + PageKey[1..].ToLowerInvariant(),
                    HtmlContent = "<p>Lägg till innehåll här...</p>",
                    LastModified = DateTime.Now
                };
        }

        loading = false;
    }

    private Task UploadImage(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        return Task.CompletedTask;
    }

    private async Task UploadImageAction()
    {
        if (selectedFile == null) return;

        try
        {
            using var stream = selectedFile.OpenReadStream(5_000_000);
            var altText = string.IsNullOrEmpty(imageAltText) ? selectedFile.Name : imageAltText;

            var image = await Cms.UploadPageImageAsync(PageKey, stream, selectedFile.Name, altText);

            if (image != null)
            {
                pageContent.Images.Add(image);
                imageAltText = "";
                selectedFile = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Fel vid uppladdning: {ex.Message}");
        }
    }

    private async Task DeleteImage(int imageId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort bilden?");

        if (confirmed)
        {
            try
            {
                await Cms.DeletePageImageAsync(PageKey, imageId);
                pageContent.Images.RemoveAll(i => i.Id == imageId);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Fel vid borttagning: {ex.Message}");
            }
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        await JS.InvokeVoidAsync("alert", "URL kopierad till urklipp!");
    }
}