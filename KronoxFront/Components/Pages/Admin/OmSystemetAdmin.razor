@page "/admin/omsystemet"
@using KronoxFront.ViewModels
@using KronoxFront.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject IToastService Toast
@inject IJSRuntime JS
@inject ILogger<OmSystemetAdmin> Logger

<PageTitle>Admin - Om systemet</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Redigera sidan "Om systemet"</h1>
                <div>
                    <a href="/omsystemet" class="btn btn-outline-secondary me-2">
                        <i class="fa-solid fa-eye me-1"></i> Förhandsgranska
                    </a>
                    <button type="button" class="btn btn-success" @onclick="SaveContent" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        else
                        {
                            <i class="fa-solid fa-save me-1"></i>
                        }
                        Spara ändringar
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else
            {
                @* ---------- Sidans titel ------------------------------------ *@
                <EditForm Model="pageContent" OnValidSubmit="SavePageContent">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Sidans titel</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="pageTitle" class="form-label">Titel</label>
                                <InputText id="pageTitle"
                                           class="form-control"
                                           @bind-Value="pageContent.Title"
                                           placeholder="T.ex. Om systemet" />
                                <ValidationMessage For="() => pageContent.Title" />
                                <div class="form-text">Denna titel visas i webbläsarens flik och som sidhuvud</div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- Banner Image Upload ------------------------------------ *@
                <BannerImageUploader PageKey="omsystemet"
                                     OnUploaded="OnBannerImageChanged" />

                @* ---------- Intro Section ------------------------------------------- *@
                <EditForm Model="introSection" OnValidSubmit="SaveIntroSection">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Intro-sektion</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Breadcrumb-titel (visas ovanför introt)</label>
                                <InputText class="form-control" 
                                           @bind-Value="introSection.BreadcrumbTitle" 
                                           placeholder="T.ex. VARFÖR VÄLJA KRONOX?" />
                                <ValidationMessage For="() => introSection.BreadcrumbTitle" />
                                <div class="form-text">Lämna tomt för att dölja breadcrumb-titeln</div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-2 form-check">
                                        <InputCheckbox class="form-check-input" 
                                                       id="intro-has-image" 
                                                       @bind-Value="introSection.HasImage" />
                                        <label class="form-check-label" for="intro-has-image">Inkludera bild</label>
                                    </div>

                                    @if (introSection.HasImage)
                                    {
                                        <div class="border p-3 mb-2 bg-light text-center" style="min-height: 200px;">
                                            @if (!string.IsNullOrEmpty(introSection.ImageUrl))
                                            {
                                                <img src="@introSection.ImageUrl" class="img-fluid img-thumbnail mb-2" style="max-height: 200px;" />
                                                <div class="mt-2">
                                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearIntroImage">
                                                        <i class="fa-solid fa-times"></i> Ta bort bild
                                                    </button>
                                                </div>
                                                <div class="mt-2">
                                                    <label class="form-label">Bildbeskrivning:</label>
                                                    <InputText class="form-control form-control-sm" 
                                                               @bind-Value="introSection.ImageAltText" 
                                                               placeholder="Beskriv bilden" />
                                                    <ValidationMessage For="() => introSection.ImageAltText" />
                                                </div>
                                            }
                                            else
                                            {
                                                <InputFile OnChange="HandleIntroImageSelected" class="form-control" accept="image/*" />
                                                <div class="text-muted small mt-2">Klicka för att välja bild</div>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <label class="form-label">Rubrik</label>
                                        <InputText class="form-control" @bind-Value="introSection.Title" />
                                        <ValidationMessage For="() => introSection.Title" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Innehåll</label>
                                        <InputTextArea id="intro-editor" 
                                                       @bind-Value="introSection.Content" 
                                                       class="form-control tinymce-editor"
                                                       rows="8" />
                                        <ValidationMessage For="() => introSection.Content" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- Navigation Buttons Manager --------------------------- *@
                <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                          NavigationButtons="introSection.NavigationButtons"
                                          ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                          NavigationButtonsChanged="OnNavigationButtonsChanged" />

                @* ---------- Feature Sections Manager -------------------------------- *@
                <FeatureSectionManager @ref="featureSectionManagerRef"
                                       Sections="featureSections"
                                       OnSectionsChanged="OnFeatureSectionsChanged"
                                       OnImageUpload="OnFeatureImageUploaded"
                                       OnImageDelete="OnFeatureImageDeleted" />

                @* ---------- FAQ Manager -------------------------------------------- *@
                <FaqManager FaqSections="faqSections"
                            IncludeFaq="includeFaq"
                            OnFaqSectionsChanged="OnFaqSectionsChanged"
                            OnIncludeFaqChanged="OnIncludeFaqChanged"
                            OnFaqImageUpload="OnFaqImageUploaded" />
            }
        </div>
    </div>
</div>

@code {
    private PageContentViewModel pageContent = new();
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();
    private bool includeFaq = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private FeatureSectionManager? featureSectionManagerRef;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            pageContent = await Cms.GetPageContentAsync("omsystemet") ?? new PageContentViewModel
            {
                PageKey = "omsystemet",
                Title = "Om systemet",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            introSection = await Cms.GetIntroSectionAsync("omsystemet");
            featureSections = await Cms.GetFeatureSectionsAsync("omsystemet");
            faqSections = await Cms.GetFaqSectionsAsync("omsystemet");
            includeFaq = faqSections.Any();

            if (featureSections.Count == 0)
            {
                featureSections.Add(new FeatureSectionViewModel
                {
                    Id = 0,
                    PageKey = "omsystemet",
                    Title = "Användarvänlig flexibilitet",
                    Content = "<p>KronoX erbjuder användarna en enkel och intuitiv plattform för schemaläggning...</p>",
                    ImageUrl = "",
                    ImageAltText = "",
                    HasImage = true,
                    SortOrder = 0
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av innehåll för Om systemet admin");
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);

            try
            {
                await JS.InvokeVoidAsync("initTinyMCE", "intro-editor");
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte initiera intro-editor");
            }

            if (featureSectionManagerRef != null)
            {
                try
                {
                    await featureSectionManagerRef.RefreshEditors();
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Kunde inte initiera feature-editorer");
                }
            }
        }
    }

    private async Task SavePageContent()
    {
        try
        {
            await Cms.SavePageContentAsync("omsystemet", pageContent);
            await Toast.Success("Sidans titel har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av sidtitel");
            await Toast.Error("Fel vid sparande av sidtitel");
        }
    }

    private async Task SaveIntroSection()
    {
        try
        {
            await Cms.SaveIntroSectionAsync("omsystemet", introSection);
            await Toast.Success("Intro-sektion har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av intro-sektion");
            await Toast.Error("Fel vid sparande av intro-sektion");
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            await Cms.SavePageContentAsync("omsystemet", pageContent);
            await Cms.SaveIntroSectionAsync("omsystemet", introSection);
            await Cms.SaveFeatureSectionsAsync("omsystemet", featureSections);

            if (includeFaq)
            {
                await Cms.SaveFaqSectionsAsync("omsystemet", faqSections);
            }
            else
            {
                await Cms.DeleteFaqSectionsAsync("omsystemet");
            }

            await Toast.Success("Innehållet har sparats framgångsrikt!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av innehåll för Om systemet");
            await Toast.Error("Ett fel inträffade vid sparning av innehållet.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void OnFeatureSectionsChanged() { }
    private void OnFaqSectionsChanged() { }
    private void OnIncludeFaqChanged(bool value) => includeFaq = value;

    private async Task OnBannerImageChanged(PageImageViewModel? image)
    {
        if (image != null)
        {
            var existingImage = pageContent.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
            if (existingImage != null)
            {
                pageContent.Images.Remove(existingImage);
            }
            pageContent.Images.Add(image);
            await Toast.Success("Banner-bild uppdaterad!");
        }
        else
        {
            var existingImage = pageContent.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
            if (existingImage != null)
            {
                pageContent.Images.Remove(existingImage);
                await Toast.Success("Banner-bild borttagen!");
            }
        }
    }

    private async Task HandleIntroImageSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(e.File, "omsystemet");
                introSection.ImageUrl = imageUrl;
                await Toast.Success("Intro-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av intro-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void ClearIntroImage()
    {
        introSection.ImageUrl = "";
        introSection.ImageAltText = "";
    }

    private async Task OnFeatureImageUploaded(FeatureSectionManager.ImageUploadInfo info)
    {
        if (info.File != null && info.Section != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "omsystemet");
                info.Section.ImageUrl = imageUrl;
                info.CloseModal?.Invoke();
                await Toast.Success("Feature-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void OnFeatureImageDeleted(FeatureSectionManager.ImageDeleteInfo info)
    {
        // Bildhantering för feature-sektioner
    }

    private async Task OnFaqImageUploaded(FaqManager.FaqImageUploadInfo info)
    {
        if (info.File != null && info.Item != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "omsystemet");
                info.Item.ImageUrl = imageUrl;
                await Toast.Success("FAQ-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av FAQ-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
    }

    private async Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
    }
}