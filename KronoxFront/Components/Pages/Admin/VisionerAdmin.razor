@page "/admin/visioner"
@using Microsoft.AspNetCore.Authorization
@using KronoxFront.Components.Layout
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject IJSRuntime JS
@inject ILogger<VisionerAdmin> Logger
@inject IToastService Toast

<PageTitle>Admin - Visioner & Verksamhetsidé</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Redigera Visioner & Verksamhetsidé-sidan</h1>
                <div>
                    <a href="/visioner" class="btn btn-outline-secondary me-2">
                        <i class="fa-solid fa-eye me-1"></i> Förhandsgranska
                    </a>
                    <button type="button" class="btn btn-success" @onclick="SaveAll" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        else
                        {
                            <i class="fa-solid fa-save me-1"></i>
                        }
                        Spara ändringar
                    </button>
                </div>
            </div>

            @if (loading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else
            {
                @* ---------- Sidans titel ------------------------------------ *@
                <EditForm Model="pageContent" OnValidSubmit="SavePageContent">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Sidans titel</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="pageTitle" class="form-label">Titel</label>
                                <InputText id="pageTitle"
                                           class="form-control"
                                           @bind-Value="pageContent.Title"
                                           placeholder="T.ex. Visioner & Verksamhetsidé" />
                                <ValidationMessage For="() => pageContent.Title" />
                                <div class="form-text">Denna titel visas i webbläsarens flik och som sidhuvud</div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- Banner Image Upload ------------------------------------ *@
                <BannerImageUploader PageKey="visioner"
                                     OnUploaded="OnBannerUploaded" />

                @* ---------- Intro Section ------------------------------------------- *@
                <EditForm Model="introSection" OnValidSubmit="SaveIntroSection">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Intro-sektion</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Breadcrumb-titel (visas ovanför introt)</label>
                                <InputText class="form-control" 
                                           @bind-Value="introSection.BreadcrumbTitle" 
                                           placeholder="T.ex. VISIONER & VERKSAMHETSIDÉ" />
                                <ValidationMessage For="() => introSection.BreadcrumbTitle" />
                                <div class="form-text">Lämna tomt för att dölja breadcrumb-titeln</div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-2 form-check">
                                        <InputCheckbox class="form-check-input" 
                                                       id="intro-has-image"
                                                       @bind-Value="introSection.HasImage" />
                                        <label class="form-check-label" for="intro-has-image">Inkludera bild</label>
                                    </div>
                                    @if (introSection.HasImage)
                                    {
                                        <div class="border p-3 mb-2 bg-light text-center" style="min-height: 150px;">
                                            @if (!string.IsNullOrEmpty(introSection.ImageUrl))
                                            {
                                                <img src="@introSection.ImageUrl" class="img-fluid img-thumbnail mb-2"
                                                     style="max-height: 150px; cursor: pointer" />
                                                <div class="mt-2 d-flex justify-content-center">
                                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearIntroImage">
                                                        <i class="fa-solid fa-times"></i> Ta bort bild
                                                    </button>
                                                </div>
                                                <div class="mt-2">
                                                    <label class="form-label">Bildbeskrivning:</label>
                                                    <InputText class="form-control form-control-sm"
                                                               @bind-Value="introSection.ImageAltText"
                                                               placeholder="Beskriv bilden för tillgänglighet" />
                                                    <ValidationMessage For="() => introSection.ImageAltText" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div>
                                                    <InputFile OnChange="HandleIntroImageSelected"
                                                               class="form-control"
                                                               accept="image/*" />
                                                    <div class="text-muted small mt-2">
                                                        Klicka för att välja bild (rekommenderad storlek: 800x600px)
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <label class="form-label">Rubrik</label>
                                        <InputText class="form-control" @bind-Value="introSection.Title" />
                                        <ValidationMessage For="() => introSection.Title" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Innehåll</label>
                                        <InputTextArea id="introContent"
                                                       @bind-Value="introSection.Content"
                                                       class="form-control tinymce-editor"
                                                       rows="8" />
                                        <ValidationMessage For="() => introSection.Content" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- Navigation Buttons Manager --------------------------- *@
                <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                          NavigationButtons="introSection.NavigationButtons"
                                          ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                          NavigationButtonsChanged="OnNavigationButtonsChanged" />

                @* ---------- Feature Sections Manager -------------------------------- *@
                <FeatureSectionManager Sections="featureSections"
                                       OnSectionsChanged="OnFeatureSectionsChanged"
                                       OnImageUpload="HandleFeatureImageUpload"
                                       OnImageDelete="HandleFeatureImageDelete" />

                <div class="row">
                    <div class="col-md-12 mt-3">
                        <div class="alert alert-info">
                            <i class="fa-solid fa-info-circle me-2"></i>
                            Medlemslogotyper hanteras centralt via startsidans administration.
                            <a href="/admin/home" class="alert-link">Gå till startsidan</a> för att hantera medlemslogotyper.
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isSaving = false;
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private ElementReference introEditorRef;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        try
        {
            pageContent = await Cms.GetPageContentAsync("visioner") ?? new PageContentViewModel
            {
                PageKey = "visioner",
                Title = "Visioner & Verksamhetsidé",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            introSection = await Cms.GetIntroSectionAsync("visioner");
            featureSections = await Cms.GetFeatureSectionsAsync("visioner", includePrivate: true);

            if (!featureSections.Any())
            {
                featureSections.Add(new FeatureSectionViewModel
                {
                    Title = "Ny sektion",
                    Content = "<p>Skriv innehåll här...</p>",
                    HasImage = false,
                    HasPrivateContent = false,
                    PrivateContent = "",
                    ContactPersons = new List<ContactPersonViewModel>()
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av Visioner & Verksamhetsidé admin-data");
            await Toast.Error($"Fel vid laddning: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("destroyAllEditors");
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte förstöra befintliga editorer");
            }
            
            await Task.Delay(500);
            await InitializeIntroEditor();
        }
    }

    private async Task InitializeIntroEditor()
    {
        try
        {
            string editorId = "introContent";
            await Task.Delay(100);

            await JS.InvokeVoidAsync("initTinyMCE", editorId);

            try
            {
                bool exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
                if (!exists)
                {
                    Logger.LogWarning("TinyMCE-editor skapades inte vid första försöket, försöker igen");
                    await Task.Delay(200);
                    await JS.InvokeVoidAsync("initTinyMCE", editorId);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte verifiera TinyMCE-status");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editor för intro-sektion");
        }
    }

    private async Task OnBannerUploaded(PageImageViewModel? img)
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("visioner") ?? new PageContentViewModel();
            Logger.LogInformation("PageContent omladdad efter bannerbildändring");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda om pageContent efter bannerbildändring");
            await Toast.Error("Bannerbilden laddades upp men sidan kunde inte uppdateras. Uppdatera sidan manuellt.");
        }

        StateHasChanged();
    }

    private async Task HandleIntroImageSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            if (e.File.Size > 2 * 1024 * 1024)
            {
                await Toast.Error("Bilden är för stor. Maximal storlek är 2MB.");
                return;
            }

            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp", "image/svg+xml" };
            if (!allowedTypes.Contains(e.File.ContentType))
            {
                await Toast.Error("Endast JPG, PNG, GIF, WebP och SVG-bilder tillåts.");
                return;
            }

            await Toast.Info("Laddar upp bild...");

            try
            {
                using var stream = e.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms, 81920);
                ms.Position = 0;

                var uploadedImage = await Cms.UploadFeatureImageAsync("visioner", ms, e.File.Name, "intro:0");

                if (uploadedImage != null)
                {
                    if (!uploadedImage.Url.StartsWith("/"))
                    {
                        uploadedImage.Url = "/" + uploadedImage.Url;
                    }

                    introSection.ImageUrl = uploadedImage.Url;
                    introSection.HasImage = true;
                    introSection.ImageAltText = uploadedImage.AltText ?? introSection.Title;

                    StateHasChanged();
                    await Toast.Success("Introbild uppladdad");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av introbild");
                await Toast.Error($"Ett fel inträffade vid uppladdning av bilden: {ex.Message}");
            }
        }
    }

    private void ClearIntroImage()
    {
        introSection.ImageUrl = "";
        introSection.ImageAltText = "";
    }

    private void OnFeatureSectionsChanged()
    {
        StateHasChanged();
    }

    private async Task HandleFeatureImageUpload(FeatureSectionManager.ImageUploadInfo info)
    {
        if (info.File == null || info.Section == null) return;

        try
        {
            using var stream = info.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms, 81920);
            ms.Position = 0;

            var uploadedImage = await Cms.UploadFeatureImageAsync("visioner", ms, info.File.Name, $"feature:{info.SectionIndex}");

            if (uploadedImage != null)
            {
                if (!uploadedImage.Url.StartsWith("/"))
                {
                    uploadedImage.Url = "/" + uploadedImage.Url;
                }

                info.Section.ImageUrl = uploadedImage.Url;
                info.Section.ImageAltText = uploadedImage.AltText ?? info.Section.Title;

                StateHasChanged();
                await Toast.Success($"Bild uppladdad för sektion {info.SectionIndex + 1}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppladdning av sektionsbild");
            await Toast.Error($"Ett fel inträffade vid uppladdning av bilden: {ex.Message}");
        }
        finally
        {
            info.CloseModal?.Invoke();
        }
    }

    private async Task HandleFeatureImageDelete(FeatureSectionManager.ImageDeleteInfo info)
    {
        try
        {
            Logger.LogInformation("Bild {ImageUrl} markerad för borttagning från sektion {SectionIndex}", info.ImageUrl, info.SectionIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid borttagning av sektionsbild");
            await Toast.Error("Ett fel inträffade när bilden skulle tas bort");
        }
    }

    private async Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
    }

    private async Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
    }

    private async Task SavePageContent()
    {
        try
        {
            await Cms.SavePageContentAsync("visioner", pageContent);
            await Toast.Success("Sidans titel har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av sidtitel");
            await Toast.Error("Fel vid sparande av sidtitel");
        }
    }

    private async Task SaveIntroSection()
    {
        try
        {
            await Cms.SaveIntroSectionAsync("visioner", introSection);
            await Toast.Success("Intro-sektion har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av intro-sektion");
            await Toast.Error("Fel vid sparande av intro-sektion");
        }
    }

    private async Task SaveAll()
    {
        isSaving = true;
        try
        {
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer: {Message}", ex.Message);
            }

            await Cms.SavePageContentAsync("visioner", pageContent);
            await Cms.SaveIntroSectionAsync("visioner", introSection);
            await Cms.SaveFeatureSectionsAsync("visioner", featureSections);
            
            await Toast.Success("Alla ändringar har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av Visioner & Verksamhetsidé-data");
            await Toast.Error($"Fel vid sparande: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
}