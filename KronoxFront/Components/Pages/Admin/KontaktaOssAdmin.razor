@page "/admin/kontaktaoss"
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging;
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CmsService Cms
@inject IToastService Toast
@inject IJSRuntime JS
@inject ILogger<KontaktaOssAdmin> Logger

<HeadContent>
    <meta name="description" content="Redigera sidan 'Kontakta oss' för KronoX. Hantera innehåll, kontaktformulär och sektioner." />
</HeadContent>

<PageTitle>Admin - Kontakta oss</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Redigera sidan "Kontakta oss"</h1>
                <div class="d-flex flex-column align-items-end">
                    <div class="d-flex gap-2 mb-2 align-items-center">

                        <PageStatusText PageKey="kontaktaoss" />
                        
                        <a href="/kontaktaoss" class="btn btn-outline-secondary" title="Visar sparade ändringar">
                            <i class="fa-solid fa-eye me-1"></i>
                            Visa sparad sida
                        </a>
                        <button type="button" class="btn btn-success" @onclick="SaveContent" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1"></i>
                            }
                            Spara allt innehåll
                        </button>
                        
                        <button type="button" class="btn btn-outline-secondary" @onclick="ScrollToNavigationSettings" title="Gå till navigationsinställningar">
                            <i class="fa-solid fa-cog"></i>
                        </button>
                    </div>
                    <small class="text-muted">
                        <i class="fa-solid fa-info-circle me-1"></i>
                        För att se dina ändringar, spara först och klicka sedan på "Visa sparad sida"
                    </small>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else
            {
                @* ---------- Section Configuration Manager ----------- *@
                <PageSectionConfigurator PageKey="kontaktaoss"
                                         AvailableSections="sectionConfigItems"
                                         OnConfigurationChanged="OnSectionConfigurationChanged"
                                         OnSave="SaveSectionConfiguration" />

                @* ---------- Navigeringsinställningar ----------- *@
                <NavigationSettings PageKey="kontaktaoss"
                                    InitialDisplayName="@pageContent.Title"
                                    OnDisplayNameChanged="OnNavigationNameChanged" />

                @* ---------- Sidans titel ------------------------------------ *@
                <EditForm Model="pageContent" OnValidSubmit="SavePageContent">
                    <DataAnnotationsValidator />
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h3 class="h5 mb-0">Sidans titel</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="pageTitle" class="form-label">Titel</label>
                                <InputText id="pageTitle"
                                           class="form-control"
                                           @bind-Value="pageContent.Title"
                                           placeholder="T.ex. KronoX - Kontakta oss" />
                                <ValidationMessage For="() => pageContent.Title" />
                                <div class="form-text">Denna titel visas i webbläsarens flik och som sidhuvud</div>
                            </div>
                        </div>
                    </div>
                </EditForm>

                @* ---------- DYNAMISKA SEKTIONER BASERAT PÅ KONFIGURATION --------- *@
                @* ---------- DYNAMISKA SEKTIONER BASERAT PÅ KONFIGURATION --------- *@
                @foreach (var sectionConfig in sectionConfigItems.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
                {
                    @switch (sectionConfig.Type)
                    {
                        case SectionType.Banner:
                            <BannerImageUploader PageKey="kontaktaoss" OnUploaded="OnBannerUploaded" />
                            break;

                        case SectionType.Intro:
                            <EditForm Model="introSection" OnValidSubmit="SaveIntroSection">
                                <DataAnnotationsValidator />
                                <div class="card mb-4">
                                    <div class="card-header bg-light">
                                        <h3 class="h5 mb-0">Intro-sektion</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Breadcrumb-titel (visas ovanför introt)</label>
                                            <InputText class="form-control"
                                                       @bind-Value="introSection.BreadcrumbTitle"
                                                       placeholder="T.ex. KONTAKTA OSS" />
                                            <ValidationMessage For="() => introSection.BreadcrumbTitle" />
                                            <div class="form-text">Lämna tomt för att dölja breadcrumb-titeln</div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="mb-2 form-check">
                                                    <InputCheckbox class="form-check-input"
                                                                   id="intro-has-image"
                                                                   @bind-Value="introSection.HasImage" />
                                                    <label class="form-check-label" for="intro-has-image">Inkludera bild</label>
                                                </div>

                                                @if (introSection.HasImage)
                                                {
                                                    <div class="border p-3 mb-2 bg-light text-center" style="min-height: 200px;">
                                                        @if (!string.IsNullOrEmpty(introSection.ImageUrl))
                                                        {
                                                            <img src="@introSection.ImageUrl" class="img-fluid img-thumbnail mb-2" style="max-height: 200px;" />
                                                            <div class="mt-2">
                                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearIntroImage">
                                                                    <i class="fa-solid fa-times"></i> Ta bort bild
                                                                </button>
                                                            </div>
                                                            <div class="mt-2">
                                                                <label class="form-label">Bildbeskrivning:</label>
                                                                <InputText class="form-control form-control-sm"
                                                                           @bind-Value="introSection.ImageAltText"
                                                                           placeholder="Beskriv bilden" />
                                                                <ValidationMessage For="() => introSection.ImageAltText" />
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <InputFile OnChange="HandleIntroImageSelected" class="form-control" accept="image/*" />
                                                            <div class="text-muted small mt-2">Klicka för att välja bild</div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-8">
                                                <div class="mb-3">
                                                    <label class="form-label">Rubrik</label>
                                                    <InputText class="form-control" @bind-Value="introSection.Title" />
                                                    <ValidationMessage For="() => introSection.Title" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Innehåll</label>
                                                    <InputTextArea id="intro-editor"
                                                                   @bind-Value="introSection.Content"
                                                                   class="form-control tinymce-editor"
                                                                   rows="8" />
                                                    <ValidationMessage For="() => introSection.Content" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                            break;

                        case SectionType.NavigationButtons:
                            <NavigationButtonManager ShowNavigationButtons="introSection.ShowNavigationButtons"
                                                     NavigationButtons="introSection.NavigationButtons"
                                                     ShowNavigationButtonsChanged="OnShowNavigationButtonsChanged"
                                                     NavigationButtonsChanged="OnNavigationButtonsChanged" />
                            break;

                        case SectionType.FeatureSections:
                            <FeatureSectionManager @ref="featureSectionManagerRef"
                                                   Sections="featureSections"
                                                   OnSectionsChanged="OnFeatureSectionsChanged"
                                                   OnImageUpload="OnFeatureImageUploaded"
                                                   OnImageDelete="OnFeatureImageDeleted" />
                            break;

                        case SectionType.FaqSections:
                            <FaqManager @ref="faqManagerRef"
                                        FaqSections="faqSections"
                                        OnFaqSectionsChanged="OnFaqSectionsChanged"
                                        OnFaqImageUpload="OnFaqImageUploaded" />
                            break;

                        case SectionType.ContactForm:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-envelope me-2"></i>
                                        Kontaktformulär
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Kontaktformuläret är aktiverat och kommer att visas på sidan.
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <h5 class="h6 mb-3">Formulärinställningar</h5>
                                            <p class="text-muted mb-3">
                                                Kontaktformuläret skickar meddelanden till den e-postadress som är konfigurerad i systemet.
                                                Meddelanden innehåller automatiskt avsändarens kontaktinformation.
                                            </p>

                                            <div class="bg-light p-3 rounded">
                                                <small class="text-muted">
                                                    <strong>Nuvarande konfiguration:</strong><br />
                                                    Support-email kommer från appsettings.json<br />
                                                    SMTP-inställningar konfigureras separat
                                                </small>
                                            </div>
                                        </div>

                                        <div class="col-md-6">
                                            <h5 class="h6 mb-3">Kontaktuppgifter på sidan</h5>
                                            <p class="text-muted mb-3">
                                                Kontaktuppgifterna som visas i högerspalten hanteras dynamiskt via databasen.
                                                Du kan redigera postadress och kontaktpersoner nedan.
                                            </p>

                                            <div class="bg-light p-3 rounded">
                                                <small class="text-muted">
                                                    <strong>Kan redigeras:</strong><br />
                                                    • Postadress och organisationsnamn<br />
                                                    • Kontaktpersoner med titlar<br />
                                                    • E-post och telefonnummer<br />
                                                    • Sorteringsordning
                                                </small>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mt-3">
                                        <a href="/kontaktaoss" class="btn btn-outline-primary me-2" target="_blank">
                                            <i class="fa-solid fa-external-link-alt me-1"></i>
                                            Testa formuläret
                                        </a>
                                        <button type="button" class="btn btn-outline-secondary" @onclick="ShowContactFormInfo">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Teknisk information
                                        </button>
                                    </div>

                                    @* ============== KONTAKTINFORMATION HANTERING ============== *@
                                    <hr class="my-4" />

                                    <!-- Postadress -->
                                    <div class="mb-4">
                                        <h5 class="h6 mb-3">
                                            <i class="fa-solid fa-map-marker-alt me-2"></i>
                                            Postadress
                                        </h5>
                                        <EditForm Model="contactInfo.PostalAddress" OnValidSubmit="SavePostalAddress">
                                            <DataAnnotationsValidator />
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label">Organisationsnamn</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.OrganizationName"
                                                                   placeholder="T.ex. KronoX" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.OrganizationName" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Adressrad 1</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.AddressLine1"
                                                                   placeholder="T.ex. Högskolan i Borås" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.AddressLine1" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Adressrad 2 (valfri)</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.AddressLine2"
                                                                   placeholder="T.ex. C/O eller avdelning" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.AddressLine2" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label">Postnummer</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.PostalCode"
                                                                   placeholder="T.ex. 501 90" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.PostalCode" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Ort</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.City"
                                                                   placeholder="T.ex. Borås" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.City" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Land (valfri)</label>
                                                        <InputText class="form-control"
                                                                   @bind-Value="contactInfo.PostalAddress.Country"
                                                                   placeholder="T.ex. Sverige" />
                                                        <ValidationMessage For="() => contactInfo.PostalAddress.Country" />
                                                    </div>
                                                </div>
                                            </div>
                                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                                <i class="fa-solid fa-save me-1"></i>
                                                Spara postadress
                                            </button>
                                        </EditForm>
                                    </div>

                                    <!-- Kontaktpersoner -->
                                    <div class="mb-4">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h5 class="h6 mb-0">
                                                <i class="fa-solid fa-users me-2"></i>
                                                Kontaktpersoner (@contactInfo.ContactPersons.Count)
                                            </h5>
                                            <button type="button" class="btn btn-success btn-sm" @onclick="AddNewContactPerson">
                                                <i class="fa-solid fa-plus me-1"></i>
                                                Lägg till person
                                            </button>
                                        </div>

                                        @if (contactInfo.ContactPersons.Any())
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Namn</th>
                                                            <th>Titel</th>
                                                            <th>E-post</th>
                                                            <th>Telefon</th>
                                                            <th>Ordning</th>
                                                            <th>Status</th>
                                                            <th>Åtgärder</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var person in contactInfo.ContactPersons.OrderBy(p => p.SortOrder))
                                                        {
                                                            <tr class="@(person.IsActive ? "" : "table-secondary")">
                                                                <td>
                                                                    <strong>@person.Name</strong>
                                                                </td>
                                                                <td>@person.Title</td>
                                                                <td>
                                                                    <small class="text-muted">@person.Email</small>
                                                                </td>
                                                                <td>
                                                                    <small class="text-muted">@person.Phone</small>
                                                                </td>
                                                                <td>
                                                                    <span class="badge bg-secondary">@person.SortOrder</span>
                                                                </td>
                                                                <td>
                                                                    <span class="badge @(person.IsActive ? "bg-success" : "bg-secondary")">
                                                                        @(person.IsActive ? "Aktiv" : "Inaktiv")
                                                                    </span>
                                                                </td>
                                                                <td>
                                                                    <div class="btn-group btn-group-sm">
                                                                        <button type="button" class="btn btn-outline-primary"
                                                                                @onclick="() => EditContactPerson(person)">
                                                                            <i class="fa-solid fa-edit"></i>
                                                                        </button>
                                                                        <button type="button" class="btn btn-outline-warning"
                                                                                @onclick="() => ToggleContactPersonActive(person.Id)">
                                                                            <i class="fa-solid @(person.IsActive ? "fa-eye-slash" : "fa-eye")"></i>
                                                                        </button>
                                                                        <button type="button" class="btn btn-outline-danger"
                                                                                @onclick="() => DeleteContactPerson(person.Id)">
                                                                            <i class="fa-solid fa-trash"></i>
                                                                        </button>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info">
                                                <i class="fa-solid fa-info-circle me-2"></i>
                                                Inga kontaktpersoner har lagts till än. Klicka på "Lägg till person" för att börja.
                                            </div>
                                        }
                                    </div>

                                    <!-- E-postlistor (Medlemsinformation) -->
                                    <div class="mb-4">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h5 class="h6 mb-0">
                                                <i class="fa-solid fa-envelope me-2"></i>
                                                E-postlistor - Medlemsinformation (@contactInfo.EmailLists.Count)
                                            </h5>
                                            <button type="button" class="btn btn-success btn-sm" @onclick="AddNewEmailList">
                                                <i class="fa-solid fa-plus me-1"></i>
                                                Lägg till e-postlista
                                            </button>
                                        </div>

                                        <div class="alert alert-info mb-3">
                                            <i class="fa-solid fa-info-circle me-2"></i>
                                            <small>Dessa e-postlistor visas endast för inloggade medlemmar på kontaktsidan.</small>
                                        </div>

                                        @if (contactInfo.EmailLists.Any())
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Namn</th>
                                                            <th>Beskrivning</th>
                                                            <th>E-postadress</th>
                                                            <th>Ordning</th>
                                                            <th>Status</th>
                                                            <th>Åtgärder</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var emailList in contactInfo.EmailLists.OrderBy(el => el.SortOrder))
                                                        {
                                                            <tr class="@(emailList.IsActive ? "" : "table-secondary")">
                                                                <td>
                                                                    <strong>@emailList.Name</strong>
                                                                </td>
                                                                <td>
                                                                    <small class="text-muted">@emailList.Description</small>
                                                                </td>
                                                                <td>
                                                                    <small class="text-muted">@emailList.EmailAddress</small>
                                                                </td>
                                                                <td>
                                                                    <span class="badge bg-secondary">@emailList.SortOrder</span>
                                                                </td>
                                                                <td>
                                                                    <span class="badge @(emailList.IsActive ? "bg-success" : "bg-secondary")">
                                                                        @(emailList.IsActive ? "Aktiv" : "Inaktiv")
                                                                    </span>
                                                                </td>
                                                                <td>
                                                                    <div class="btn-group btn-group-sm">
                                                                        <button type="button" class="btn btn-outline-primary"
                                                                                @onclick="() => EditEmailList(emailList)">
                                                                            <i class="fa-solid fa-edit"></i>
                                                                        </button>
                                                                        <button type="button" class="btn btn-outline-warning"
                                                                                @onclick="() => ToggleEmailListActive(emailList.Id)">
                                                                            <i class="fa-solid @(emailList.IsActive ? "fa-eye-slash" : "fa-eye")"></i>
                                                                        </button>
                                                                        <button type="button" class="btn btn-outline-danger"
                                                                                @onclick="() => DeleteEmailList(emailList.Id)">
                                                                            <i class="fa-solid fa-trash"></i>
                                                                        </button>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info">
                                                <i class="fa-solid fa-info-circle me-2"></i>
                                                Inga e-postlistor har lagts till än. Klicka på "Lägg till e-postlista" för att börja.
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            break;

                        case SectionType.MemberLogos:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">Medlemslogotyper</h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Medlemslogotyper visas automatiskt på denna sida när sektionen är aktiverad.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Sektionen "Våra medlemmar" kommer att visas på kontaktsidan med alla aktiva medlemslogotyper.
                                        För att hantera vilka logotyper som ska visas, deras ordning och beskrivningar, använd hanteringssidan nedan.
                                    </p>
                                    <div class="d-flex gap-2">
                                        <a href="/admin/memberlogos" class="btn btn-primary">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Hantera medlemslogotyper
                                        </a>
                                    </div>
                                </div>
                            </div>
                            break;

                        case SectionType.NewsSection:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-newspaper me-2"></i>Nyhetssektion
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Nyhetssektionen visas automatiskt på denna sida när den är aktiverad.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Sektionen kommer att visa de senaste nyheterna från systemet på kontaktsidan.
                                    </p>
                                    <div class="d-flex gap-2">
                                        <a href="/admin/news" class="btn btn-primary">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Hantera nyheter
                                        </a>
                                    </div>
                                </div>
                            </div>
                            break;

                        case SectionType.DocumentSection:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-file-alt me-2"></i>Dokumentsektion
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Dokumentsektionen visar en länk till dokumentsidan.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Dokumentsektionen visar dokument eller länkar relaterade till denna sida.
                                    </p>
                                    <div class="d-flex gap-2">
                                        <a href="/admin/documents/manage" class="btn btn-primary">
                                            <i class="fa-solid fa-cog me-1"></i>
                                            Hantera dokument
                                        </a>
                                    </div>
                                </div>
                            </div>
                            break;

                        case SectionType.ActionPlanTable:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-tasks me-2"></i>Handlingsplantabell
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Handlingsplantabellen visas automatiskt på denna sida när den är aktiverad.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Handlingsplantabellen visar aktuella utvecklingsprojekt och deras status.
                                    </p>
                                </div>
                            </div>
                            break;

                        case SectionType.DevelopmentSuggestionForm:
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h3 class="h5 mb-0">
                                        <i class="fa-solid fa-lightbulb me-2"></i>Utvecklingsförslagformulär
                                    </h3>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info mb-3">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Status:</strong> Utvecklingsförslagformuläret visas automatiskt när det är aktiverat.
                                    </div>
                                    <p class="text-muted mb-3">
                                        Formuläret låter användare skicka in utvecklingsförslag för systemet.
                                    </p>
                                </div>
                            </div>
                            break;
                    }
                }
            }
        </div>
    </div>
</div>

<!-- Modal för redigering av kontaktperson -->
@if (showContactPersonModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(isEditingContactPerson ? "Redigera kontaktperson" : "Lägg till kontaktperson")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseContactPersonModal"></button>
                </div>
                <EditForm Model="currentContactPerson" OnValidSubmit="SaveContactPerson">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Namn *</label>
                            <InputText class="form-control" @bind-Value="currentContactPerson.Name" />
                            <ValidationMessage For="() => currentContactPerson.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Titel *</label>
                            <InputText class="form-control" @bind-Value="currentContactPerson.Title" 
                                       placeholder="T.ex. Konsortiechef, Systemutvecklare" />
                            <ValidationMessage For="() => currentContactPerson.Title" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">E-post *</label>
                            <InputText class="form-control" type="email" @bind-Value="currentContactPerson.Email" />
                            <ValidationMessage For="() => currentContactPerson.Email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Telefon</label>
                            <InputText class="form-control" @bind-Value="currentContactPerson.Phone" 
                                       placeholder="T.ex. 033 – 435 43 64" />
                            <ValidationMessage For="() => currentContactPerson.Phone" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Sorteringsordning</label>
                            <InputNumber class="form-control" @bind-Value="currentContactPerson.SortOrder" />
                            <ValidationMessage For="() => currentContactPerson.SortOrder" />
                            <div class="form-text">Lägre nummer visas först</div>
                        </div>
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="currentContactPerson.IsActive" />
                            <label class="form-check-label">Aktiv (visas på sidan)</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseContactPersonModal">Avbryt</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            <i class="fa-solid fa-save me-1"></i>
                            @(isEditingContactPerson ? "Uppdatera" : "Lägg till")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Modal för redigering av e-postlista -->
@if (showEmailListModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(isEditingEmailList ? "Redigera e-postlista" : "Lägg till e-postlista")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseEmailListModal"></button>
                </div>
                <EditForm Model="currentEmailList" OnValidSubmit="SaveEmailList">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Namn *</label>
                            <InputText class="form-control" @bind-Value="currentEmailList.Name" 
                                       placeholder="T.ex. Styrelsen" />
                            <ValidationMessage For="() => currentEmailList.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Beskrivning *</label>
                            <InputText class="form-control" @bind-Value="currentEmailList.Description" 
                                       placeholder="T.ex. Kontakta styrelsen direkt" />
                            <ValidationMessage For="() => currentEmailList.Description" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">E-postadress *</label>
                            <InputText class="form-control" type="email" @bind-Value="currentEmailList.EmailAddress" 
                                       placeholder="T.ex. styrelsen@kronox.se" />
                            <ValidationMessage For="() => currentEmailList.EmailAddress" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Sorteringsordning</label>
                            <InputNumber class="form-control" @bind-Value="currentEmailList.SortOrder" />
                            <ValidationMessage For="() => currentEmailList.SortOrder" />
                            <div class="form-text">Lägre nummer visas först</div>
                        </div>
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="currentEmailList.IsActive" />
                            <label class="form-check-label">Aktiv (visas på sidan)</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEmailListModal">Avbryt</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            <i class="fa-solid fa-save me-1"></i>
                            @(isEditingEmailList ? "Uppdatera" : "Lägg till")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Info-modal för kontaktformulär -->
@if (showContactFormInfoModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);"
         role="dialog" aria-modal="true" aria-labelledby="contactFormInfoTitle">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="contactFormInfoTitle">
                        <i class="fa-solid fa-cog me-2"></i>
                        Teknisk information - Kontaktformulär
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseContactFormInfo" aria-label="Stäng"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>E-postkonfiguration</h6>
                            <ul class="list-unstyled">
                                <li><strong>API Controller:</strong> ContactController.cs</li>
                                <li><strong>E-postservice:</strong> MailKitEmailService.cs</li>
                                <li><strong>Konfiguration:</strong> appsettings.json</li>
                            </ul>
                            
                            <h6 class="mt-3">SMTP-inställningar</h6>
                            <ul class="list-unstyled">
                                <li><strong>Utveckling:</strong> smtp4dev (localhost:2525)</li>
                                <li><strong>Produktion:</strong> Konfigurera i appsettings</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Formulärvalidering</h6>
                            <ul class="list-unstyled">
                                <li><strong>Frontend:</strong> ContactFormViewModel.cs</li>
                                <li><strong>Backend:</strong> ContactFormDto.cs</li>
                                <li><strong>Validation:</strong> DataAnnotations</li>
                            </ul>
                            
                            <h6 class="mt-3">Säkerhet</h6>
                            <ul class="list-unstyled">
                                <li><strong>CSRF:</strong> Automatisk i Blazor</li>
                                <li><strong>Rate limiting:</strong> Kan konfigureras</li>
                                <li><strong>Validering:</strong> På både klient och server</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="alert alert-warning mt-3">
                        <i class="fa-solid fa-exclamation-triangle me-2"></i>
                        <strong>Utvecklingsläge:</strong> E-post fångas av smtp4dev istället för att skickas riktigt.
                        Kontrollera smtp4dev på http://localhost:3000 för att se testmeddelanden.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseContactFormInfo">
                        Stäng
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PageContentViewModel pageContent = new();
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();
    private List<SectionConfigItem> sectionConfigItems = new();
    private ContactPageInfoViewModel contactInfo = new();
    
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showContactFormInfoModal = false;
    private bool showContactPersonModal = false;
    private bool isEditingContactPerson = false;
    private ContactPagePersonViewModel currentContactPerson = new();
    private FeatureSectionManager? featureSectionManagerRef;
    private FaqManager? faqManagerRef;
    private bool showEmailListModal = false;
    private bool isEditingEmailList = false;
    private EmailListViewModel currentEmailList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("kontaktaoss") ?? new PageContentViewModel
            {
                PageKey = "kontaktaoss",
                Title = "Kontakta oss",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };
            
            // Ladda alla sektionsdata
            introSection = await Cms.GetIntroSectionAsync("kontaktaoss");
            featureSections = await Cms.GetFeatureSectionsAsync("kontaktaoss");
            faqSections = await Cms.GetFaqSectionsAsync("kontaktaoss");
            contactInfo = await Cms.GetContactInfoAsync();
            
            // Ladda sektionskonfiguration
            sectionConfigItems = await Cms.GetPageSectionConfigAsync("kontaktaoss");

            // Säkerställ standardkonfiguration om ingen finns
            await EnsureDefaultConfiguration();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av kontaktsida");
            await Toast.Error("Ett fel inträffade vid laddning av innehållet.");
            await SetFallbackContent();
        }
        finally
        {
            isLoading = false;
        }
    }

    private Task EnsureDefaultConfiguration()
    {
        // Se till att ALLA sektioner i konfigurationen finns, inte bara de aktiverade
        var allSectionTypes = Enum.GetValues<SectionType>();
        
        // Om inte fullständig konfiguration finns, skapa den
        if (sectionConfigItems.Count != allSectionTypes.Length)
        {
            var existingConfig = sectionConfigItems.ToDictionary(s => s.Type, s => s);
            sectionConfigItems.Clear();
            
            foreach (SectionType sectionType in allSectionTypes)
            {
                if (existingConfig.TryGetValue(sectionType, out var existingItem))
                {
                    // Behåll befintlig konfiguration
                    sectionConfigItems.Add(existingItem);
                }
                else
                {
                    // Lägg till ny sektion med standardinställningar
                    sectionConfigItems.Add(new SectionConfigItem
                    {
                        Type = sectionType,
                        IsEnabled = GetDefaultEnabledStateForContactPage(sectionType),
                        SortOrder = (int)sectionType
                    });
                }
            }
        }

        // Säkerställ standardinnehåll för intro om det saknas
        if (string.IsNullOrEmpty(introSection.Title))
        {
            introSection = new IntroSectionViewModel
            {
                BreadcrumbTitle = "KONTAKTA OSS",
                Title = "Kontakt",
                Content = "<p>Kontakta oss för mer information. Supportfrågor för KronoX-systemet hanteras av vårt lärosätes KronoX-administratör.</p><p>Formuläret ska ej användas för lärosätesspecifika frågor, som t ex glömt lösenord eller problem vid anmälan till tentamen (i dessa fall bör ni ta kontakt med aktuellt lärosäte).</p>",
                HasImage = false,
                ImageUrl = "",
                ImageAltText = "",
                ShowNavigationButtons = false,
                NavigationButtons = new List<NavigationButtonViewModel>()
            };
        }

        // Säkerställ att vi har feature-sektioner om de är aktiverade
        if (sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled) && 
            featureSections.Count == 0)
        {
            featureSections.Add(new FeatureSectionViewModel
            {
                Id = 0,
                PageKey = "kontaktaoss",
                Title = "Kontaktinformation",
                Content = "<p>Lägg till innehåll här...</p>",
                ImageUrl = "",
                ImageAltText = "",
                HasImage = false,
                SortOrder = 0
            });
        }

        // Säkerställ att vi har FAQ-sektioner om de är aktiverade
        if (sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled) && 
            faqSections.Count == 0)
        {
            faqSections.Add(new FaqSectionViewModel
            {
                Id = 0,
                PageKey = "kontaktaoss",
                Title = "Vanliga frågor om kontakt",
                Description = "Här hittar du svar på vanliga frågor om att kontakta oss",
                SortOrder = 0,
                FaqItems = new List<FaqItemViewModel>
                {
                    new FaqItemViewModel
                    {
                        Question = "Hur kontaktar jag support?",
                        Answer = "<p>Du kan kontakta support genom formuläret ovan eller via e-post.</p>",
                        SortOrder = 0
                    }
                }
            });
        }
        
        return Task.CompletedTask;
    }

    // Hjälpmetod
    private bool GetDefaultEnabledStateForContactPage(SectionType sectionType)
    {
        return sectionType switch
        {
            SectionType.Banner => true,
            SectionType.Intro => true,
            SectionType.NavigationButtons => false,
            SectionType.FeatureSections => false,
            SectionType.FaqSections => false,
            SectionType.DocumentSection => false,
            SectionType.ContactForm => true,
            SectionType.MemberLogos => true,
            _ => false
        };
    }

    private async Task SetFallbackContent()
    {
        pageContent = new PageContentViewModel
        {
            PageKey = "kontaktaoss",
            Title = "Kontakta oss",
            HtmlContent = "",
            LastModified = DateTime.Now,
            Images = new List<PageImageViewModel>()
        };

        introSection = new IntroSectionViewModel
        {
            BreadcrumbTitle = "KONTAKTA OSS",
            Title = "Kontakt",
            Content = "<p>Kontakta oss för mer information om KronoX-systemet.</p>"
        };
        
        featureSections = new List<FeatureSectionViewModel>();
        faqSections = new List<FaqSectionViewModel>();
        contactInfo = new ContactPageInfoViewModel();
        sectionConfigItems = await Cms.GetPageSectionConfigAsync("kontaktaoss");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await InitializeEditors();
        }
    }

    private async Task InitializeEditors()
    {
        try
        {
            // Global rensning endast en gång
            await JS.InvokeVoidAsync("destroyAllEditors");
            await Task.Delay(300);

            StateHasChanged();
            await Task.Delay(200);

            // Initiera varje komponents editorer separat
            var initializationTasks = new List<Task>();

            // Intro-editor
            if (sectionConfigItems.Any(s => s.Type == SectionType.Intro && s.IsEnabled))
            {
                initializationTasks.Add(InitializeIntroEditor());
            }

            // Feature-editorer
            if (featureSectionManagerRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FeatureSections && s.IsEnabled))
            {
                initializationTasks.Add(featureSectionManagerRef.InitializeEditorsOnly());
            }

            // FAQ-editorer
            if (faqManagerRef != null &&
                sectionConfigItems.Any(s => s.Type == SectionType.FaqSections && s.IsEnabled))
            {
                initializationTasks.Add(faqManagerRef.InitializeEditorsOnly());
            }

            // Vänta på att alla editorer initialiseras parallellt
            await Task.WhenAll(initializationTasks);

            Logger.LogInformation("Kontaktsida editorer initialiserade");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initiering av editorer på kontaktsida");
        }
    }

    private async Task InitializeIntroEditor()
    {
        try
        {
            var elementExists = await JS.InvokeAsync<bool>("elementExists", "intro-editor");
            if (elementExists)
            {
                await JS.InvokeVoidAsync("initTinyMCE", "intro-editor");
                Logger.LogInformation("Kontaktsida intro-editor initialiserad");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid intro-editor initialisering på kontaktsida");
        }
    }

    // Synkronisera intro-editor med Blazor ViewModel
    private async Task SyncIntroEditor()
    {
        try
        {
            var editorExists = await JS.InvokeAsync<bool>("tinymceExists", "intro-editor");
            if (editorExists)
            {
                var content = await JS.InvokeAsync<string>("eval", 
                    "tinymce.get('intro-editor') ? tinymce.get('intro-editor').getContent() : ''");
                
                if (!string.IsNullOrEmpty(content))
                {
                    introSection.Content = content;
                    Logger.LogInformation("Intro-editor synkroniserad: {ContentLength} tecken", content.Length);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunde inte synkronisera intro-editor");
        }
    }

    private async Task OnSectionConfigurationChanged()
    {
        await EnsureDefaultConfiguration();
        StateHasChanged();
        
        await Task.Delay(200);
        await InitializeEditors();
    }

    private async Task SaveSectionConfiguration(List<SectionConfigItem> configItems)
    {
        try
        {
            var success = await Cms.SavePageSectionConfigAsync("kontaktaoss", configItems);
            if (success)
            {
                sectionConfigItems = configItems;
                await Toast.Success("Sektionskonfiguration sparad!");
                await OnSectionConfigurationChanged();
            }
            else
            {
                await Toast.Error("Fel vid sparning av sektionskonfiguration");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av sektionskonfiguration för kontaktsida");
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            // Explicit synkronisering av intro-editor INNAN allmän syncAllEditors
            await SyncIntroEditor();

            // Synkronisera alla editorer
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Kunde inte synkronisera TinyMCE-editorer: {Message}", ex.Message);
            }

            var activeSections = sectionConfigItems.Where(s => s.IsEnabled).ToList();

            // Spara sidtitel och innehåll
            await Cms.SavePageContentAsync("kontaktaoss", pageContent);

            // Spara intro-sektion om aktiverad
            if (activeSections.Any(s => s.Type == SectionType.Intro))
            {
                await Cms.SaveIntroSectionAsync("kontaktaoss", introSection);
            }

            // Spara feature-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FeatureSections))
            {
                await Cms.SaveFeatureSectionsAsync("kontaktaoss", featureSections);
            }

            // Spara FAQ-sektioner om aktiverade
            if (activeSections.Any(s => s.Type == SectionType.FaqSections))
            {
                await Cms.SaveFaqSectionsAsync("kontaktaoss", faqSections);
            }
            else
            {
                // Ta bort FAQ-sektioner om de är inaktiverade
                await Cms.DeleteFaqSectionsAsync("kontaktaoss");
            }

            await Toast.Success("Kontaktsidans innehåll har sparats framgångsrikt!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av innehåll för kontaktsidan");
            await Toast.Error("Ett fel inträffade vid sparning av innehållet.");
        }
        finally
        {
            isSaving = false;
        }
    }

    // ----------------- KONTAKTINFORMATION METODER -----------------

    private async Task SavePostalAddress()
    {
        isSaving = true;
        try
        {
            var success = await Cms.SavePostalAddressAsync(contactInfo.PostalAddress);
            if (success)
            {
                await Toast.Success("Postadress sparad!");
            }
            else
            {
                await Toast.Error("Fel vid sparning av postadress");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av postadress");
            await Toast.Error("Ett oväntat fel inträffade");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void AddNewContactPerson()
    {
        currentContactPerson = new ContactPagePersonViewModel
        {
            SortOrder = contactInfo.ContactPersons.Any() ? contactInfo.ContactPersons.Max(p => p.SortOrder) + 10 : 10,
            IsActive = true
        };
        isEditingContactPerson = false;
        showContactPersonModal = true;
    }

    private void EditContactPerson(ContactPagePersonViewModel person)
    {
        currentContactPerson = new ContactPagePersonViewModel
        {
            Id = person.Id,
            Name = person.Name,
            Title = person.Title,
            Email = person.Email,
            Phone = person.Phone,
            SortOrder = person.SortOrder,
            IsActive = person.IsActive
        };
        isEditingContactPerson = true;
        showContactPersonModal = true;
    }

    private async Task SaveContactPerson()
    {
        isSaving = true;
        try
        {
            if (isEditingContactPerson)
            {
                var success = await Cms.UpdateContactPersonAsync(currentContactPerson);
                if (success)
                {
                    // Uppdatera den lokala listan
                    var existingPerson = contactInfo.ContactPersons.FirstOrDefault(p => p.Id == currentContactPerson.Id);
                    if (existingPerson != null)
                    {
                        existingPerson.Name = currentContactPerson.Name;
                        existingPerson.Title = currentContactPerson.Title;
                        existingPerson.Email = currentContactPerson.Email;
                        existingPerson.Phone = currentContactPerson.Phone;
                        existingPerson.SortOrder = currentContactPerson.SortOrder;
                        existingPerson.IsActive = currentContactPerson.IsActive;
                    }
                    await Toast.Success("Kontaktperson uppdaterad!");
                    CloseContactPersonModal();
                }
                else
                {
                    await Toast.Error("Fel vid uppdatering av kontaktperson");
                }
            }
            else
            {
                var newPerson = await Cms.CreateContactPersonAsync(currentContactPerson);
                if (newPerson != null)
                {
                    contactInfo.ContactPersons.Add(newPerson);
                    await Toast.Success("Kontaktperson tillagd!");
                    CloseContactPersonModal();
                }
                else
                {
                    await Toast.Error("Fel vid skapande av kontaktperson");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av kontaktperson");
            await Toast.Error("Ett oväntat fel inträffade");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ToggleContactPersonActive(int personId)
    {
        try
        {
            var success = await Cms.ToggleContactPersonActiveAsync(personId);
            if (success)
            {
                var person = contactInfo.ContactPersons.FirstOrDefault(p => p.Id == personId);
                if (person != null)
                {
                    person.IsActive = !person.IsActive;
                    await Toast.Success($"Kontaktperson {(person.IsActive ? "aktiverad" : "inaktiverad")}!");
                }
            }
            else
            {
                await Toast.Error("Fel vid ändring av aktivstatus");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid ändring av aktivstatus för kontaktperson");
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private async Task DeleteContactPerson(int personId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort denna kontaktperson?"))
        {
            try
            {
                var success = await Cms.DeleteContactPersonAsync(personId);
                if (success)
                {
                    contactInfo.ContactPersons.RemoveAll(p => p.Id == personId);
                    await Toast.Success("Kontaktperson borttagen!");
                }
                else
                {
                    await Toast.Error("Fel vid borttagning av kontaktperson");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid borttagning av kontaktperson");
                await Toast.Error("Ett oväntat fel inträffade");
            }
        }
    }

    private void CloseContactPersonModal()
    {
        showContactPersonModal = false;
        currentContactPerson = new();
    }

    // ----------------- E-POSTLISTA METODER -----------------

    private void AddNewEmailList()
    {
        currentEmailList = new EmailListViewModel
        {
            SortOrder = contactInfo.EmailLists.Any() ? contactInfo.EmailLists.Max(el => el.SortOrder) + 10 : 10,
            IsActive = true
        };
        isEditingEmailList = false;
        showEmailListModal = true;
    }

    private void EditEmailList(EmailListViewModel emailList)
    {
        currentEmailList = new EmailListViewModel
        {
            Id = emailList.Id,
            Name = emailList.Name,
            Description = emailList.Description,
            EmailAddress = emailList.EmailAddress,
            SortOrder = emailList.SortOrder,
            IsActive = emailList.IsActive
        };
        isEditingEmailList = true;
        showEmailListModal = true;
    }

    private async Task SaveEmailList()
    {
        isSaving = true;
        try
        {
            if (isEditingEmailList)
            {
                var success = await Cms.UpdateEmailListAsync(currentEmailList);
                if (success)
                {
                    var existingEmailList = contactInfo.EmailLists.FirstOrDefault(el => el.Id == currentEmailList.Id);
                    if (existingEmailList != null)
                    {
                        existingEmailList.Name = currentEmailList.Name;
                        existingEmailList.Description = currentEmailList.Description;
                        existingEmailList.EmailAddress = currentEmailList.EmailAddress;
                        existingEmailList.SortOrder = currentEmailList.SortOrder;
                        existingEmailList.IsActive = currentEmailList.IsActive;
                    }
                    await Toast.Success("E-postlista uppdaterad!");
                    CloseEmailListModal();
                }
                else
                {
                    await Toast.Error("Fel vid uppdatering av e-postlista");
                }
            }
            else
            {
                var newEmailList = await Cms.CreateEmailListAsync(currentEmailList);
                if (newEmailList != null)
                {
                    contactInfo.EmailLists.Add(newEmailList);
                    await Toast.Success("E-postlista tillagd!");
                    CloseEmailListModal();
                }
                else
                {
                    await Toast.Error("Fel vid skapande av e-postlista");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av e-postlista");
            await Toast.Error("Ett oväntat fel inträffade");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ToggleEmailListActive(int emailListId)
    {
        try
        {
            var success = await Cms.ToggleEmailListActiveAsync(emailListId);
            if (success)
            {
                var emailList = contactInfo.EmailLists.FirstOrDefault(el => el.Id == emailListId);
                if (emailList != null)
                {
                    emailList.IsActive = !emailList.IsActive;
                    await Toast.Success($"E-postlista {(emailList.IsActive ? "aktiverad" : "inaktiverad")}!");
                }
            }
            else
            {
                await Toast.Error("Fel vid ändring av aktivstatus");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid ändring av aktivstatus för e-postlista");
            await Toast.Error("Ett oväntat fel inträffade");
        }
    }

    private async Task DeleteEmailList(int emailListId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort denna e-postlista?"))
        {
            try
            {
                var success = await Cms.DeleteEmailListAsync(emailListId);
                if (success)
                {
                    contactInfo.EmailLists.RemoveAll(el => el.Id == emailListId);
                    await Toast.Success("E-postlista borttagen!");
                }
                else
                {
                    await Toast.Error("Fel vid borttagning av e-postlista");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid borttagning av e-postlista");
                await Toast.Error("Ett oväntat fel inträffade");
            }
        }
    }

    private void CloseEmailListModal()
    {
        showEmailListModal = false;
        currentEmailList = new();
    }

    // ----------------- ÖVRIGA EVENT HANDLERS -----------------

    private async Task OnBannerUploaded(PageImageViewModel? img)
    {
        try
        {
            pageContent = await Cms.GetPageContentAsync("kontaktaoss") ?? pageContent;
            await Toast.Success("Bannerbild uppdaterad!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda om pageContent efter bannerbildändring");
            await Toast.Error("Bannerbilden laddades upp men sidan kunde inte uppdateras.");
        }
        StateHasChanged();
    }

    private async Task HandleIntroImageSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(e.File, "kontaktaoss");
                introSection.ImageUrl = imageUrl;
                introSection.HasImage = true;
                await Toast.Success("Introbild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av introbild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private void ClearIntroImage()
    {
        introSection.ImageUrl = "";
        introSection.ImageAltText = "";
    }

    private async Task OnFeatureImageUploaded(FeatureSectionManager.ImageUploadInfo info)
    {
        if (info.File != null && info.Section != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "kontaktaoss");
                info.Section.ImageUrl = imageUrl;
                info.CloseModal?.Invoke();
                await Toast.Success("Feature-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av feature-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task OnFaqImageUploaded(FaqManager.FaqImageUploadInfo info)
    {
        if (info.File != null && info.Item != null)
        {
            try
            {
                var imageUrl = await Cms.UploadImageAsync(info.File, "kontaktaoss");
                info.Item.ImageUrl = imageUrl;
                await Toast.Success("FAQ-bild uppladdad!");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid uppladdning av FAQ-bild");
                await Toast.Error("Fel vid uppladdning av bild");
            }
        }
    }

    private async Task SavePageContent()
    {
        try
        {
            await Cms.SavePageContentAsync("kontaktaoss", pageContent);
            await Toast.Success("Sidans titel har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av sidtitel");
            await Toast.Error("Fel vid sparande av sidtitel");
        }
    }

    private async Task SaveIntroSection()
    {
        try
        {
            // Synkronisera först
            await SyncIntroEditor();
            
            await Cms.SaveIntroSectionAsync("kontaktaoss", introSection);
            await Toast.Success("Intro-sektion har sparats!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparande av intro-sektion");
            await Toast.Error("Fel vid sparande av intro-sektion");
        }
    }

    private Task OnShowNavigationButtonsChanged(bool value)
    {
        introSection.ShowNavigationButtons = value;
        return Task.CompletedTask;
    }

    private Task OnNavigationButtonsChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ShowContactFormInfo()
    {
        showContactFormInfoModal = true;
    }

    private void CloseContactFormInfo()
    {
        showContactFormInfoModal = false;
    }

    private void OnFeatureSectionsChanged() { }
    private void OnFeatureImageDeleted(FeatureSectionManager.ImageDeleteInfo info) { }
    private void OnFaqSectionsChanged() { }

    private async Task OnNavigationNameChanged(string newDisplayName)
    {
        // Synkronisera sidtiteln om önskas
        if (!string.IsNullOrEmpty(newDisplayName) && pageContent.Title != newDisplayName)
        {
            var shouldSync = await JS.InvokeAsync<bool>("confirm",
                $"Vill du också ändra sidtiteln till '{newDisplayName}'?");

            if (shouldSync)
            {
                pageContent.Title = newDisplayName;
                await SavePageContent();
            }
        }
    }

    private async Task ScrollToNavigationSettings()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToNavigationSettings");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunde inte scrolla till navigationsinställningar");
        }
    }
}