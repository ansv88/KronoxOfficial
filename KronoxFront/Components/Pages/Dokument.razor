@page "/dokument"
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProvider ServiceProvider
@inject CmsService CmsService
@inject ILogger<Dokument> Logger
@inject CategoryService CategoryService
@inject DocumentService DocumentService
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Policy = "ExcludeNewUser")]

<HeadContent>
    <meta name="description" content="Ladda ner och läs viktiga dokument, manualer och riktlinjer för KronoX-systemet och dess användning." />
</HeadContent>

<PageTitle>Dokument</PageTitle>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
    <!-- Hero/banner -->
    <section class="hero-banner position-relative">
        @{
            var heroBanner = pageContent.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
            var heroBannerUrl = heroBanner != null ? heroBanner.Url : "images/hero/hero_top_klocka_blue-1300x394.jpg";
            var heroBannerAlt = heroBanner != null ? heroBanner.AltText.Substring(5) : "Klocka bannerbild";
        }
        <img src="@heroBannerUrl" class="img-fluid w-100" alt="@heroBannerAlt" />
        @if (isAdmin)
        {
            <div class="position-absolute top-0 end-0 m-3">
                <a href="/admin/dokument" class="btn btn-dark btn-sm opacity-75">
                    <i class="fa-solid fa-edit me-1"></i> Redigera sidan
                </a>
            </div>
        }
    </section>

    @* ---------- Breadcrumb-stil huvudrubrik -------------------------------- *@
    <section class="container mt-4" style="max-width:1000px; margin: 0 auto;">
        <div class="text-start mb-4">
            <h2 class="h5 text-muted mb-0">DOKUMENT</h2>
        </div>
    </section>

    @* ---------- Introsektion ------------------------------------------------ *@
    <section class="bg-light py-5 border-0" style="min-height: 320px;">
        <div class="container" style="max-width: 800px;">
            <div class="mb-2 text-uppercase fw-semibold text-start" style="letter-spacing: 0.5px;">
                Dokument
            </div>
            <div class="text-center">
                @if (string.IsNullOrEmpty(introSection.Title))
                {
                    <h1 class="fw-semibold mb-3">
                        Ladda ner alla filer du behöver här
                    </h1>
                    <div class="mb-3 fs-5">
                        Här hittar du alla mötesprotokoll, anteckningar, förvaltningsdokument med mera.
                    </div>
                    <div class="mb-4 fs-5">
                        <a href="/manual" class="text-decoration-underline text-dark small">
                            Letar du efter Manualen hittar du den här <i class="fa fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                    <div>
                        <a href="/manual" class="btn btn-dark px-4 py-2 shadow-sm" style="min-width: 140px;">
                            Manualen <i class="fa fa-arrow-right ms-2"></i>
                        </a>
                    </div>
                }
                else
                {
                    <h1 class="fw-semibold mb-3">
                        @introSection.Title
                    </h1>
                    <div class="mb-3 fs-5">
                        @((MarkupString)introSection.Content)
                    </div>
                    <div>
                        <a href="/manual" class="btn btn-dark px-4 py-2 shadow-sm" style="min-width: 140px;">
                            Manualen <i class="fa fa-arrow-right ms-2"></i>
                        </a>
                    </div>
                }
            </div>
        </div>
    </section>

    @* ---------- Huvudsektion med dokument ---------------------------------- *@
    <div class="wrapper-div py-3">
        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <div class="container mt-4">

                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Laddar...</span>
                            </div>
                        </div>
                    }
                    else if (loadError)
                    {
                        <div class="alert alert-danger text-center">
                            Ett fel uppstod vid laddning av dokument. Vänligen försök igen senare.
                        </div>
                    }
                    else if (!accessibleDocuments.Any())
                    {
                        <div class="alert alert-info text-center">
                            Inga dokument finns tillgängliga för din behörighetsnivå.
                        </div>
                    }
                    else
                    {
                        @* ---------- Arkivfilter för admin ------------------------- *@
                        @if (isAdmin)
                        {
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input type="checkbox" class="form-check-input" id="showArchived" @bind="showArchived" @bind:after="FilterDocuments" />
                                    <label class="form-check-label" for="showArchived">Visa arkiverade dokument</label>
                                </div>
                            </div>
                        }

                        @* ---------- Dokumentlista grupperad per kategori -------- *@
                        <div class="document-categories mb-5">
                            @foreach (var category in accessibleCategories.Where(c =>
                                                filteredDocuments.Any(doc => doc.MainCategoryId == c.Id)))
                            {
                                <div class="document-category mb-5">
                                    <h2 class="category-title border-bottom fs-3 pb-2 mb-3 text-dark h3">
                                        @category.Name
                                        @if (isAdmin)
                                        {
                                            <small class="text-muted fs-6">
                                                (@string.Join(", ", category.AllowedRoles))
                                            </small>
                                        }
                                    </h2>
                                    <div class="document-list">
                                        @foreach (var doc in filteredDocuments
                                                                    .Where(d => d.MainCategoryId == category.Id)
                                                                    .OrderByDescending(d => d.UploadedAt))
                                        {
                                            <div class="document-item py-2 @(doc.IsArchived ? "opacity-50" : "")">
                                                <div class="text-decoration-none text-dark d-flex align-items-center">
                                                    <div class="document-icon text-center flex-shrink-0 me-2">
                                                        <i class="@GetFileIcon(doc.FileName) fa-lg"></i>
                                                    </div>
                                                    <div class="document-details flex-grow-1">
                                                        <div>
                                                            @doc.FileName
                                                            @if (doc.IsArchived)
                                                            {
                                                                <span class="badge bg-secondary ms-2">Arkiverad</span>
                                                            }
                                                        </div>
                                                        <small class="text-muted">@doc.UploadedAt.ToString("yyyy-MM-dd")</small>
                                                    </div>
                                                    <div class="ms-auto">
                                                        <button class="btn btn-sm btn-info me-1"
                                                                title="Visa dokument"
                                                                @onclick="() => ViewDocument(doc.Id, doc.FileName)">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-primary me-1"
                                                                title="Ladda ner dokument"
                                                                @onclick="() => DownloadDocument(doc.Id)">
                                                            <i class="fas fa-download"></i>
                                                        </button>
                                                        @if (isAdmin)
                                                        {
                                                            @if (doc.IsArchived)
                                                            {
                                                                <button class="btn btn-sm btn-success"
                                                                        title="Återställ dokument"
                                                                        @onclick="() => UnarchiveDocument(doc.Id)">
                                                                    <i class="fas fa-undo"></i>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-warning"
                                                                        title="Arkivera dokument"
                                                                        @onclick="() => ArchiveDocument(doc.Id)">
                                                                    <i class="fas fa-archive"></i>
                                                                </button>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </section>

        @* ---------- Feature Sections (följer samma mönster som Omsystemet) -- *@
        @if (featureSections.Count > 0)
        {
            <section class="container mt-4 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                <div style="max-width:800px; margin: 0 auto;">
                    @foreach (var (featureItem, index) in featureSections.Select((s, i) => (s, i)))
                    {
                        <div class="feature-section row align-items-center mb-5">
                            @if (featureItem.HasImage)
                            {
                                <div class="col-md-4 mb-3 mb-md-0">
                                    @if (!string.IsNullOrEmpty(featureItem.ImageUrl))
                                    {
                                        <img src="@featureItem.ImageUrl"
                                             class="img-thumbnail feature-thumb w-100"
                                             style="cursor:pointer"
                                             alt="@(!string.IsNullOrEmpty(featureItem.ImageAltText) ? featureItem.ImageAltText : $"Bild för {featureItem.Title}")"
                                             @onclick="() => ShowImage(featureItem.ImageUrl)" />
                                    }
                                    else
                                    {
                                        <div class="bg-light p-4 text-center rounded">
                                            <i class="fa-solid fa-image text-muted fa-3x"></i>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-8">
                                    @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                    {
                                        <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                    }
                                    <div>@((MarkupString)featureItem.Content)</div>
                                </div>
                            }
                            else
                            {
                                <div class="col-12 text-center">
                                    @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                    {
                                        <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                    }
                                    <div>@((MarkupString)featureItem.Content)</div>
                                </div>
                            }
                        </div>

                        @if (index < featureSections.Count - 1)
                        {
                            <div class="divider"></div>
                        }
                    }
                </div>
            </section>
        }
    </div>

    @* ---------- Bildmodal -------------------------------------------------- *@
    @if (!string.IsNullOrEmpty(activeImage))
    {
        <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
             role="dialog" aria-modal="true" aria-label="Förhandsgranskning av bild">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content border-0 bg-transparent">
                    <button type="button" class="btn-close btn-close-white ms-auto me-n4 mt-n4" @onclick="CloseModal"></button>
                    <img src="@activeImage" class="img-fluid rounded-3" />
                </div>
            </div>
        </div>
    }
}

<!-- Document Viewer Modal -->
<DocumentViewer IsVisible="@isViewerOpen"
                DocumentId="@selectedDocumentId"
                DocumentTitle="@selectedDocumentName"
                OnClose="CloseDocumentViewer"
                OnDownload="DownloadDocument" />

@code {
    private List<DocumentViewModel> accessibleDocuments = new();
    private List<DocumentViewModel> filteredDocuments = new();
    private List<MainCategoryDto> accessibleCategories = new();
    private bool isLoading = true;
    private bool loadError = false;
    private string errorMessage = "";
    private bool showArchived = false;

    private List<string> userRoles = new();

    private bool isViewerOpen = false;
    private int selectedDocumentId = 0;
    private string selectedDocumentName = "";

    // Banner och sidinnehåll
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;

    // CMS-innehåll
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();

    // Bildmodal
    private string? activeImage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hämta användarroller
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userRoles = authState.User.Claims
                .Where(c => c.Type == System.Security.Claims.ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();

            // Kontrollera om användaren har Admin-rollen
            isAdmin = userRoles.Contains("Admin");

            // Hämta CMS-innehåll
            await LoadCmsContent();

            // **NYCKEL** - Hämta endast tillgängliga kategorier och dokument
            await LoadAccessibleData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initiering av dokumentsidan");
            loadError = true;
            errorMessage = "Ett fel uppstod vid laddning av dokumentsidan.";
        }
        finally
        {
            isLoading = false;
            loading = false;
        }
    }

    private async Task LoadCmsContent()
    {
        try
        {
            introSection = await CmsService.GetIntroSectionAsync("dokument");
            featureSections = await CmsService.GetFeatureSectionsAsync("dokument");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av CMS-innehåll för dokument-sidan");
        }
    }

    // **NYCKELMETOD** - Hämtar endast data som användaren har tillgång till
    private async Task LoadAccessibleData()
    {
        try
        {
            // Hämta kategorier baserat på användarens roller
            accessibleCategories = await CategoryService.GetAccessibleMainCategoriesAsync();

            // Hämta dokument baserat på användarens roller
            accessibleDocuments = await DocumentService.GetAccessibleDocumentsAsync();
            
            FilterDocuments();

            Logger.LogInformation("Hämtade {CategoryCount} tillgängliga kategorier och {DocumentCount} tillgängliga dokument", 
                accessibleCategories.Count, accessibleDocuments.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av tillgänglig data");
            errorMessage = ex.Message;
            loadError = true;
        }
    }

    private void FilterDocuments()
    {
        filteredDocuments = accessibleDocuments.Where(d => 
            isAdmin ? (showArchived || !d.IsArchived) : !d.IsArchived)
            .ToList();
        
        StateHasChanged();
    }

    private async Task ArchiveDocument(int documentId)
    {
        try
        {
            var success = await DocumentService.ArchiveDocumentAsync(documentId);
            if (success)
            {
                await LoadAccessibleData();
                await ToastService.Success("Dokumentet har arkiverats");
            }
            else
            {
                await ToastService.Error("Kunde inte arkivera dokumentet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid arkivering av dokument");
            await ToastService.Error("Ett fel uppstod vid arkivering");
        }
    }

    private async Task UnarchiveDocument(int documentId)
    {
        try
        {
            var success = await DocumentService.UnarchiveDocumentAsync(documentId);
            if (success)
            {
                await LoadAccessibleData();
                await ToastService.Success("Dokumentet har återställts");
            }
            else
            {
                await ToastService.Error("Kunde inte återställa dokumentet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid återställning av dokument");
            await ToastService.Error("Ett fel uppstod vid återställning");
        }
    }

    private void ViewDocument(int id, string fileName)
    {
        selectedDocumentId = id;
        selectedDocumentName = fileName;
        isViewerOpen = true;
    }

    private void CloseDocumentViewer()
    {
        isViewerOpen = false;
        StateHasChanged();
    }

    // Laddar ner dokument till användarens dator
    private async Task DownloadDocument(int id)
    {
        try
        {
            var result = await DocumentService.DownloadDocumentAsync(id);

            if (result == null)
            {
                Logger.LogWarning("Kunde inte ladda ner dokument {DocumentId}: Null-resultat från DocumentService", id);
                await ToastService.Error("Kunde inte ladda ner dokumentet");
                return;
            }

            var (stream, fileName) = result.Value;

            // Skapa en stream reference
            var streamRef = new DotNetStreamReference(stream: stream);

            // Skicka vidare stream reference till JS för nedladdning
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", streamRef, fileName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid nedladdning av dokument {DocumentId}", id);
            await ToastService.Error($"Ett fel inträffade vid nedladdning: {ex.Message}");
        }
    }

    // Returnerar lämplig FontAwesome-ikon baserat på filtyp
    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fas fa-file-pdf text-danger",
            ".doc" or ".docx" => "fas fa-file-word text-primary",
            ".xls" or ".xlsx" => "fas fa-file-excel text-success",
            ".ppt" or ".pptx" => "fas fa-file-powerpoint text-warning",
            ".txt" => "fas fa-file-alt text-secondary",
            _ => "fas fa-file"
        };
    }

    // Bildmodal-metoder (lika som i Omsystemet.razor)
    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;
}