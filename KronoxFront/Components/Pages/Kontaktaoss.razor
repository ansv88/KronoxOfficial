@page "/kontaktaoss"
@using System.Text.Json
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using KronoxFront.Components.Shared
@using KronoxFront.Components.Shared.Layout
@using KronoxFront.Components.Shared.Content
@using KronoxFront.Components.Shared.UI
@using KronoxFront.Components.Shared.Forms
@inject CmsService Cms
@inject IToastService Toast
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthState
@inject ILogger<Kontaktaoss> Logger

<HeadContent>
    <meta name="description" content="Kontakta KronoX för frågor om systemet, medlemskap eller support. Här hittar du kontaktuppgifter och formulär." />
</HeadContent>

<PageTitle>KronoX - @pageContent.Title</PageTitle>
<h1 class="visually-hidden">@pageContent.Title</h1>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
    @* Dynamisk rendering baserat på sektionskonfiguration *@
    @if (sectionConfigurations.Any())
    {
        @foreach (var section in sectionConfigurations.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
        {
            @switch (section.Type)
            {
                case SectionType.Banner:
                    <PageHeroBanner ImageUrl="@GetHeroBannerUrl()" AltText="@GetHeroBannerAlt()"
                                    IsAdmin="@isAdmin" PageKey="kontaktaoss" />
                    break;

                case SectionType.Intro:
                    @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
                    {
                        <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
                    }
                    <IntroSection Model="@introSection" OnImageClick="@ShowImage" />
                    break;

                case SectionType.NavigationButtons:
                    @if (introSection.ShowNavigationButtons && introSection.NavigationButtons.Any())
                    {
                        <NavigationButtons Buttons="@introSection.NavigationButtons" />
                    }
                    break;

                case SectionType.ContactForm:
                    <ContactFormSection />
                    break;

                case SectionType.FeatureSections:
                    @if (featureSections.Any())
                    {
                        <div class="wrapper-div py-3">
                            <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                                <div style="max-width:800px; margin: 0 auto;">
                                    <FeatureSections IsAdmin="@isAdmin" 
                                                   PageKey="kontaktaoss" OnImageClick="@ShowImage" />
                                </div>
                            </section>
                        </div>
                    }
                    break;

                case SectionType.FaqSections:
                    @if (faqSections.Any())
                    {
                        <div class="wrapper-div py-3">
                            <section class="container mt-2 my-5 bg-white rounded-3" style="max-width:1000px">
                                <div style="max-width:800px; margin: 0 auto;">
                                    <FaqAccordion FaqSections="@faqSections" />
                                </div>
                            </section>
                        </div>
                    }
                    break;

                case SectionType.MemberLogos:
                    <div class="wrapper-div py-3">
                        <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />
                    </div>
                    break;

                case SectionType.NewsSection:
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                <NewsSection PageKey="kontaktaoss" 
                                             Title="Senaste nyheterna"
                                             MaxItems="3"
                                             ShowFilters="false"
                                             ShowPagination="false"
                                             ShowArchiveToggle="false"
                                             ShowAllNewsLink="true" />
                            </div>
                        </section>
                    </div>
                    break;

                case SectionType.DocumentSection:
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                <DocumentSection PageKey="kontaktaoss"
                                                 Title="Dokument"
                                                 ShowFilters="false"
                                                 ShowCategoryHeaders="true"
                                                 ShowAllDocumentsLink="true"
                                                 MaxDocumentsPerCategory="3" />
                            </div>
                        </section>
                    </div>
                    break;
            }
        }
    }
    else
    {
        @* Fallback: Visa alltid grundläggande innehåll om inga sektioner är konfigurerade *@
        <div class="wrapper-div">
            @* Banner *@
            <PageHeroBanner ImageUrl="@GetHeroBannerUrl()" AltText="@GetHeroBannerAlt()"
                            IsAdmin="@isAdmin" PageKey="kontaktaoss" />
            
            @* Intro *@
            @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
            {
                <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
            }
            <IntroSection Model="@introSection" OnImageClick="@ShowImage" />
            
            @* Kontaktformulär *@
            <ContactFormSection />
            
            @* Medlemslogotyper *@
            <div class="py-3">
                <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />
            </div>
        </div>
    }

    <ScrollTopButton />
    <ImageModal ImageUrl="@activeImage" OnClose="@CloseModal" />
}

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;
    private string? activeImage;
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();

    // Sektionskonfiguration
    private List<SectionConfigItem> sectionConfigurations = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initCarousel");
            await JS.InvokeVoidAsync("initFeatureImageClicks");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        loading = true;

        try
        {
            // Ladda sidinnehåll
            pageContent = await Cms.GetPageContentAsync("kontaktaoss") ?? new PageContentViewModel
            {
                PageKey = "kontaktaoss",
                Title = "Kontakta oss",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            // Ladda intro-sektion
            introSection = await Cms.GetIntroSectionAsync("kontaktaoss");
            
            // Sätt standardvärden om inget innehåll finns
            if (string.IsNullOrEmpty(introSection.Title))
            {
                introSection.Title = "Kontakta oss";
                introSection.Content = @"<p>Har du frågor eller vill komma i kontakt med oss? Använd formuläret nedan eller kontakta oss direkt.</p>
                                        <p>Vi hjälper dig gärna med frågor om KronoX-systemet, medlemskap eller teknisk support.</p>";
                introSection.BreadcrumbTitle = "KONTAKT";
            }
            
            // Ladda övriga sektioner
            featureSections = await Cms.GetFeatureSectionsAsync("kontaktaoss");
            faqSections = await Cms.GetFaqSectionsAsync("kontaktaoss");

            // Ladda sektionskonfiguration
            sectionConfigurations = await Cms.GetPageSectionConfigAsync("kontaktaoss");

            // Om ingen konfiguration finns, skapa standardkonfiguration
            if (!sectionConfigurations.Any())
            {
                Logger.LogWarning("Ingen sektionskonfiguration hittades för kontakt, skapar fallback");
                sectionConfigurations = new List<SectionConfigItem>
                {
                    new() { Type = SectionType.Banner, SortOrder = 0, IsEnabled = true },
                    new() { Type = SectionType.Intro, SortOrder = 1, IsEnabled = true },
                    new() { Type = SectionType.ContactForm, SortOrder = 2, IsEnabled = true },
                    new() { Type = SectionType.MemberLogos, SortOrder = 3, IsEnabled = true }
                };
            }

            Logger.LogInformation("Kontakta oss-sidan laddad framgångsrikt med {SectionCount} sektioner", sectionConfigurations.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inläsning av Kontakta oss-sidan: {Message}", ex.Message);

            // Skapa robust fallback-innehåll
            pageContent = new PageContentViewModel
            {
                PageKey = "kontaktaoss",
                Title = "Kontakta oss",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            introSection = new IntroSectionViewModel
            {
                Title = "Kontakta oss",
                Content = @"<p>Har du frågor eller vill komma i kontakt med oss? Använd formuläret nedan eller kontakta oss direkt.</p>
                           <p>Vi hjälper dig gärna med frågor om KronoX-systemet, medlemskap eller teknisk support.</p>",
                BreadcrumbTitle = "KONTAKT"
            };
            
            featureSections = new List<FeatureSectionViewModel>();
            faqSections = new List<FaqSectionViewModel>();

            // Säkerställ att standardkonfiguration alltid finns
            sectionConfigurations = new List<SectionConfigItem>
            {
                new() { Type = SectionType.Banner, SortOrder = 0, IsEnabled = true },
                new() { Type = SectionType.Intro, SortOrder = 1, IsEnabled = true },
                new() { Type = SectionType.ContactForm, SortOrder = 2, IsEnabled = true },
                new() { Type = SectionType.MemberLogos, SortOrder = 3, IsEnabled = true }
            };
        }
        finally
        {
            loading = false;
        }
    }

    private string GetHeroBannerUrl()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText?.StartsWith("hero:") == true);
        return heroBanner?.Url ?? "/images/hero/hero_students.jpeg";
    }

    private string GetHeroBannerAlt()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText?.StartsWith("hero:") == true);
        return heroBanner?.AltText?.Substring(5) ?? "Kontakta oss";
    }

    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;
}