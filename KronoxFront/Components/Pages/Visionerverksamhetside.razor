@page "/visioner"
@using System.Text.Json
@using KronoxFront.Components.Shared.Security
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using KronoxFront.Components.Shared
@using KronoxFront.Components.Shared.Layout
@using KronoxFront.Components.Shared.Content
@using KronoxFront.Components.Shared.UI
@using KronoxFront.Components.Shared.Forms
@inject CmsService Cms
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthState
@inject ILogger<Visionerverksamhetside> Logger

<!-- Garantierad avstängning: Redirecta till 404 om NavigationConfig markerar sidan som inaktiv -->
<RequirePageEnabled PageKey="visioner" FailClosed="true" />

<HeadContent>
    <meta name="description" content="Läs om KronoX-konsortiets vision, verksamhetsidé och mål för utveckling av schemaläggningssystem för svenska lärosäten." />
</HeadContent>

<PageTitle>@($"{(string.IsNullOrWhiteSpace(pageContent?.Title) ? "Visioner & Verksamhetsidé" : pageContent!.Title)} - KronoX")</PageTitle>
<h1 class="visually-hidden">@((string.IsNullOrWhiteSpace(pageContent?.Title) ? "Visioner & Verksamhetsidé" : pageContent!.Title))</h1>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
    @* Dynamisk rendering baserat på sektionskonfiguration *@
    @foreach (var section in sectionConfigurations.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
    {
        @switch (section.Type)
        {
            case SectionType.Banner:
                <PageHeroBanner ImageUrl="@GetHeroBannerUrl()" AltText="@GetHeroBannerAlt()"
                                IsAdmin="@isAdmin" PageKey="visioner" />
                break;

            case SectionType.Intro:
                @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
                {
                    <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
                }
                <IntroSection Model="@introSection" OnImageClick="@ShowImage" />
                break;

            case SectionType.NavigationButtons:
                @if (introSection.ShowNavigationButtons && introSection.NavigationButtons.Any())
                {
                    <NavigationButtons Buttons="@introSection.NavigationButtons" />
                }
                break;

            case SectionType.FeatureSections:
                @if (featureSections.Any())
                {
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                <FeatureSections IsAdmin="@isAdmin" 
                                               PageKey="visioner" OnImageClick="@ShowImage" />
                            </div>
                        </section>
                    </div>
                }
                break;

            case SectionType.FaqSections:
                @if (faqSections.Any())
                {
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                <FaqAccordion FaqSections="@faqSections" />
                            </div>
                        </section>
                    </div>
                }
                break;

            case SectionType.MemberLogos:
                <div class="wrapper-div py-3">
                    <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />
                </div>
                break;

            case SectionType.NewsSection:
                <div class="wrapper-div py-3">
                    <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                        <div style="max-width:800px; margin: 0 auto;">
                            <NewsSection PageKey="visioner" 
                                         Title="Visionsnyheter"
                                         MaxItems="3"
                                         ShowFilters="false"
                                         ShowPagination="false"
                                         ShowArchiveToggle="false"
                                         ShowAllNewsLink="true" />
                        </div>
                    </section>
                </div>
                break;

            case SectionType.DocumentSection:
                <div class="wrapper-div py-3">
                    <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                        <div style="max-width:800px; margin: 0 auto;">
                            <DocumentSection PageKey="visioner"
                                             Title="Visionsdokument"
                                             ShowFilters="false"
                                             ShowCategoryHeaders="true"
                                             ShowAllDocumentsLink="true"
                                             MaxDocumentsPerCategory="5" />
                        </div>
                    </section>
                </div>
                break;

            case SectionType.ActionPlanTable:
                <div class="wrapper-div py-3">
                    <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                        <ActionPlanSection ActionPlan="@actionPlan" Title="Handlingsplan" />
                    </section>
                </div>
                break;

            case SectionType.DevelopmentSuggestionForm:
                <div class="wrapper-div py-3">
                    <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                        <div style="max-width:800px; margin: 0 auto;">
                            <DevelopmentSuggestionForm />
                        </div>
                    </section>
                </div>
                break;
        }
    }

    <ScrollTopButton />
    <ImageModal ImageUrl="@activeImage" OnClose="@CloseModal" />
}

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;
    private string? activeImage;
    private IntroSectionViewModel introSection = new();
    private ActionPlanTableViewModel actionPlan = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();

    // Sektionskonfiguration
    private List<SectionConfigItem> sectionConfigurations = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initCarousel");
            await JS.InvokeVoidAsync("initFeatureImageClicks");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        loading = true;

        try
        {
            pageContent = await Cms.GetPageContentAsync("visioner") ?? new PageContentViewModel
            {
                PageKey = "visioner",
                Title = "Visioner & Verksamhetsidé",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            introSection = await Cms.GetIntroSectionAsync("visioner");
            featureSections = await Cms.GetFeatureSectionsAsync("visioner");
            faqSections = await Cms.GetFaqSectionsAsync("visioner");

            // Ladda sektionskonfiguration för att veta vilka sektioner som ska visas
            sectionConfigurations = await Cms.GetPageSectionConfigAsync("visioner");

            // Hämta handlingsplan om den är aktiverad
            if (sectionConfigurations.Any(s => s.Type == SectionType.ActionPlanTable && s.IsEnabled))
            {
                try
                {
                    actionPlan = await Cms.GetActionPlanAsync("visioner");
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Kunde inte hämta handlingsplan för visioner - fortsätter utan");
                    actionPlan = new ActionPlanTableViewModel();
                }
            }

            Logger.LogInformation("Visioner-sidan laddad framgångsrikt med {SectionCount} sektioner", sectionConfigurations.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inläsning av Visioner & Verksamhetsidé-sidan: {Message}", ex.Message);
            
            // Skapa fallback-innehåll
            pageContent = new PageContentViewModel
            {
                PageKey = "visioner",
                Title = "Visioner & Verksamhetsidé",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };
            
            introSection = new IntroSectionViewModel
            {
                Title = "Visioner & Verksamhetsidé",
                Content = "<p>Information om våra visioner och verksamhetsidé kommer att visas här.</p>"
            };
            
            featureSections = new List<FeatureSectionViewModel>();
            faqSections = new List<FaqSectionViewModel>();

            // Skapa standardkonfiguration som fallback
            sectionConfigurations = new List<SectionConfigItem>
            {
                new() { Type = SectionType.Banner, SortOrder = 0, IsEnabled = true },
                new() { Type = SectionType.Intro, SortOrder = 1, IsEnabled = true },
                new() { Type = SectionType.FeatureSections, SortOrder = 2, IsEnabled = true },
                new() { Type = SectionType.MemberLogos, SortOrder = 3, IsEnabled = true }
            };
        }
        finally
        {
            loading = false;
        }
    }

    private string GetHeroBannerUrl()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText?.StartsWith("hero:") == true);
        return heroBanner?.Url ?? "";
    }

    private string GetHeroBannerAlt()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText?.StartsWith("hero:") == true);
        return heroBanner?.AltText?.Substring(5) ?? "";
    }

    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;
}