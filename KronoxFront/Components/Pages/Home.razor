@page "/"
@using System.Text.Json
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using KronoxFront.Components.Shared
@inject CmsService Cms
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthState
@inject ILogger<Home> Logger

<HeadContent>
    <meta name="description" content="KronoX – Schemaläggning och bokningssystem för högre utbildning. Upptäck funktioner, nyheter och medlemsinformation." />
</HeadContent>

<PageTitle>KronoX - @pageContent.Title</PageTitle>
<h1 class="visually-hidden">@pageContent.Title</h1>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
        var heroBanner = pageContent.Images.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
        var heroBannerUrl = heroBanner != null ? heroBanner.Url : "images/hero/hero_students.jpeg";
        var heroBannerAlt = heroBanner != null ? heroBanner.AltText.Substring(5) : "Studenter bannerbild";

    <PageHeroBanner ImageUrl="@heroBannerUrl" AltText="@heroBannerAlt" 
                    IsAdmin="@isAdmin" PageKey="home" />

    @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
    {
        <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
    }

    <IntroSection Model="@introSection" OnImageClick="@ShowImage" />

    @if (introSection.ShowNavigationButtons && introSection.NavigationButtons.Any())
    {
        <NavigationButtons Buttons="@introSection.NavigationButtons" />
    }

    <div class="wrapper-div py-3">
        <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />

        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <FeatureSections Sections="@featureSections" IsAdmin="@isAdmin" 
                               PageKey="home" OnImageClick="@ShowImage" />
            </div>
        </section>
    </div>

    <ImageModal ImageUrl="@activeImage" OnClose="@CloseModal" />
}

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;
    private string? activeImage;
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initCarousel");
            await JS.InvokeVoidAsync("initFeatureImageClicks");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        loading = true;

        try
        {
            await Cms.SyncImagesFromApiAsync();
            pageContent = await Cms.GetHomeAsync() ?? new PageContentViewModel();

            introSection = await Cms.GetIntroSectionAsync("home");
            featureSections = await Cms.GetFeatureSectionsAsync("home");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inläsning av startsidan: {Message}", ex.Message);

            introSection = new IntroSectionViewModel
            {
                Title = "Något gick fel",
                Content = "<p>Det uppstod ett fel vid hämtning av innehållet.</p>"
            };
            featureSections = new List<FeatureSectionViewModel>();
        }
        finally
        {
            loading = false;
        }
    }

    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;
}