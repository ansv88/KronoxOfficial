@page "/omkonsortiet"
@using System.Text.Json
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using KronoxFront.Components.Shared
@inject CmsService Cms
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthState
@inject ILogger<Omkonsortiet> Logger

<HeadContent>
    <meta name="description" content="Läs om KronoX-konsortiet - en sammanslutning av svenska högskolor och universitet för utveckling av schemaläggningssystem." />
</HeadContent>

<PageTitle>KronoX - @pageContent.Title</PageTitle>
<h1 class="visually-hidden">@pageContent.Title</h1>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
    @* Dynamisk rendering baserat på sektionskonfiguration *@
    @foreach (var section in sectionConfigurations.Where(s => s.IsEnabled).OrderBy(s => s.SortOrder))
    {
        @switch (section.Type)
        {
            case SectionType.Banner:
                <PageHeroBanner ImageUrl="@GetHeroBannerUrl()" AltText="@GetHeroBannerAlt()"
                                IsAdmin="@isAdmin" PageKey="omkonsortiet" />
                break;

            case SectionType.Intro:
                @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
                {
                    <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
                }
                <IntroSection Model="@introSection" OnImageClick="@ShowImage" />
                break;

            case SectionType.NavigationButtons:
                @if (introSection.ShowNavigationButtons && introSection.NavigationButtons.Any())
                {
                    <NavigationButtons Buttons="@introSection.NavigationButtons" />
                }
                break;

            case SectionType.FeatureSections:
                @if (featureSections.Any())
                {
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                @foreach (var (featureItem, index) in featureSections.Select((s, i) => (s, i)))
                                {
                                    <div class="feature-section row align-items-center mb-5">
                                        @if (featureItem.HasImage)
                                        {
                                            <div class="col-md-4 mb-3 mb-md-0">
                                                @if (!string.IsNullOrEmpty(featureItem.ImageUrl))
                                                {
                                                    <img src="@featureItem.ImageUrl"
                                                    class="img-thumbnail feature-thumb w-100"
                                                    style="cursor:pointer"
                                                    alt="@(!string.IsNullOrEmpty(featureItem.ImageAltText) ? featureItem.ImageAltText : $"Bild för {featureItem.Title}")"
                                                    @onclick="() => ShowImage(featureItem.ImageUrl)" />
                                                }
                                                else
                                                {
                                                    <div class="bg-light p-4 text-center rounded">
                                                        <i class="fa-solid fa-image text-muted fa-3x"></i>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-8">
                                                @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                                {
                                                    <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                                }
                                                <div>@((MarkupString)GetEnhancedContent(featureItem))</div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-12 text-center">
                                                @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                                {
                                                    <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                                }
                                                <div>@((MarkupString)GetEnhancedContent(featureItem))</div>
                                            </div>
                                        }
                                    </div>

                                    @if (index < featureSections.Count - 1)
                                    {
                                        <div class="divider"></div>
                                    }
                                }
                            </div>
                        </section>
                    </div>
                }
                break;

            case SectionType.FaqSections:
                @if (faqSections.Any())
                {
                    <div class="wrapper-div py-3">
                        <section class="container mt-2 my-5 bg-white rounded-3" style="max-width:1000px">
                            <div style="max-width:800px; margin: 0 auto;">
                                <FaqAccordion FaqSections="@faqSections" />
                            </div>
                        </section>
                    </div>
                }
                break;

            case SectionType.MemberLogos:
                <div class="wrapper-div py-3">
                    <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />
                </div>
                break;

                case SectionType.NewsSection:
    <div class="wrapper-div py-3">
        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <h2 class="text-center mb-4">Senaste nyheterna</h2>
                <NewsSection PageKey="omkonsortiet" />
            </div>
        </section>
    </div>
    break;

case SectionType.DocumentSection:
    <div class="wrapper-div py-3">
        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <h2 class="text-center mb-4">Dokument</h2>
                <div class="text-center">
                    <p class="text-muted mb-3">Här hittar du viktiga dokument och resurser.</p>
                    <a href="/dokument" class="btn btn-primary">
                        <i class="fa-solid fa-file-alt me-2"></i>
                        Visa alla dokument
                    </a>
                </div>
            </div>
        </section>
    </div>
    break;

case SectionType.ActionPlanTable:
    <div class="wrapper-div py-3">
        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <ActionPlanTableManager ActionPlan="@actionPlan" IsAdminMode="false" />
            </div>
        </section>
    </div>
    break;

case SectionType.DevelopmentSuggestionForm:
    <div class="wrapper-div py-3">
        <section class="container mt-2 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
            <div style="max-width:800px; margin: 0 auto;">
                <DevelopmentSuggestionForm />
            </div>
        </section>
    </div>
    break;
        }
    }

    <ImageModal ImageUrl="@activeImage" OnClose="@CloseModal" />
}

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;
    private bool isLoggedIn = false;
    private string? activeImage;
    private ActionPlanTableViewModel actionPlan = new();
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<FaqSectionViewModel> faqSections = new();
    private List<MemberLogoViewModel> memberLogos = new();

    // Sektionskonfiguration
    private List<SectionConfigItem> sectionConfigurations = new();

    // Institution URL mapping för medlemslärosäten
    private readonly Dictionary<string, string> institutionUrls = new(StringComparer.OrdinalIgnoreCase)
    {
        { "Högskolan i Borås", "https://www.hb.se" },
        { "Högskolan i Gävle", "https://www.hig.se" },
        { "Högskolan Kristianstad", "https://www.hkr.se" },
        { "Högskolan Väst", "https://www.hv.se" },
        { "Johannelunds teologiska högskola", "https://www.jth.se" },
        { "Konstfack", "https://www.konstfack.se" },
        { "Luleå tekniska universitet", "https://www.ltu.se" },
        { "Malmö universitet", "https://www.mau.se" },
        { "Mälardalens universitet", "https://www.mdu.se" },
        { "Södertörns högskola", "https://www.sh.se" },
        { "Örebro universitet", "https://www.oru.se" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initCarousel");
            await JS.InvokeVoidAsync("initFeatureImageClicks");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        isLoggedIn = authState.User.Identity?.IsAuthenticated == true;
        loading = true;

        try
        {
            pageContent = await Cms.GetPageContentAsync("omkonsortiet") ?? new PageContentViewModel
            {
                PageKey = "omkonsortiet",
                Title = "Om konsortiet",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            memberLogos = await Cms.GetMemberLogosAsync();
            introSection = await Cms.GetIntroSectionAsync("omkonsortiet");
            
            // Hämta med privat innehåll bara för inloggade
            featureSections = await Cms.GetFeatureSectionsAsync("omkonsortiet", includePrivate: isLoggedIn);
            faqSections = await Cms.GetFaqSectionsAsync("omkonsortiet");

            // Ladda sektionskonfiguration för att veta vilka sektioner som ska visas
            sectionConfigurations = await Cms.GetPageSectionConfigAsync("omkonsortiet");

            if (sectionConfigurations.Any(s => s.Type == SectionType.ActionPlanTable && s.IsEnabled))
            {
                actionPlan = await Cms.GetActionPlanAsync("omkonsortiet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inläsning av Om konsortiet-sidan: {Message}", ex.Message);
            
            introSection = new IntroSectionViewModel
            {
                Title = "Något gick fel",
                Content = "<p>Det uppstod ett fel vid hämtning av innehållet.</p>"
            };
            featureSections = new List<FeatureSectionViewModel>();
            faqSections = new List<FaqSectionViewModel>();

            // Skapa standardkonfiguration som fallback
            sectionConfigurations = new List<SectionConfigItem>
            {
                new() { Type = SectionType.Banner, SortOrder = 0, IsEnabled = true },
                new() { Type = SectionType.Intro, SortOrder = 1, IsEnabled = true },
                new() { Type = SectionType.FeatureSections, SortOrder = 2, IsEnabled = true },
                new() { Type = SectionType.MemberLogos, SortOrder = 3, IsEnabled = true }
            };
        }
        finally
        {
            loading = false;
        }
    }

    private string GetHeroBannerUrl()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
        return heroBanner != null ? heroBanner.Url : "images/hero/konsortiet_hero.jpg";
    }

    private string GetHeroBannerAlt()
    {
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
        return heroBanner != null ? heroBanner.AltText.Substring(5) : "KronoX konsortiet";
    }

    private string GetEnhancedContent(FeatureSectionViewModel featureItem)
    {
        var content = featureItem.Content; // Publikt innehåll

        // Lägg till medlemsinformation endast för inloggade användare
        if (isLoggedIn && featureItem.HasPrivateContent)
        {
            // Lägg till privat textinnehåll
            if (!string.IsNullOrEmpty(featureItem.PrivateContent))
            {
                content += featureItem.PrivateContent;
            }

            // Lägg till kontaktrubrik och kontakter
            if (featureItem.ContactPersons.Any())
            {
                if (!string.IsNullOrEmpty(featureItem.ContactHeading))
                {
                    content += $"<h4 class='mt-4 mb-3 fw-bold'>{featureItem.ContactHeading}</h4>";
                }

                foreach (var contact in featureItem.ContactPersons)
                {
                    if (string.IsNullOrEmpty(contact.Name)) continue;

                    var contactInfo = $"<div class='contact-enhanced py-2 ps-3 mb-3'>";

                    contactInfo += $"<div class='fw-semibold mb-1'>{contact.Name}";
                    if (!string.IsNullOrEmpty(contact.Organization))
                    {
                        contactInfo += $" <span class='text-muted'>({contact.Organization})</span>";
                    }
                    contactInfo += "</div>";

                    // Visa e-post för medlemmar
                    if (!string.IsNullOrEmpty(contact.Email))
                    {
                        contactInfo += $"<div class='text-muted small ms-3 mb-1'>" +
                                      $"<i class='fa-solid fa-envelope me-1'></i>" +
                                      $"<a href='mailto:{contact.Email}' class='text-decoration-none'>{contact.Email}</a></div>";
                    }

                    // Visa telefon för medlemmar
                    if (!string.IsNullOrEmpty(contact.Phone))
                    {
                        contactInfo += $"<div class='text-muted small ms-3 mb-1'>" +
                                      $"<i class='fa-solid fa-phone me-1'></i>{contact.Phone}</div>";
                    }

                    contactInfo += "</div>";
                    content += contactInfo;
                }
            }
        }

        return content;
    }

    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;

    // Hämta institution URL för givet institutionsnamn
    private string GetInstitutionUrl(string institutionName)
    {
        return institutionUrls.TryGetValue(institutionName, out var url) ? url : "";
    }

    // Kontrollera om detta är medlemssektionen för speciell formatering
    private bool IsMembersSection(string title)
    {
        return title.Contains("medlemmar", StringComparison.OrdinalIgnoreCase) ||
               title.Contains("konsortiet", StringComparison.OrdinalIgnoreCase);
    }
}