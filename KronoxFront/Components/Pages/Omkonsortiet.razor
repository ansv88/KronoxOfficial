@page "/omkonsortiet"
@using System.Text.Json
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using KronoxFront.Components.Shared
@inject CmsService Cms
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthState
@inject ILogger<Omkonsortiet> Logger

<HeadContent>
    <meta name="description" content="Läs om KronoX-konsortiet - en sammanslutning av svenska högskolor och universitet för utveckling av schemaläggningssystem." />
</HeadContent>

<PageTitle>KronoX - Om konsortiet</PageTitle>
<h1 class="visually-hidden">Om konsortiet</h1>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
    </div>
}
else
{
        var heroBanner = pageContent.Images?.FirstOrDefault(i => i.AltText.StartsWith("hero:"));
        var heroBannerUrl = heroBanner != null ? heroBanner.Url : "images/hero/konsortiet_hero.jpg";
        var heroBannerAlt = heroBanner != null ? heroBanner.AltText.Substring(5) : "KronoX konsortiet";

    <PageHeroBanner ImageUrl="@heroBannerUrl" AltText="@heroBannerAlt" 
                    IsAdmin="@isAdmin" PageKey="omkonsortiet" />

    @if (!string.IsNullOrEmpty(introSection.BreadcrumbTitle))
    {
        <PageBreadcrumb Title="@introSection.BreadcrumbTitle" />
    }

    <IntroSection Model="@introSection" OnImageClick="@ShowImage" />

    @if (introSection.ShowNavigationButtons && introSection.NavigationButtons.Any())
    {
        <NavigationButtons Buttons="@introSection.NavigationButtons" />
    }

    <div class="wrapper-div py-3">
        @* ---------- Feature Sections ---------------------------------------- *@
        @if (featureSections.Count > 0)
        {
            <section class="container mt-4 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                <div style="max-width:800px; margin: 0 auto;">
                    @foreach (var (featureItem, index) in featureSections.Select((s, i) => (s, i)))
                    {
                        <div class="feature-section row align-items-center mb-5">
                            @if (featureItem.HasImage)
                            {
                                <div class="col-md-4 mb-3 mb-md-0">
                                    @if (!string.IsNullOrEmpty(featureItem.ImageUrl))
                                    {
                                        <img src="@featureItem.ImageUrl"
                                        class="img-thumbnail feature-thumb w-100"
                                        style="cursor:pointer"
                                        alt="@(!string.IsNullOrEmpty(featureItem.ImageAltText) ? featureItem.ImageAltText : $"Bild för {featureItem.Title}")"
                                        @onclick="() => ShowImage(featureItem.ImageUrl)" />
                                    }
                                    else
                                    {
                                        <div class="bg-light p-4 text-center rounded">
                                            <i class="fa-solid fa-image text-muted fa-3x"></i>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-8">
                                    @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                    {
                                        <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                    }
                                    @* Visa dynamiskt innehåll med integrerad kontaktinformation *@
                                    <div>@((MarkupString)GetEnhancedContent(featureItem))</div>
                                </div>
                            }
                            else
                            {
                                <div class="col-12 text-center">
                                    @if (!string.IsNullOrWhiteSpace(featureItem.Title))
                                    {
                                        <h3 class="mb-4 fw-bold">@featureItem.Title</h3>
                                    }
                                    @* Visa dynamiskt innehåll med integrerad kontaktinformation *@
                                    <div>@((MarkupString)GetEnhancedContent(featureItem))</div>
                                </div>
                            }
                        </div>

                        @if (index < featureSections.Count - 1)
                        {
                            <div class="divider"></div>
                        }
                    }
                </div>
            </section>
        }
        else
        {
            <section class="container mt-4 my-5 py-5 bg-white rounded-3" style="max-width:1000px">
                <div style="max-width:800px; margin: 0 auto;">
                    <div class="text-center text-muted">
                        <p>Innehållet laddas...</p>
                        @if (isAdmin)
                        {
                            <p><a href="/admin/omkonsortiet" class="btn btn-primary">Lägg till innehåll</a></p>
                        }
                    </div>
                </div>
            </section>
        }

        @* ---------- Bildkarusell medlemmar ------------------------------------------- *@
        <MemberLogosSection Title="Våra medlemmar:" IsDarkBackground="true" />
    </div>

    <ImageModal ImageUrl="@activeImage" OnClose="@CloseModal" />
}

<style>
    .contact-entry {
        margin-bottom: 0.75rem;
    }

    .contact-name {
        margin-bottom: 0.25rem;
    }

    .contact-detail {
        margin-left: 1rem;
        margin-bottom: 0.15rem;
    }

    .contact-detail.member-only {
        font-style: italic;
    }

    .integrated-contacts {
        margin-top: 1rem;
    }

    .contact-enhanced {
        padding: 0.5rem 0;
        border-left: 3px solid #e9ecef;
        padding-left: 1rem;
        margin-bottom: 1rem;
    }
</style>

@code {
    private PageContentViewModel pageContent = new();
    private bool loading = true;
    private bool isAdmin = false;
    private bool isLoggedIn = false;
    private string? activeImage;
    private IntroSectionViewModel introSection = new();
    private List<FeatureSectionViewModel> featureSections = new();
    private List<MemberLogoViewModel> memberLogos = new();

    // Institution URL mapping för medlemslärosäten
    private readonly Dictionary<string, string> institutionUrls = new(StringComparer.OrdinalIgnoreCase)
    {
        { "Högskolan i Borås", "https://www.hb.se" },
        { "Högskolan i Gävle", "https://www.hig.se" },
        { "Högskolan Kristianstad", "https://www.hkr.se" },
        { "Högskolan Väst", "https://www.hv.se" },
        { "Johannelunds teologiska högskola", "https://www.jth.se" },
        { "Konstfack", "https://www.konstfack.se" },
        { "Luleå tekniska universitet", "https://www.ltu.se" },
        { "Malmö universitet", "https://www.mau.se" },
        { "Mälardalens universitet", "https://www.mdu.se" },
        { "Södertörns högskola", "https://www.sh.se" },
        { "Örebro universitet", "https://www.oru.se" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initCarousel");
            await JS.InvokeVoidAsync("initFeatureImageClicks");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        isLoggedIn = authState.User.Identity?.IsAuthenticated == true;
        loading = true;

        try
        {
            pageContent = await Cms.GetPageContentAsync("omkonsortiet") ?? new PageContentViewModel
            {
                PageKey = "omkonsortiet",
                Title = "Om konsortiet",
                HtmlContent = "",
                LastModified = DateTime.Now,
                Images = new List<PageImageViewModel>()
            };

            memberLogos = await Cms.GetMemberLogosAsync();
            introSection = await Cms.GetIntroSectionAsync("omkonsortiet");
            
            // Hämta med privat innehåll bara för inloggade
            featureSections = await Cms.GetFeatureSectionsAsync("omkonsortiet", includePrivate: isLoggedIn);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inläsning av Om konsortiet-sidan: {Message}", ex.Message);
            
            introSection = new IntroSectionViewModel();
            featureSections = new List<FeatureSectionViewModel>();
        }
        finally
        {
            loading = false;
        }
    }

    private string GetEnhancedContent(FeatureSectionViewModel featureItem)
    {
        var content = featureItem.Content; // Publikt innehåll

        // Lägg till medlemsinformation endast för inloggade användare
        if (isLoggedIn && featureItem.HasPrivateContent)
        {
            // Lägg till privat textinnehåll
            if (!string.IsNullOrEmpty(featureItem.PrivateContent))
            {
                content += featureItem.PrivateContent;
            }

            // Lägg till kontaktrubrik och kontakter
            if (featureItem.ContactPersons.Any())
            {
                if (!string.IsNullOrEmpty(featureItem.ContactHeading))
                {
                    content += $"<h4 class='mt-4 mb-3 fw-bold'>{featureItem.ContactHeading}</h4>";
                }

                foreach (var contact in featureItem.ContactPersons)
                {
                    if (string.IsNullOrEmpty(contact.Name)) continue;

                    var contactInfo = $"<div class='contact-enhanced mb-2'>";

                    // Visa alltid namn och organisation för medlemmar
                    contactInfo += $"<div class='fw-semibold'>{contact.Name}";
                    if (!string.IsNullOrEmpty(contact.Organization))
                    {
                        contactInfo += $" <span class='text-muted'>({contact.Organization})</span>";
                    }
                    contactInfo += "</div>";

                    // Visa e-post för medlemmar
                    if (!string.IsNullOrEmpty(contact.Email))
                    {
                        contactInfo += $"<div class='text-muted small ms-3'>" +
                                      $"<i class='fa-solid fa-envelope me-1'></i>" +
                                      $"<a href='mailto:{contact.Email}' class='text-decoration-none'>{contact.Email}</a></div>";
                    }

                    // Visa telefon för medlemmar
                    if (!string.IsNullOrEmpty(contact.Phone))
                    {
                        contactInfo += $"<div class='text-muted small ms-3'>" +
                                      $"<i class='fa-solid fa-phone me-1'></i>{contact.Phone}</div>";
                    }

                    contactInfo += "</div>";
                    content += contactInfo;
                }
            }
        }

        return content;
    }

    private void ShowImage(string imageUrl)
    {
        activeImage = imageUrl;
    }

    private void CloseModal() => activeImage = null;

    // Hämta institution URL för givet institutionsnamn
    private string GetInstitutionUrl(string institutionName)
    {
        return institutionUrls.TryGetValue(institutionName, out var url) ? url : "";
    }

    // Kontrollera om detta är medlemssektionen för speciell formatering
    private bool IsMembersSection(string title)
    {
        return title.Contains("medlemmar", StringComparison.OrdinalIgnoreCase) ||
               title.Contains("konsortiet", StringComparison.OrdinalIgnoreCase);
    }
}