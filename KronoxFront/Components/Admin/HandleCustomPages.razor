@page "/admin/pages"
@using KronoxFront.ViewModels
@using KronoxFront.Extensions
@using KronoxFront.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using KronoxFront.Validators
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject IHttpClientFactory HttpClientFactory
@inject IToastService Toast
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ILogger<HandleCustomPages> Logger
@inject NavigationEvents NavEvents

<HeadContent>
    <meta name="description" content="Hantera anpassade sidor för KronoX-webbplatsen" />
</HeadContent>

<PageTitle>Admin - Hantera sidor</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3">Hantera anpassade sidor</h1>
                    <p class="text-muted">Skapa och hantera egna sidor med valfria sektioner</p>
                </div>
                <button type="button" class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="fa-solid fa-plus me-1"></i>
                    Skapa ny sida
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laddar...</span>
                    </div>
                </div>
            }
            else if (!customPages.Any())
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fa-solid fa-file-plus fa-3x text-muted mb-3"></i>
                        <h4>Inga anpassade sidor</h4>
                        <p class="text-muted">Skapa din första anpassade sida genom att klicka på knappen ovan.</p>
                        <button type="button" class="btn btn-primary" @onclick="ShowCreateModal">
                            <i class="fa-solid fa-plus me-1"></i>
                            Skapa första sidan
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var customPage in customPages.OrderBy(p => p.SortOrder).ThenBy(p => p.DisplayName))
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 @(customPage.IsActive ? "" : "border-secondary")">
                                <div class="card-header d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h5 class="card-title mb-1 @(customPage.IsActive ? "" : "text-muted")">
                                            @customPage.DisplayName
                                        </h5>
                                        <small class="text-muted">/@customPage.PageKey</small>
                                    </div>
                                    <div class="d-flex flex-column align-items-end gap-1">
                                        @if (customPage.IsActive)
                                        {
                                            <span class="badge bg-success">Aktiv</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inaktiv</span>
                                        }
                                        
                                        @* Förbättrad visning av navigationstyp *@
                                        @if (customPage.NavigationType == "hidden" || !customPage.ShowInNavigation)
                                        {
                                            <span class="badge bg-secondary" title="Sidan är dold från navigation men tillgänglig via direktlänk">
                                                <i class="fa-solid fa-eye-slash fa-xs me-1"></i>
                                                Dold från navigation
                                            </span>
                                        }
                                        else if (customPage.ShowInNavigation)
                                        {
                                            <span class="badge bg-info">I navigation</span>
                                        }
                                        
                                        @if (customPage.RequiredRoles.Any())
                                        {
                                            <span class="badge bg-warning text-dark">Begränsad</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Publik</span>
                                        }
                                    </div>
                                </div>
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(customPage.Description))
                                    {
                                        <p class="card-text text-muted small">@customPage.Description</p>
                                    }
                                    
                                    @* Förbättrad visuell indikator för dolda sidor *@
                                    @if (customPage.NavigationType == "hidden" || !customPage.ShowInNavigation)
                                    {
                                        <div class="alert alert-info py-2 mb-3">
                                            <small>
                                                <i class="fa-solid fa-info-circle me-1"></i>
                                                <strong>Dold sida:</strong> Tillgänglig endast via direktlänk /@customPage.PageKey
                                            </small>
                                        </div>
                                    }
                                    
                                    <div class="small mb-3">
                                        <div class="row">
                                            <div class="col-6">
                                                <strong>Typ:</strong><br>
                                                <span class="text-muted">@GetNavigationTypeText(customPage.NavigationType)</span>
                                            </div>
                                            <div class="col-6">
                                                <strong>Ordning:</strong><br>
                                                <span class="text-muted">#@customPage.SortOrder</span>
                                            </div>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(customPage.ParentPageKey))
                                        {
                                            <div class="mt-2">
                                                <strong>Överordnad:</strong><br>
                                                <span class="text-muted">@GetParentPageDisplayName(customPage.ParentPageKey)</span>
                                            </div>
                                        }
                                        
                                        <div class="mt-2">
                                            <strong>Behörighet:</strong><br>
                                            @if (customPage.RequiredRoles.Any())
                                            {
                                                <span class="text-muted">@string.Join(", ", customPage.RequiredRoles)</span>
                                            }
                                            else
                                            {
                                                <span class="text-success fw-bold">Publik</span>
                                            }
                                        </div>
                                    </div>

                                    <div class="small text-muted">
                                        Skapad: @customPage.CreatedAt.ToString("yyyy-MM-dd")<br>
                                        Av: @customPage.CreatedBy
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group" role="group">
                                            <button type="button" 
                                                    class="btn btn-outline-secondary btn-sm" 
                                                    @onclick="() => MovePage(customPage, -1)"
                                                    disabled="@(customPage.SortOrder == 0)"
                                                    title="Flytta upp">
                                                <i class="fa-solid fa-arrow-up"></i>
                                            </button>
                                            <button type="button" 
                                                    class="btn btn-outline-secondary btn-sm" 
                                                    @onclick="() => MovePage(customPage, 1)"
                                                    title="Flytta ner">
                                                <i class="fa-solid fa-arrow-down"></i>
                                            </button>
                                        </div>
                                        
                                        <div class="btn-group w-50" role="group">
                                            <a href="@($"/{customPage.PageKey}")" 
                                               class="btn btn-outline-secondary btn-sm" 
                                               target="_blank"
                                               title="Visa sida">
                                                <i class="fa-solid fa-eye"></i>
                                            </a>

                                            <a href="@($"/admin/page/{customPage.PageKey}")" 
                                               class="btn btn-outline-primary btn-sm"
                                               title="Redigera innehåll">
                                                <i class="fa-solid fa-edit"></i>
                                            </a>
                                            <button type="button" 
                                                    class="btn btn-outline-info btn-sm" 
                                                    @onclick="() => EditPageSettings(customPage)"
                                                    title="Redigera inställningar">
                                                <i class="fa-solid fa-cog"></i>
                                            </button>
                                            <button type="button" 
                                                    class="btn btn-outline-danger btn-sm" 
                                                    @onclick="() => DeletePage(customPage)"
                                                    title="Ta bort sida">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@* Create Page Modal *@
@if (showCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fa-solid fa-plus me-2"></i>
                        Skapa ny sida
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
                </div>
                <EditForm Model="@newPage" OnValidSubmit="@CreatePage">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">URL*</label>
                                    <InputText class="form-control" @bind-Value="newPage.PageKey" 
                                               @oninput="OnPageKeyInput"
                                               placeholder="min-nya-sida" />
                                    <div class="form-text">
                                        Används i URL:en (t.ex. /min-nya-sida). 
                                        Endast små bokstäver, siffror och bindestreck.
                                    </div>
                                    <ValidationMessage For="() => newPage.PageKey" class="text-danger small" />
                                    
                                    @if (pageKeySuggestions.Any())
                                    {
                                        <div class="alert alert-warning mt-2">
                                            <small>
                                                <strong>Förslag på alternativa namn:</strong><br>
                                                @foreach (var suggestion in pageKeySuggestions)
                                                {
                                                    <button type="button" class="btn btn-link btn-sm p-0 me-2" 
                                                            @onclick="() => UseSuggestion(suggestion)">
                                                        @suggestion
                                                    </button>
                                                }
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Visningstitel*</label>
                                    <InputText class="form-control" @bind-Value="newPage.DisplayName" 
                                               placeholder="Min nya sida" />
                                    <div class="form-text">Visas i navigation och som sidrubrik.</div>
                                    <ValidationMessage For="() => newPage.DisplayName" class="text-danger small" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">Sidtitel (för webbläsare)*</label>
                            <InputText class="form-control" @bind-Value="newPage.Title" 
                                       placeholder="Min nya sida - KronoX" />
                            <div class="form-text">Visas i webbläsarens flik och för sökmotorer.</div>
                            <ValidationMessage For="() => newPage.Title" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">Beskrivning</label>
                            <InputTextArea class="form-control" @bind-Value="newPage.Description" 
                                           rows="3" placeholder="Beskriv vad denna sida handlar om..." />
                            <ValidationMessage For="() => newPage.Description" class="text-danger small" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Navigationstyp</label>
                                    <InputSelect class="form-select mb-3" @bind-Value="newPage.NavigationType" @onchange="OnNavigationTypeChanged">
                                        <option value="main">Huvudnavigation</option>
                                        <option value="dropdown">Dropdown-meny</option>
                                        <option value="hidden">Dold (endast direktlänk)</option>
                                    </InputSelect>
                                    <div class="form-text">
                                        @if (newPage.NavigationType == "hidden")
                                        {
                                            <text><strong>Dold:</strong> Sidan är tillgänglig via direktlänk men visas inte i navigation.</text>
                                        }
                                        else
                                        {
                                            <text>Bestämmer var länken visas på webbplatsen.</text>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Sorteringsordning</label>
                                    <InputNumber class="form-control" @bind-Value="newPage.SortOrder" 
                                                 min="0" max="99" 
                                                 disabled="@(newPage.NavigationType == "hidden")" />
                                    <div class="form-text">
                                        @if (newPage.NavigationType == "hidden")
                                        {
                                            <text>Dolda sidor behöver ingen sorteringsordning.</text>
                                        }
                                        else
                                        {
                                            <text>Lägre nummer visas först i navigation.</text>
                                        }
                                    </div>
                                    <ValidationMessage For="() => newPage.SortOrder" class="text-danger small" />
                                </div>
                            </div>
                        </div>

                        @if (newPage.NavigationType == "dropdown")
                        {
                            <div class="mb-3">
                                <label class="form-label fw-medium">Överordnad sida</label>
                                <InputSelect class="form-select" @bind-Value="newPage.ParentPageKey">
                                    <option value="">Välj överordnad sida...</option>
                                    @foreach (var parentOption in GetParentPageOptions())
                                    {
                                        <option value="@parentOption.Key">@parentOption.Value</option>
                                    }
                                </InputSelect>
                                <div class="form-text">Sidan kommer att visas som undermeny till den valda sidan.</div>
                            </div>
                        }

                        @* Varning för dolda sidor *@
                        @if (newPage.NavigationType == "hidden")
                        {
                            <div class="alert alert-warning mb-3">
                                <div class="d-flex align-items-start">
                                    <i class="fa-solid fa-eye-slash fa-lg me-3 mt-1"></i>
                                    <div>
                                        <h6 class="mb-1">Dold sida</h6>
                                        <p class="mb-0 small">
                                            Denna sida kommer att vara tillgänglig via direktlänken <strong>/@(string.IsNullOrEmpty(newPage.PageKey) ? "sidans-url" : newPage.PageKey)</strong> 
                                            men kommer inte att visas i någon navigation eller footer. 
                                            Du kan länka till den från andra sidor eller dela länken direkt.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" @bind-Value="newPage.IsActive" />
                                    <label class="form-check-label fw-medium">Aktiv sida</label>
                                    <div class="form-text">Om sidan är aktiv eller inte. Inaktiva sidor kan inte besökas av användare.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" 
                                                   @bind-Value="newPage.ShowInNavigation" 
                                                   disabled="@(newPage.NavigationType == "hidden")" />
                                    <label class="form-check-label fw-medium">Visa i navigation</label>
                                    <div class="form-text">
                                        @if (newPage.NavigationType == "hidden")
                                        {
                                            <text>Dolda sidor visas aldrig i navigation.</text>
                                        }
                                        else
                                        {
                                            <text>Avgör om sidan ska synas i navigationsmenyn eller bara vara tillgänglig via direktlänk.</text>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">Behörigheter</label>
                            <div class="form-text mb-3">Välj vilka roller som ska kunna se denna sida:</div>
                            
                            <div class="card border-success mb-3">
                                <div class="card-body p-3">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" 
                                               @onchange="@((e) => TogglePublicAccess((bool)e.Value!))" 
                                               checked="@(!newPage.RequiredRoles.Any())" />
                                        <label class="form-check-label fw-bold text-success d-flex align-items-center">
                                            <i class="fa-solid fa-globe me-2"></i>
                                            Publik (alla användare)
                                        </label>
                                        <div class="form-text">Sidan är tillgänglig för alla besökare, både inloggade och anonyma.</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card border-warning">
                                <div class="card-header bg-light">
                                    <small class="fw-medium text-muted">
                                        <i class="fa-solid fa-lock me-1"></i>
                                        Begränsa till specifika roller
                                    </small>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @foreach (var role in availableRoles)
                                        {
                                            <div class="col-md-4 col-6">
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" 
                                                           @onchange="@((e) => ToggleRole(role, (bool)e.Value!))" 
                                                           checked="@newPage.RequiredRoles.Contains(role)"
                                                           disabled="@(!newPage.RequiredRoles.Any())" />
                                                    <label class="form-check-label">@role</label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="form-text mt-2">Endast användare med dessa roller kan se sidan.</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">
                            <i class="fa-solid fa-times me-1"></i>
                            Avbryt
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isCreating">
                            @if (isCreating)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <text>Skapar...</text>
                            }
                            else
                            {
                                <i class="fa-solid fa-plus me-1"></i>
                                <text>Skapa sida</text>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@* Edit Settings Modal - Samma förbättringar här *@
@if (showEditModal && editingPage != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fa-solid fa-cog me-2"></i>
                        Redigera inställningar - @editingPage.DisplayName
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideEditModal"></button>
                </div>
                <EditForm Model="@editingPage" OnValidSubmit="@UpdatePage">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fa-solid fa-info-circle me-2"></i>
                            <strong>Observera:</strong> URL kan inte ändras efter att sidan skapats.
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">URL</label>
                            <input type="text" class="form-control" value="@editingPage.PageKey" disabled />
                            <div class="form-text">URL kan inte ändras efter att sidan skapats.</div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Visningstitel*</label>
                                    <InputText class="form-control" @bind-Value="editingPage.DisplayName" />
                                    <ValidationMessage For="() => editingPage.DisplayName" class="text-danger small" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Sidtitel*</label>
                                    <InputText class="form-control" @bind-Value="editingPage.Title" />
                                    <ValidationMessage For="() => editingPage.Title" class="text-danger small" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">Beskrivning</label>
                            <InputTextArea class="form-control" @bind-Value="editingPage.Description" rows="3" />
                            <ValidationMessage For="() => editingPage.Description" class="text-danger small" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Navigationstyp</label>
                                    <InputSelect class="form-select mb-3" @bind-Value="editingPage.NavigationType" @onchange="OnEditNavigationTypeChanged">
                                        <option value="main">Huvudnavigation</option>
                                        <option value="dropdown">Dropdown-meny</option>
                                        <option value="hidden">Dold (endast direktlänk)</option>
                                    </InputSelect>
                                    <div class="form-text">
                                        @if (editingPage.NavigationType == "hidden")
                                        {
                                            <text><strong>Dold:</strong> Sidan är tillgänglig via direktlänk men visas inte i navigation.</text>
                                        }
                                        else
                                        {
                                            <text>Bestämmer var länken visas på webbplatsen.</text>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Sorteringsordning</label>
                                    <InputNumber class="form-control" 
                                                 @bind-Value="editingPage.SortOrder" 
                                                 disabled="@(editingPage.NavigationType == "hidden")" />
                                    <div class="form-text">
                                        @if (editingPage.NavigationType == "hidden")
                                        {
                                            <text>Dolda sidor behöver ingen sorteringsordning.</text>
                                        }
                                        else
                                        {
                                            <text>Lägre nummer visas först i navigation.</text>
                                        }
                                    </div>
                                    <ValidationMessage For="() => editingPage.SortOrder" class="text-danger small" />
                                </div>
                            </div>
                        </div>

                        @if (editingPage.NavigationType == "dropdown")
                        {
                            <div class="mb-3">
                                <label class="form-label fw-medium">Överordnad sida</label>
                                <InputSelect class="form-select" @bind-Value="editingPage.ParentPageKey">
                                    <option value="">Välj överordnad sida...</option>
                                    @foreach (var parentOption in GetParentPageOptions())
                                    {
                                        <option value="@parentOption.Key">@parentOption.Value</option>
                                    }
                                </InputSelect>
                                <div class="form-text">Sidan kommer att visas som undermeny till den valda sidan.</div>
                            </div>
                        }

                        @* Varning för dolda sidor *@
                        @if (editingPage.NavigationType == "hidden")
                        {
                            <div class="alert alert-warning mb-3">
                                <div class="d-flex align-items-start">
                                    <i class="fa-solid fa-eye-slash fa-lg me-3 mt-1"></i>
                                    <div>
                                        <h6 class="mb-1">Dold sida</h6>
                                        <p class="mb-0 small">
                                            Denna sida är tillgänglig via direktlänken <strong>/@editingPage.PageKey</strong> 
                                            men visas inte i någon navigation eller footer.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" @bind-Value="editingPage.IsActive" />
                                    <label class="form-check-label fw-medium">Aktiv sida</label>
                                    <div class="form-text">Om sidan är aktiv eller inte. Inaktiva sidor kan inte besökas av användare.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" 
                                                   @bind-Value="editingPage.ShowInNavigation" 
                                                   disabled="@(editingPage.NavigationType == "hidden")" />
                                    <label class="form-check-label fw-medium">Visa i navigation</label>
                                    <div class="form-text">
                                        @if (editingPage.NavigationType == "hidden")
                                        {
                                            <text>Dolda sidor visas aldrig i navigation.</text>
                                        }
                                        else
                                        {
                                            <text>Avgör om sidan ska synas i navigationsmenyn eller bara vara tillgänglig via direktlänk.</text>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-medium">Behörigheter</label>
                            <div class="form-text mb-3">Välj vilka roller som ska kunna se denna sida:</div>
                            
                            <div class="card border-success mb-3">
                                <div class="card-body p-3">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" 
                                               @onchange="@((e) => TogglePublicAccessForEdit((bool)e.Value!))" 
                                               checked="@(!editingPage.RequiredRoles.Any())" />
                                        <label class="form-check-label fw-bold text-success d-flex align-items-center">
                                            <i class="fa-solid fa-globe me-2"></i>
                                            Publik (alla användare)
                                        </label>
                                        <div class="form-text">Sidan är tillgänglig för alla besökare, både inloggade och anonyma.</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card border-warning">
                                <div class="card-header bg-light">
                                    <small class="fw-medium text-muted">
                                        <i class="fa-solid fa-lock me-1"></i>
                                        Begränsa till specifika roller
                                    </small>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @foreach (var role in availableRoles)
                                        {
                                            <div class="col-md-4 col-6">
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" 
                                                           @onchange="@((e) => ToggleRoleForEdit(role, (bool)e.Value!))" 
                                                           checked="@editingPage.RequiredRoles.Contains(role)"
                                                           disabled="@(!editingPage.RequiredRoles.Any())" />
                                                    <label class="form-check-label">@role</label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="form-text mt-2">Endast användare med dessa roller kan se sidan.</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideEditModal">
                            <i class="fa-solid fa-times me-1"></i>
                            Avbryt
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                            @if (isUpdating)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <text>Sparar...</text>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1"></i>
                                <text>Spara ändringar</text>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<CustomPageViewModel> customPages = new();
    private CustomPageViewModel newPage = new();
    private CustomPageViewModel? editingPage;
    private List<string> availableRoles = new() { "Admin", "Styrelse", "Medlem" };
    
    private bool isLoading = true;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool isCreating = false;
    private bool isUpdating = false;
    private List<string> pageKeySuggestions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomPages();
    }

    private async Task LoadCustomPages()
    {
        isLoading = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            var response = await httpClient.GetAsync("api/custompage");
            
            if (response.IsSuccessStatusCode)
            {
                var dtos = await response.Content.ReadFromJsonAsync<List<KronoxFront.DTOs.CustomPageDto>>();
                customPages = dtos?.ToViewModels() ?? new();
            }
            else
            {
                Logger.LogError("Fel vid hämtning av custom pages: {StatusCode}", response.StatusCode);
                await Toast.Error("Kunde inte ladda sidor");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid hämtning av anpassade sidor");
            await Toast.Error("Kunde inte ladda sidor");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        newPage = new CustomPageViewModel 
        { 
            IsActive = true, 
            ShowInNavigation = true,
            NavigationType = "main",
            SortOrder = customPages.Count > 0 ? customPages.Max(p => p.SortOrder) + 1 : 0
        };
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
        newPage = new();
    }

    private void EditPageSettings(CustomPageViewModel page)
    {
        editingPage = new CustomPageViewModel
        {
            Id = page.Id,
            PageKey = page.PageKey,
            Title = page.Title,
            DisplayName = page.DisplayName,
            Description = page.Description,
            IsActive = page.IsActive,
            ShowInNavigation = page.ShowInNavigation,
            NavigationType = page.NavigationType,
            ParentPageKey = page.ParentPageKey,
            SortOrder = page.SortOrder,
            RequiredRoles = new List<string>(page.RequiredRoles)
        };
        showEditModal = true;
    }

    private void HideEditModal()
    {
        showEditModal = false;
        editingPage = null;
    }

    // Hantera ändringar av navigationstyp
    private void OnNavigationTypeChanged(ChangeEventArgs e)
    {
        var selectedType = e.Value?.ToString() ?? "main";
        newPage.NavigationType = selectedType;
        
        if (selectedType == "hidden")
        {
            newPage.ShowInNavigation = false;
            newPage.SortOrder = 0; // Dolda sidor behöver ingen ordning
        }
        else
        {
            newPage.ShowInNavigation = true;
            if (newPage.SortOrder == 0)
            {
                newPage.SortOrder = customPages.Count > 0 ? customPages.Max(p => p.SortOrder) + 1 : 1;
            }
        }

        // Nollställ ParentPageKey när sidan inte längre ska vara dropdown
        if (selectedType != "dropdown")
        {
            newPage.ParentPageKey = null;
        }
        
        StateHasChanged();
    }

    // Hantera ändringar av navigationstyp i edit-modal
    private void OnEditNavigationTypeChanged(ChangeEventArgs e)
    {
        if (editingPage == null) return;
        
        var selectedType = e.Value?.ToString() ?? "main";
        editingPage.NavigationType = selectedType;
        
        if (selectedType == "hidden")
        {
            editingPage.ShowInNavigation = false;
            editingPage.SortOrder = 0;
        }
        else
        {
            editingPage.ShowInNavigation = true;
            if (editingPage.SortOrder == 0)
            {
                editingPage.SortOrder = customPages.Count > 0 ? customPages.Max(p => p.SortOrder) + 1 : 1;
            }
        }

        // Nollställ ParentPageKey när sidan inte längre ska vara dropdown
        if (selectedType != "dropdown")
        {
            editingPage.ParentPageKey = null;
        }
        
        StateHasChanged();
    }

    private async Task CreatePage()
    {
        isCreating = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            
            var response = await httpClient.PostAsJsonAsync("api/custompage", newPage.ToCreateRequest());
            
            if (response.IsSuccessStatusCode)
            {
                var created = await response.Content.ReadFromJsonAsync<KronoxFront.DTOs.CustomPageDto>();
                var pageKey = created?.PageKey ?? newPage.PageKey;

                await Toast.Success("Sida skapad framgångsrikt!");

                HideCreateModal();
                await LoadCustomPages();

                NavEvents.NotifyUpdated();

                if (!string.IsNullOrWhiteSpace(pageKey))
                {
                    Nav.NavigateTo($"/admin/page/{pageKey}");
                }
                else
                {
                    Nav.NavigateTo("/admin/pages");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError("Fel vid skapande av sida: {Error}", error);
                await Toast.Error($"Fel vid skapande: {error}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid skapande av sida");
            await Toast.Error("Ett fel uppstod vid skapande av sidan");
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task UpdatePage()
    {
        if (editingPage == null) return;

        isUpdating = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
           
            var response = await httpClient.PutAsJsonAsync($"api/custompage/{editingPage.PageKey}", editingPage.ToUpdateRequest());
            
            if (response.IsSuccessStatusCode)
            {
                await Toast.Success("Sidinställningar uppdaterade!");
                HideEditModal();
                await LoadCustomPages();

                // signalera att navigationen ska laddas om
                NavEvents.NotifyUpdated();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError("Fel vid uppdatering av sida: {Error}", error);
                await Toast.Error($"Fel vid uppdatering: {error}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av sida");
            await Toast.Error("Ett fel uppstod vid uppdatering av sidan");
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task DeletePage(CustomPageViewModel page)
    {
        var confirmMessage = $"Är du säker på att du vill ta bort sidan '{page.DisplayName}'?\n\nDetta kommer att ta bort:\n- Sidan och allt dess innehåll\n- Alla relaterade sektioner\n- Navigationslänkar\n\nÅtgärden kan inte ångras.";
        
        if (await JS.InvokeAsync<bool>("confirm", confirmMessage))
        {
            try
            {
                var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
                var response = await httpClient.DeleteAsync($"api/custompage/{page.PageKey}");
                
                if (response.IsSuccessStatusCode)
                {
                    await Toast.Success($"Sidan '{page.DisplayName}' har tagits bort");
                    await LoadCustomPages();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Logger.LogError("Fel vid borttagning av sida: {Error}", error);
                    await Toast.Error("Fel vid borttagning av sida");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid borttagning av sida");
                await Toast.Error("Ett fel uppstod vid borttagning");
            }
        }
    }

    private void ToggleRole(string role, bool isChecked)
    {
        if (isChecked && !newPage.RequiredRoles.Contains(role))
        {
            newPage.RequiredRoles.Add(role);
        }
        else if (!isChecked && newPage.RequiredRoles.Contains(role))
        {
            newPage.RequiredRoles.Remove(role);
        }
    }

    private void ToggleRoleForEdit(string role, bool isChecked)
    {
        if (editingPage == null) return;

        if (isChecked && !editingPage.RequiredRoles.Contains(role))
        {
            editingPage.RequiredRoles.Add(role);
        }
        else if (!isChecked && editingPage.RequiredRoles.Contains(role))
        {
            editingPage.RequiredRoles.Remove(role);
        }
    }

    private void TogglePublicAccess(bool isPublic)
    {
        if (isPublic)
        {
            newPage.RequiredRoles.Clear();
        }
        else if (!newPage.RequiredRoles.Any())
        {
            // Om man avmarkerar publik, lägg till Admin som default
            newPage.RequiredRoles.Add("Admin");
        }
    }

    // Metod för att hantera publik access i edit-modal
    private void TogglePublicAccessForEdit(bool isPublic)
    {
        if (editingPage == null) return;

        if (isPublic)
        {
            editingPage.RequiredRoles.Clear();
        }
        else if (!editingPage.RequiredRoles.Any())
        {
            // Om man avmarkerar publik, lägg till Admin som default
            editingPage.RequiredRoles.Add("Admin");
        }
    }

    private string GetParentPageDisplayName(string parentPageKey)
    {
        var parentOptions = GetParentPageOptions();
        return parentOptions.TryGetValue(parentPageKey, out var displayName) 
            ? displayName 
            : parentPageKey;
    }

    private Dictionary<string, string> GetParentPageOptions()
    {
        var options = new Dictionary<string, string>
        {
            { "omkonsortiet", "Om konsortiet" },
            { "omsystemet", "Om systemet" },
            { "visioner", "Visioner & verksamhetsidé" },
            { "dokument", "Dokument" },
            { "kontaktaoss", "Kontakta oss" },
            { "forvaltning", "Förvaltning" },
            { "medlemsnytt", "Medlemsnytt" }
        };

        foreach (var page in customPages.Where(p => p.NavigationType == "main" && p.IsActive))
        {
            if (!options.ContainsKey(page.PageKey))
            {
                options[page.PageKey] = page.DisplayName;
            }
        }

        return options;
    }

    private string GetNavigationTypeText(string navigationType)
    {
        return navigationType switch
        {
            "main" => "Huvudnavigation",
            "dropdown" => "Dropdown",
            "hidden" => "Dold från navigation",
            _ => navigationType
        };
    }

    private async Task MovePage(CustomPageViewModel page, int direction)
    {
        var newSortOrder = page.SortOrder + direction;
        if (newSortOrder < 0) newSortOrder = 0;
        
        // Hitta sida som ska byta plats
        var otherPage = customPages.FirstOrDefault(p => p.SortOrder == newSortOrder && p.Id != page.Id);
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            
            // Uppdatera aktuell sida
            page.SortOrder = newSortOrder;
            await httpClient.PutAsJsonAsync($"api/custompage/{page.PageKey}", page.ToUpdateRequest());
            
            // Uppdatera andra sidan om den finns
            if (otherPage != null)
            {
                otherPage.SortOrder = page.SortOrder - direction;
                await httpClient.PutAsJsonAsync($"api/custompage/{otherPage.PageKey}", otherPage.ToUpdateRequest());
            }
            
            await LoadCustomPages();
            await Toast.Success("Sorteringsordning uppdaterad!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av sorteringsordning");
            await Toast.Error("Fel vid uppdatering av sortering");
        }
    }

    private void OnPageKeyInput(ChangeEventArgs e)
    {
        var pageKey = e.Value?.ToString() ?? "";
        if (!string.IsNullOrEmpty(pageKey) && !PageKeyValidator.IsPageKeyAvailable(pageKey))
        {
            pageKeySuggestions = PageKeyValidator.SuggestAlternatives(pageKey);
        }
        else
        {
            pageKeySuggestions.Clear();
        }
    }

    private void UseSuggestion(string suggestion)
    {
        newPage.PageKey = suggestion;
        pageKeySuggestions.Clear();
    }
}