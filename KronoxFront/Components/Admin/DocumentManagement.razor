@page "/admin/documents/manage"
@using KronoxFront.Components
@using KronoxFront.Components.Shared.UI
@using KronoxFront.DTOs
@using KronoxFront.Services
@using KronoxFront.ViewModels
@using KronoxFront.ViewModels.Documents
@using KronoxFront.Requests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop.Infrastructure
@inject DocumentService DocumentService
@inject CategoryService CategoryService
@inject CacheService CacheService
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ILogger<DocumentManagement> Logger

@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout

@*
   Teknisk modul för dokumenthantering - uppladdning, kategorier och rollhantering.
   Denna sida är separerad från CMS-hanteringen av publika dokument-sidan.
*@

<HeadContent>
    <meta name="description" content="Hantera dokument och kategorier i KronoX. Ladda upp, redigera och ta bort filer samt organisera dokumentarkivet." />
</HeadContent>

<PageTitle>KronoX - Dokumenthantering</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">
            <i class="fa-solid fa-file-alt me-2"></i>Hantera dokument
        </h1>
        <div>
            <a href="/admin/page/dokument" class="btn btn-outline-secondary me-2">
                <i class="fa-solid fa-edit me-1"></i> Redigera Dokument-sidan
            </a>
            <a href="/dokument" class="btn btn-outline-secondary">
                <i class="fa-solid fa-eye me-1"></i> Visa publika sidan
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Uppladdning -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header"><h2 class="h5">Ladda upp dokument</h2></div>
                <div class="card-body">
                    <EditForm Model="uploadModel" OnValidSubmit="UploadDocument">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Filval -->
                        <div class="mb-3">
                            <label for="uploadFile">Dokument</label>
                            <InputFile OnChange="OnInputFileChange"
                                       id="uploadFile"
                                       accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt"
                                       class="form-control" />
                            <ValidationMessage For="() => uploadModel.File" />
                            @if (selectedFile != null)
                            {
                                <div class="mt-1">@selectedFile.Name</div>
                            }
                        </div>

                        <!-- Huvudkategorier (obligatoriskt) -->
                        <div class="mb-3">
                            <label class="fw-bold" for="mainCategorySelectUpload">
                                Huvudkategorier <span class="text-danger">*</span>
                            </label>
                            <small class="text-muted d-block mb-2">
                                <span class="text-danger">*</span> Minst en huvudkategori krävs.
                            </small>
                            <div class="d-flex flex-wrap gap-2">
                                <select class="form-select" id="mainCategorySelectUpload"
                                @bind="uploadModel.SelectedMainCategoryId">
                                    <option value="">-- Välj kategori --</option>
                                    @foreach (var mainCategory in mainCategoryDtos)
                                    {
                                        <option value="@mainCategory.Id">
                                            @mainCategory.Name (@string.Join(", ", mainCategory.AllowedRoles))
                                        </option>
                                    }
                                </select>
                                <ValidationMessage For="() => uploadModel.SelectedMainCategoryId" />
                            </div>
                        </div>

                        <!-- Underkategorier (valfritt) -->
                        <div class="mb-3">
                            <span>Underkategorier (valfritt)</span>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var subCategory in subCategoryDtos)
                                {
                                    <div class="form-check">
                                        <input type="checkbox"
                                        class="form-check-input"
                                               id="subcat-upload-@subCategory.Id"
                                               @onchange="(ChangeEventArgs e) => ToggleCategory(subCategory.Id, e?.Value as bool? == true)" />
                                        <label class="form-check-label" for="subcat-upload-@subCategory.Id">@subCategory.Name</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" disabled="@isUploading">
                                @if (isUploading)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                    <span class="ms-1">Laddar upp…</span>
                                }
                                else
                                {
                                    <text>Ladda upp dokument</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Category Admin med Rollhantering -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h2 class="h5">Hantera kategorier</h2>
                </div>
                <div class="card-body">
                    <EditForm Model="newCategory" OnValidSubmit="AddCategory">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="categoryName">Namn</label>
                            <InputText id="categoryName" @bind-Value="newCategory.Name" class="form-control" />
                            <ValidationMessage For="() => newCategory.Name" />
                        </div>

                        <div class="mb-3">
                            <label for="categoryType">Typ</label>
                            <select id="categoryType" class="form-select" @bind="newCategoryString" @bind:event="onchange">
                                <option value="">-- Välj Kategorinivå --</option>
                                <option value="main">Huvudkategori</option>
                                <option value="sub">Underkategori</option>
                            </select>
                        </div>

                        @if (newCategoryString == "main")
                        {
                            <div class="mb-3">
                                <label>Tillåtna roller</label>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var role in availableRoles)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox"
                                                   class="form-check-input"
                                                   id="role-@role"
                                                   checked="@newCategory.AllowedRoles.Contains(role)"
                                                   @onchange="(ChangeEventArgs e) => ToggleNewCategoryRole(role, e?.Value as bool? == true)" />
                                            <label class="form-check-label" for="role-@role">@role</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary">Lägg till ny kategori</button>
                        </div>
                    </EditForm>

                    <!-- Lista över existerande kategorier -->
                    <div class="mt-4">
                        <h3 class="border-bottom pb-2 fw-bold h6">Huvudkategorier</h3>
                        <ul class="list-group mb-3">
                            @if (!mainCategoryDtos.Any())
                            {
                                <li class="list-group-item text-muted">Inga huvudkategorier</li>
                            }
                            else
                            {
                                @foreach (var category in mainCategoryDtos)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@category.Name</strong>
                                            <br />
                                            <small class="text-muted">Roller: @string.Join(", ", category.AllowedRoles)</small>
                                        </div>
                                        <div class="d-flex gap-1">
                                            <button class="btn btn-sm btn-warning me-1"
                                            title="Redigera kategori"
                                            @onclick="() => StartEditCategory(category, true)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger"
                                            @onclick="() => DeleteCategory(category.Id, true)"
                                            title="Radera kategori">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>

                        <h3 class="border-bottom pb-2 fw-bold h6">Underkategorier</h3>
                        <ul class="list-group">
                            @if (!subCategoryDtos.Any())
                            {
                                <li class="list-group-item text-muted">Inga underkategorier</li>
                            }
                            else
                            {
                                @foreach (var category in subCategoryDtos)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@category.Name</span>
                                        <div class="d-flex gap-1">
                                            <button class="btn btn-sm btn-warning me-1"
                                            title="Redigera kategori"
                                            @onclick="() => StartEditCategory(category, false)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger"
                                            title="Radera kategori"
                                            @onclick="() => DeleteCategory(category.Id, false)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <!-- Dokument‐tabell -->
    <div class="card">
        <div class="card-header d-flex justify-content-between">
            <h2 class="h5">Hantera dokument</h2>
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" id="showArchived" @bind="showArchived" />
                <label class="form-check-label" for="showArchived">Visa arkiverade</label>
            </div>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="spinner-border"></div>
            }
            else if (!FilteredDocuments.Any())
            {
                <div class="alert alert-info">Inga dokument.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Fil</th>
                                <th>Storlek</th>
                                <th>Huvudkategori</th>
                                <th>Underkategorier</th>
                                <th>Status</th>
                                <th>Uppl.</th>
                                <th>Åtgärder</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var document in FilteredDocuments)
                            {
                                <tr class="@(document.IsArchived ? "table-secondary" : "")">
                                    <td>
                                        @document.FileName
                                        @if (document.IsArchived)
                                        {
                                            <span class="badge bg-secondary ms-1">Arkiverad</span>
                                        }
                                    </td>
                                    <td>@FormatFileSize(document.FileSize)</td>
                                    <td>
                                        <span class="badge bg-primary">@document.MainCategoryDto.Name</span>
                                        <br />
                                        <small class="text-muted">(@string.Join(", ", document.MainCategoryDto.AllowedRoles))</small>
                                    </td>
                                    <td>
                                        @if (document.SubCategoryDtos != null)
                                        {
                                            @foreach (var subCategory in document.SubCategoryDtos)
                                            {
                                                <span class="badge bg-secondary">@subCategory.Name</span>
                                            }
                                        }
                                    </td>
                                    <td>
                                        @if (document.IsArchived)
                                        {
                                            <span class="text-muted">Arkiverad @document.ArchivedAt?.ToString("yyyy-MM-dd")</span>
                                        }
                                        else
                                        {
                                            <span class="text-success">Aktiv</span>
                                        }
                                    </td>
                                    <td>@document.UploadedAt.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <button class="btn btn-sm btn-warning me-1"
                                        title="Redigera kategorier för dokumentet"
                                        @onclick="() => EditDocument(document)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-info me-1"
                                        title="Visa dokument i PDF-läsare"
                                        @onclick="() => ViewDocument(document.Id, document.FileName)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-primary me-1"
                                        title="Ladda ner dokumentet"
                                        @onclick="() => DownloadDocument(document.Id)">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        @if (document.IsArchived)
                                        {
                                            <button class="btn btn-sm btn-success me-1"
                                            title="Återställ dokument"
                                            @onclick="() => UnarchiveDocument(document.Id)">
                                                <i class="fas fa-undo"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-secondary me-1"
                                            title="Arkivera dokument"
                                            @onclick="() => ArchiveDocument(document.Id)">
                                                <i class="fas fa-archive"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-danger"
                                        title="Radera dokumentet"
                                        @onclick="() => DeleteDocument(document.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Redigera dokument modal -->
@if (documentToEdit != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)"
         role="dialog" aria-modal="true" aria-labelledby="editDocumentModalTitle">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="editDocumentModalTitle">Redigera kategorier för @documentToEdit.FileName</h5>
                    <button class="btn-close" @onclick="CloseEditModal" aria-label="Stäng"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editModel" OnValidSubmit="SaveDocumentChanges">
                        <DataAnnotationsValidator />

                        <!-- Huvudkategorier (obligatoriskt) -->
                        <div class="mb-3">
                            <label class="fw-bold" for="mainCategorySelect">
                                Huvudkategori <span class="text-danger">*</span>
                            </label>
                            <select id="mainCategorySelect" class="form-select"
                                    @bind="editModel.SelectedMainCategoryId">
                                <option value="">-- Välj kategori --</option>
                                @foreach (var mainCategory in mainCategoryDtos)
                                {
                                    <option value="@mainCategory.Id">
                                        @mainCategory.Name (@string.Join(", ", mainCategory.AllowedRoles))
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- Underkategorier (valfritt) -->
                        <div class="mb-3">
                            <label>Underkategorier (valfritt)</label>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var subCategory in subCategoryDtos)
                                {
                                    <div class="form-check">
                                        <input type="checkbox"
                                               class="form-check-input"
                                               id="subcat-@subCategory.Id"
                                               checked="@IsSubCategorySelected(subCategory.Id)"
                                               @onchange="(ChangeEventArgs e) => ToggleEditCategory(subCategory.Id, e?.Value as bool? == true)" />
                                        <label class="form-check-label" for="subcat-@subCategory.Id">@subCategory.Name</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="d-flex justify-content-end mt-4">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseEditModal">
                                Avbryt
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                    <span class="ms-1">Sparar...</span>
                                }
                                else
                                {
                                    <text>Spara ändringar</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- EditCategory-modal med rollstöd -->
@if (isEditCategoryModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)"
         role="dialog" aria-modal="true" aria-labelledby="editCategoryModalTitle">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="editCategoryModalTitle">Redigera kategori</h5>
                    <button class="btn-close" @onclick="CloseEditCategoryModal" aria-label="Stäng"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editCategoryModel" OnValidSubmit="SaveEditCategory">
                        <DataAnnotationsValidator />
                        <div class="alert alert-info" role="alert">
                            Vill du byta namn på kategorin <strong>@editCategoryModel.Name</strong>?
                        </div>
                        <div class="alert alert-warning" role="alert">
                            Observera: Namnändringen kommer att synas på alla dokument som har denna kategori.
                        </div>
                        <div class="mb-3">
                            <label for="newCategoryName">Nytt namn</label>
                            <InputText id="newCategoryName" @bind-Value="editCategoryModel.Name" class="form-control" />
                        </div>
                        
                        @if (editCategoryIsMain)
                        {
                            <div class="mb-3">
                                <label>Tillåtna roller</label>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var role in availableRoles)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox"
                                                   class="form-check-input"
                                                   id="editrole-@role"
                                                   checked="@editCategoryModel.AllowedRoles.Contains(role)"
                                                   @onchange="(ChangeEventArgs e) => ToggleEditCategoryRole(role, e?.Value as bool? == true)" />
                                            <label class="form-check-label" for="editrole-@role">@role</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseEditCategoryModal">Avbryt</button>
                            <button type="submit" class="btn btn-primary">Spara</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<DocumentViewer IsVisible="@isViewerOpen"
DocumentId="@selectedDocumentId"
DocumentTitle="@selectedDocumentName"
OnClose="CloseDocumentViewer"
OnDownload="DownloadDocument" />


@code {
    private EditCategoryViewModel editCategoryModel = new();

    UploadDocumentViewModel uploadModel = new();
    IBrowserFile? selectedFile;
    bool isUploading, isLoading, showArchived;
    string newCategoryString = "";
    private CreateCategoryViewModel newCategory = new();
    DocumentViewModel? documentToEdit;
    bool isSaving;
    EditDocumentCategoriesViewModel editModel = new();

    private bool isEditCategoryModalOpen = false;
    private bool editCategoryIsMain;
    private int editCategoryId;
    
    private bool isViewerOpen = false;
    private int selectedDocumentId = 0;
    private string selectedDocumentName = "";

    List<DocumentViewModel> documents = new();
    List<MainCategoryDto> mainCategoryDtos = new();
    List<SubCategoryDto> subCategoryDtos = new();
    List<string> availableRoles = new() { "Admin", "Styrelse", "Medlem" };

    IEnumerable<DocumentViewModel> FilteredDocuments =>
        documents.Where(d => showArchived || !d.IsArchived).OrderByDescending(d => d.UploadedAt);

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        // Hämta dokument med kategorier (från cache eller databas)
        documents = await GetDocumentsFromCacheOrDatabase();

        // Hämta alla huvudkategorier
        var mainCategoryDtosUnsorted = await CategoryService.GetMainCategoriesAsync();
        mainCategoryDtos = mainCategoryDtosUnsorted.OrderBy(m => m.Name).ToList();

        var subCategoryDtosUnsorted = await CategoryService.GetSubCategoriesAsync();
        subCategoryDtos = subCategoryDtosUnsorted.OrderBy(s => s.Name).ToList();

        isLoading = false;
    }

    private async Task<List<DocumentViewModel>> GetDocumentsFromCacheOrDatabase()
    {
        // Försök hämta dokument från cachen först
        var cachedDocuments = CacheService.GetDocumentsFromCache();
        if (cachedDocuments != null)
        {
            return cachedDocuments;
        }

        // Hämta från API och säkerställ icke-null
        var docs = await CreateDocumentDto();
        if (docs.Any())
        {
            CacheService.SetDocumentsToCache(docs);
        }
        return docs;
    }

    private async Task<List<DocumentViewModel>> CreateDocumentDto()
    {
        // Säkerställ icke-null lista
        var documentsDto = await DocumentService.GetDocumentsAsync() ?? new List<DocumentViewModel>();

        foreach (var document in documentsDto)
        {
            var mainCategoryForDocument = await CategoryService.GetMainCategoryByIdAsync(document.MainCategoryId);
            if (mainCategoryForDocument != null)
            {
                document.MainCategoryDto = mainCategoryForDocument;
            }

            if (document.SubCategories != null)
            {
                foreach (var subCategoryId in document.SubCategories)
                {
                    var subCategory = await CategoryService.GetSubCategoryByIdAsync(subCategoryId);
                    if (subCategory != null)
                    {
                        document.SubCategoryDtos ??= new List<SubCategoryDto>();
                        document.SubCategoryDtos.Add(subCategory);
                    }
                }
            }
        }

        return documentsDto;
    }

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        uploadModel.File = e.File;
    }

    void ToggleCategory(int id, bool on)
    {
        var subCategory = subCategoryDtos.FirstOrDefault(s => s.Id == id);
        if (subCategory == null) return;

        if (on)
        {
            if (uploadModel.SelectedSubCategoryIds is not null && !uploadModel.SelectedSubCategoryIds.Any(s => s.Id == id))
      uploadModel.SelectedSubCategoryIds.Add(subCategory);
        }
        else
        {
            var toRemove = uploadModel.SelectedSubCategoryIds.FirstOrDefault(s => s.Id == id);
            if (toRemove != null)
                uploadModel.SelectedSubCategoryIds.Remove(toRemove);
        }
    }

    void ToggleNewCategoryRole(string role, bool on)
    {
        if (on)
        {
            if (!newCategory.AllowedRoles.Contains(role))
                newCategory.AllowedRoles.Add(role);
        }
        else
        {
            newCategory.AllowedRoles.Remove(role);
        }
    }

    void ToggleEditCategoryRole(string role, bool on)
    {
        if (on)
        {
            if (!editCategoryModel.AllowedRoles.Contains(role))
                editCategoryModel.AllowedRoles.Add(role);
        }
        else
        {
            editCategoryModel.AllowedRoles.Remove(role);
        }
    }

    // Ladda upp dokument och hantera fel
    async Task UploadDocument()
    {
        if (selectedFile == null)
        {
            await ToastService.Warning("Välj fil");
            return;
        }

        if (uploadModel.SelectedMainCategoryId.Equals(0))
        {
            await ToastService.Warning("Minst en huvudkategori krävs");
            return;
        }

        isUploading = true;
        try
        {
            var ok = await DocumentService.UploadDocumentAsync(selectedFile, uploadModel.SelectedMainCategoryId, uploadModel.SelectedSubCategoryIds);
            if (ok)
            {
                await ToastService.Success("Uppladdat");
                uploadModel = new();
                selectedFile = null;

                // Invalidera cache och ladda om dokument
                CacheService.InvalidateDocumentsCache();
                documents = await GetDocumentsFromCacheOrDatabase();
            }
            else
            {
                await ToastService.Error("Misslyckades");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppladdning av dokument: {Message}", ex.Message);
            await ToastService.Error($"Fel: {ex.Message}");
        }
        finally
        {
            isUploading = false;
        }
    }

    void ViewDocument(int id, string fileName)
    {
        selectedDocumentId = id;
        selectedDocumentName = fileName;
        isViewerOpen = true;
        StateHasChanged();
    }

    void CloseDocumentViewer()
    {
        isViewerOpen = false;
        StateHasChanged();
    }

    async Task AddCategory()
    {
        if (string.IsNullOrWhiteSpace(newCategory.Name))
        {
            await ToastService.Warning("Kategorinamn måste anges");
            return;
        }

        bool ok;
        if (newCategoryString.Equals("main"))
        {
            // Skapa huvudkategori med roller
            ok = await CategoryService.AddMainCategoryAsync(newCategory.Name, newCategory.AllowedRoles);
        }
        else
        {
            // Skapa underkategori enbart med namn
            ok = await CategoryService.AddSubCategoryAsync(newCategory.Name);
        }

        if (ok)
        {
            await ToastService.Success("Kategori skapad");
            newCategory = new CreateCategoryViewModel();
            newCategoryString = "";

            // Uppdatera listor över kategorier
            mainCategoryDtos = await CategoryService.GetMainCategoriesAsync();
            subCategoryDtos = await CategoryService.GetSubCategoriesAsync();
        }
        else
        {
            await ToastService.Error("Kunde inte skapa kategori");
        }
    }

    void StartEditCategory(MainCategoryDto category, bool isMain)
    {
        isEditCategoryModalOpen = true;
        editCategoryIsMain = isMain;
        editCategoryId = category.Id;
        editCategoryModel.Name = category.Name;
        editCategoryModel.AllowedRoles = new List<string>(category.AllowedRoles);
    }

    void StartEditCategory(SubCategoryDto category, bool isMain)
    {
        isEditCategoryModalOpen = true;
        editCategoryIsMain = isMain;
        editCategoryId = category.Id;
        editCategoryModel.Name = category.Name;
        editCategoryModel.AllowedRoles = new List<string>();
    }

    void CloseEditCategoryModal()
    {
        isEditCategoryModalOpen = false;
        editCategoryId = 0;
        editCategoryModel = new EditCategoryViewModel();
    }

    private async Task SaveEditCategory()
    {
        bool ok;
        if (editCategoryIsMain)
            ok = await CategoryService.EditMainCategoryAsync(editCategoryId, editCategoryModel.Name, editCategoryModel.AllowedRoles);
        else
            ok = await CategoryService.EditSubCategoryAsync(editCategoryId, editCategoryModel.Name);

        if (ok)
        {
            await ToastService.Success("Kategori uppdaterad");
            mainCategoryDtos = await CategoryService.GetMainCategoriesAsync();
            subCategoryDtos = await CategoryService.GetSubCategoriesAsync();

            // Cache
            CacheService.InvalidateDocumentsCache();
            documents = await GetDocumentsFromCacheOrDatabase();

            CloseEditCategoryModal();
        }
        else
        {
            await ToastService.Error("Kunde inte uppdatera kategori");
        }
    }

    private async Task DeleteCategory(int id, bool isMain)
    {
        // Kontrollera om kategorin används av något dokument
        if (isMain && documents.Any(d => d.MainCategoryId == id))
        {
            await ToastService.Warning("Kategorin används av minst ett dokument och kan inte tas bort");
            return;
        }

        if (!isMain && documents.Any(d => d.SubCategories != null && d.SubCategories.Contains(id)))
        {
            await ToastService.Warning("Kategorin används av minst ett dokument och kan inte tas bort");
            return;
        }

        var okConfirm = await JSRuntime.InvokeAsync<bool>("confirm", "Vill du verkligen ta bort kategorin?");
        if (!okConfirm) return;

        bool removed;
        if (isMain)
        {
            removed = await CategoryService.DeleteMainCategoryAsync(id);
        }
        else
        {
            removed = await CategoryService.DeleteSubCategoryAsync(id);
        }

        if (removed)
        {
            await ToastService.Success("Kategorin togs bort.");

            // Uppdatera listor över kategorier
            mainCategoryDtos = await CategoryService.GetMainCategoriesAsync();
            subCategoryDtos = await CategoryService.GetSubCategoriesAsync();

            // Uppdatera också dokumentlistan eftersom kategorierna kan ha ändrats
            CacheService.InvalidateDocumentsCache();
            documents = await GetDocumentsFromCacheOrDatabase();
        }
        else
        {
            await ToastService.Error("Kunde inte ta bort kategorin.");
        }
    }

    void EditDocument(DocumentViewModel document)
    {
        documentToEdit = document;

        // Initialize the edit model with current values
        editModel = new EditDocumentCategoriesViewModel
        {
            DocumentId = document.Id,
            SelectedMainCategoryId = document.MainCategoryId,
            SelectedSubCategoryIds = document.SubCategories?.ToList() ?? new List<int>()
        };
    }

    void CloseEditModal()
    {
        documentToEdit = null;
    }

    bool IsSubCategorySelected(int subCategoryId)
    {
        return editModel.SelectedSubCategoryIds.Contains(subCategoryId);
    }

    void ToggleEditCategory(int id, bool on)
    {
        if (on)
        {
            if (!editModel.SelectedSubCategoryIds.Contains(id))
                editModel.SelectedSubCategoryIds.Add(id);
        }
        else
        {
            editModel.SelectedSubCategoryIds.Remove(id);
        }
    }

    // Spara ändringar för dokumentkategori och hantera fel
    async Task SaveDocumentChanges()
    {
        if (documentToEdit == null) return;

        if (editModel.SelectedMainCategoryId == 0)
        {
            await ToastService.Warning("Minst en huvudkategori krävs");
            return;
        }

        isSaving = true;

        try
        {
            var updateRequest = new UpdateDocumentRequest
            {
                MainCategoryId = editModel.SelectedMainCategoryId,
                SubCategoryIds = editModel.SelectedSubCategoryIds.ToList()
            };

            var success = await DocumentService.UpdateDocumentAsync(documentToEdit.Id, updateRequest);

            if (success)
            {
                // Invalidera cache och ladda om dokument
                CacheService.InvalidateDocumentsCache();
                documents = await GetDocumentsFromCacheOrDatabase();

                await ToastService.Success("Dokumentkategorier uppdaterade");
                CloseEditModal();
            }
            else
            {
                await ToastService.Error("Kunde inte uppdatera dokumentet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av dokumentkategori: {Message}", ex.Message);
            await ToastService.Error($"Fel: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    // Arkiverar ett dokument
    private async Task ArchiveDocument(int documentId)
    {
        try
        {
            var success = await DocumentService.ArchiveDocumentAsync(documentId);
            if (success)
            {
                CacheService.InvalidateDocumentsCache();
                documents = await GetDocumentsFromCacheOrDatabase();
                await ToastService.Success("Dokumentet har arkiverats");
            }
            else
            {
                await ToastService.Error("Kunde inte arkivera dokumentet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid arkivering av dokument");
            await ToastService.Error("Ett fel uppstod vid arkivering");
        }
    }

    // Återställer ett arkiverat dokument
    private async Task UnarchiveDocument(int documentId)
    {
        try
        {
            var success = await DocumentService.UnarchiveDocumentAsync(documentId);
            if (success)
            {
                CacheService.InvalidateDocumentsCache();
                documents = await GetDocumentsFromCacheOrDatabase();
                await ToastService.Success("Dokumentet har återställts");
            }
            else
            {
                await ToastService.Error("Kunde inte återställa dokumentet");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid återställning av dokument");
            await ToastService.Error("Ett fel uppstod vid återställning");
        }
    }

    // Laddar ner dokument och hantera fel
    async Task DownloadDocument(int id)
    {
        try
        {
            var result = await DocumentService.DownloadDocumentAsync(id);
            if (result == null)
            {
                await ToastService.Error("Kunde ej hämta fil");
                return;
            }

            var content = result.Value.content;
            var fileName = result.Value.fileName;

            // Skapa en DotNetStreamReference från streamen
            var streamRef = new DotNetStreamReference(stream: content);

            // Skicka streamen till JS för nedladdning
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", streamRef, fileName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid nedladdning av dokument: {Message}", ex.Message);
            await ToastService.Error($"Nedladdningsfel: {ex.Message}");
        }
    }

    async Task DeleteDocument(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Ta bort?")) return;
        if (await DocumentService.DeleteDocumentAsync(id))
        {
            CacheService.InvalidateDocumentsCache();
            documents = await GetDocumentsFromCacheOrDatabase();
            await ToastService.Success("Borttagen");
        }
        else
        {
            await ToastService.Error("Misslyckades");
        }
    }

    string FormatFileSize(long bytes)
    {
        string[] suf = { "B", "KB", "MB", "GB" };
        int idx = 0;
        double size = bytes;
        while (size >= 1024 && idx < suf.Length - 1)
        {
            size /= 1024;
            idx++;
        }
        return $"{size:0.##} {suf[idx]}";
    }
}