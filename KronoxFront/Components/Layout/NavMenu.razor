@using KronoxFront.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.JSInterop
@using KronoxFront.DTOs
@using KronoxFront.ViewModels
@using KronoxFront.Extensions
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject NavigationEvents NavEvents
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-custom bg-dark">
    <div class="container-fluid d-flex align-items-center">
        <!-- Logga till vänster -->
        <NavLink class="navbar-brand position-relative" href="/">
            <img src="images/logo.png" alt="KronoX logga" class="logo" />
        </NavLink>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Visa/dölj navigeringsmeny">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <AuthorizeView>
                <NotAuthorized>
                    <ul class="navbar-nav ms-auto gap-3 text-center justify-content-center responsive-nav">
                        @foreach (var item in GetAllNavigationItems(false))
                        {
                            @if (item.CustomPage != null && item.CustomPage.Children.Any())
                            {
                                <!-- Dropdown för ALLA sidor med children -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" 
                                       data-bs-toggle="dropdown" aria-expanded="false">
                                        @item.DisplayName
                                    </a>
                                    <ul class="dropdown-menu">
                                        <li><NavLink class="dropdown-item" href="@($"/{item.PageKey}")">@item.DisplayName</NavLink></li>
                                        <li><hr class="dropdown-divider"></li>
                                        @foreach (var child in item.CustomPage.Children.OrderBy(c => c.SortOrder))
                                        {
                                            <li><NavLink class="dropdown-item" href="@($"/{child.PageKey}")">@child.DisplayName</NavLink></li>
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <!-- Vanlig länk för alla sidor utan children -->
                                <li class="nav-item">
                                    <NavLink class="nav-link text-white position-relative" href="@($"/{item.PageKey}")" ActiveClass="active-link">
                                        @item.DisplayName
                                        <span class="position-absolute bottom-0 start-50 translate-middle-x active-indicator"></span>
                                    </NavLink>
                                </li>
                            }
                        }

                        <li class="nav-item ms-lg-5">
                            <button class="btn btn-link nav-link text-white d-flex align-items-center justify-content-center gap-2"
                                    @onclick="() => ToggleModal(ref showLogin)"
                                    aria-label="Öppna inloggningsformulär">
                                <i class="fa-solid fa-lock fa-xs" aria-hidden="true"></i> Logga in
                            </button>
                        </li>
                    </ul>
                </NotAuthorized>

                <Authorized>
                    <!-- Navigering för inloggade användare -->
                    <ul class="navbar-nav ms-auto gap-3 text-center justify-content-center responsive-nav">
                        @foreach (var item in GetAllNavigationItems(true))
                        {
                            @if (item.PageKey == "admin")
                            {
                                <!-- Särskild hantering för admin -->
                                <AuthorizeView Roles="Admin" Context="adminContext">
                                    <Authorized Context="adminAuth">
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle text-white" href="#" role="button" 
                                               data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="fa-solid fa-gauge fa-xs me-1" aria-hidden="true"></i> @item.DisplayName
                                            </a>
                                            <ul class="dropdown-menu">
                                                <li><NavLink class="dropdown-item" href="/admin">Dashboard</NavLink></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><NavLink class="dropdown-item" href="/admin/users">Hantera användare</NavLink></li>
                                                <li><NavLink class="dropdown-item" href="/admin/news">Hantera nyheter</NavLink></li>
                                                <li><NavLink class="dropdown-item" href="/admin/documents/manage">Hantera dokument</NavLink></li>
                                                <li><NavLink class="dropdown-item" href="/admin/suggestions">Utvecklingsförslag</NavLink></li>
                                            </ul>
                                        </li>
                                    </Authorized>
                                </AuthorizeView>
                            }
                            else if (item.PageKey == "logout")
                            {
                                <!-- Särskild hantering för logout -->
                                <li class="nav-item ms-lg-5">
                                    <button class="btn btn-link nav-link text-white d-flex align-items-center justify-content-center gap-2"
                                            @onclick="() => ToggleModal(ref showLogout)"
                                            aria-label="Öppna utloggningsformulär">
                                        <i class="fa-solid fa-unlock fa-xs" aria-hidden="true"></i> @item.DisplayName
                                    </button>
                                </li>
                            }
                            else if (item.CustomPage != null && item.CustomPage.Children.Any())
                            {
                                <!-- Dropdown för ALLA sidor med barn -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" 
                                       data-bs-toggle="dropdown" aria-expanded="false">
                                        @item.DisplayName
                                    </a>
                                    <ul class="dropdown-menu">
                                        <li><NavLink class="dropdown-item" href="@($"/{item.PageKey}")">@item.DisplayName</NavLink></li>
                                        <li><hr class="dropdown-divider"></li>
                                        @foreach (var child in item.CustomPage.Children.OrderBy(c => c.SortOrder))
                                        {
                                            <li><NavLink class="dropdown-item" href="@($"/{child.PageKey}")">@child.DisplayName</NavLink></li>
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <NavLink class="nav-link text-white position-relative" href="@($"/{item.PageKey}")" ActiveClass="active-link">
                                        @item.DisplayName
                                        <span class="position-absolute bottom-0 start-50 translate-middle-x active-indicator"></span>
                                    </NavLink>
                                </li>
                            }
                        }
                    </ul>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

<!-- Inloggningsmodal -->
@if (showLogin)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);"
    role="dialog" aria-modal="true" aria-labelledby="loginModalTitle"
    @onclick="() => ToggleModal(ref showLogin)">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="loginModalTitle">Logga in</h5>
                    <button type="button" class="btn-close" @onclick="() => ToggleModal(ref showLogin)" aria-label="Stäng"></button>
                </div>

                <form method="post" action="/auth/login">
                    <div class="modal-body">
                        <!-- Ta alltid användaren till medlemsnytt efter inloggning -->
                        <input type="hidden" name="returnUrl" value="/medlemsnytt" />

                        @if (!string.IsNullOrEmpty(loginErrorMessage))
                        {
                            <div class="alert alert-danger mb-3" role="alert">
                                @loginErrorMessage
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label" for="username-input">Användarnamn</label>
                            <input id="username-input" class="form-control" name="username" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="password-input">Lösenord</label>
                            <div class="input-group">
                                <input id="password-input" 
                                       type="@(showPassword ? "text" : "password")" 
                                       class="form-control" 
                                       name="password" 
                                       required />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="TogglePasswordVisibility"
                                        aria-label="@(showPassword ? "Dölj lösenord" : "Visa lösenord")"
                                        tabindex="-1">
                                    <i class="fa-solid @(showPassword ? "fa-eye-slash" : "fa-eye")" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                        @onclick="() => ToggleModal(ref showLogin)">
                            Avbryt
                        </button>
                        <button type="submit" class="btn btn-primary d-inline-flex align-items-center gap-2">
                            Logga in
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<!-- Utloggningsmodal -->
@if (showLogout)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);"
    role="dialog" aria-modal="true" aria-labelledby="logoutModalTitle"
    @onclick="() => ToggleModal(ref showLogout)">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutModalTitle">Bekräfta utloggning</h5>
                    <button type="button" class="btn-close" @onclick="() => ToggleModal(ref showLogout)" aria-label="Stäng"></button>
                </div>

                <div class="modal-body">
                    <AuthorizeView Context="logoutContext">
                        <Authorized>
                            <p class="text-center">
                                Du är inloggad som <strong>@logoutContext.User.Identity!.Name</strong>. <br /> <br />
                                Vill du logga ut?
                            </p>
                        </Authorized>
                        <NotAuthorized>
                            <p>Du är inte inloggad.</p>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary"
                    @onclick="() => ToggleModal(ref showLogout)">
                        Avbryt
                    </button>

                    <form method="post" action="/auth/logout" @onsubmit:preventDefault="false" class="m-0">
                        <button type="submit" class="btn btn-primary">Logga ut</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<NavigationPageDto> navigationPages = new();
    private List<NavigationConfigDto> navigationConfigs = new();
    private bool showLogin;
    private bool showLogout;
    private string? loginErrorMessage;
    private string? returnUrl;
    private bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        Nav.LocationChanged += OnLocationChanged;
        NavEvents.NavigationUpdated += OnNavigationUpdated;
        await LoadNavigationPages();
        await LoadNavigationConfig();
        
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("loginerror", out var errorValues))
        {
            showLogin = true;
            loginErrorMessage = GetErrorMessage(errorValues.ToString());
        }

        // if (queryParams.TryGetValue("returnUrl", out var returnUrlValues))
        // {
        //     returnUrl = System.Net.WebUtility.UrlDecode(returnUrlValues.ToString());
            
        //     if (!returnUrl.StartsWith("/"))
        //         returnUrl = "/" + returnUrl;
                
        //     if (uri.AbsolutePath == "/" || uri.AbsolutePath == "/home")
        //     {
        //         showLogin = true;
        //     }
        // }
    }

    private async void OnNavigationUpdated()
    {
        try
        {
            await LoadNavigationPages();
            await LoadNavigationConfig();
            await InvokeAsync(StateHasChanged);
        }
        catch { /* ignore */ }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Aktivera Bootstrap dropdown-funktionalitet
            await JS.InvokeVoidAsync("eval", @"
                if (typeof bootstrap !== 'undefined') {
                    var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
                    var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                        return new bootstrap.Dropdown(dropdownToggleEl);
                    });
                }
            ");
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.Contains("/admin/pages") ||
            e.Location.Contains("/admin/navigation") ||
            e.Location.EndsWith("/admin") ||
            e.Location.Contains("/admin/") && e.Location.Contains("save"))
        {
            await Task.Delay(300);
            await LoadNavigationPages();
            await LoadNavigationConfig();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadNavigationPages()
    {
        try
        {
            var httpClient = HttpFactory.CreateClient("KronoxAPI");
            var response = await httpClient.GetAsync("api/custompage/navigation");
            
            if (response.IsSuccessStatusCode)
            {
                navigationPages = await response.Content.ReadFromJsonAsync<List<NavigationPageDto>>() ?? new();
            }
        }
        catch (Exception)
        {
            // Logga fel men fortsätt utan navigation pages
        }
    }

    private async Task LoadNavigationConfig()
    {
        try
        {
            var httpClient = HttpFactory.CreateClient("KronoxAPI");
            var response = await httpClient.GetAsync("api/navigation");
            
            if (response.IsSuccessStatusCode)
            {
                navigationConfigs = await response.Content.ReadFromJsonAsync<List<NavigationConfigDto>>() ?? new();
            }
        }
        catch (Exception)
        {
            navigationConfigs = GetFallbackNavigation();
        }
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
        NavEvents.NavigationUpdated -= OnNavigationUpdated;
    }

    private List<NavigationPageDto> GetCustomPagesForParent(string parentPageKey)
    {
        var authState = AuthStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        var isAuthenticated = user.Identity?.IsAuthenticated == true;
        
        return navigationPages
            .Where(c => c.ParentPageKey == parentPageKey && 
                       c.IsAuthorized(isAuthenticated, user))
            .OrderBy(c => c.SortOrder)
            .ToList();
    }

    private List<NavigationItemViewModel> GetAllNavigationItems(bool isAuthenticated)
    {
        var items = new List<NavigationItemViewModel>();
        var authState = AuthStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        
        var allConfigs = navigationConfigs
            .Where(n => n.IsActive)
            .Where(n => isAuthenticated ? n.IsVisibleToMembers : n.IsVisibleToGuests);

        foreach (var config in allConfigs)
        {
            // Rollkontroll
            if (!string.IsNullOrEmpty(config.RequiredRoles) && user != null)
            {
                var requiredRoles = config.RequiredRoles.Split(',', StringSplitOptions.RemoveEmptyEntries);
                var hasRequiredRole = requiredRoles.Any(role => user.IsInRole(role.Trim()));
                
                if (!hasRequiredRole)
                {
                    continue; // Hoppa över denna länk om användaren inte har rätt roll
                }
            }
            
            var sortOrder = isAuthenticated 
                ? (config.MemberSortOrder ?? config.SortOrder)
                : (config.GuestSortOrder ?? config.SortOrder);
            
            var navPage = navigationPages.FirstOrDefault(p => p.PageKey == config.PageKey);
            
            if (navPage != null)
            {
                var authorizedChildren = navPage.Children
                    .Where(c => c.IsAuthorized(isAuthenticated, user))
                    .Select(c => c.ToNavigationViewModel())
                    .OrderBy(c => c.SortOrder)
                    .ToList();
                
                items.Add(new NavigationItemViewModel 
                { 
                    Type = config.ItemType, 
                    PageKey = config.PageKey, 
                    DisplayName = config.DisplayName, 
                    SortOrder = sortOrder,
                    CustomPage = new NavigationPageViewModel 
                    {
                        PageKey = config.PageKey,
                        DisplayName = config.DisplayName,
                        NavigationType = navPage.NavigationType,
                        SortOrder = sortOrder,
                        Children = authorizedChildren
                    }
                });
            }
            else
            {
                items.Add(new NavigationItemViewModel 
                { 
                    Type = config.ItemType, 
                    PageKey = config.PageKey, 
                    DisplayName = config.DisplayName, 
                    SortOrder = sortOrder,
                    CustomPage = new NavigationPageViewModel 
                    {
                        PageKey = config.PageKey,
                        DisplayName = config.DisplayName,
                        NavigationType = "main",
                        SortOrder = sortOrder,
                        Children = new List<NavigationPageViewModel>()
                    }
                });
            }
        }
        
        return items.OrderBy(i => i.SortOrder).ToList();
    }

    private void ToggleModal(ref bool modalState)
    {
        modalState = !modalState;
        if (!modalState)
        {
            // Återställ felmeddelande och lösenordsvisning när modal stängs
            loginErrorMessage = null;
            showPassword = false;
        }
    }

    private string GetErrorMessage(string errorCode)
    {
        return errorCode switch
        {
            "credentials" => "Felaktigt användarnamn eller lösenord.",
            "newuserlogin" => "Du kan inte logga in ännu eftersom ditt konto väntar på godkännande.",
            "unauthorized" => "Du har inte behörighet att logga in.",
            _ => "Ett fel uppstod vid inloggning. Försök igen."
        };
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    // Fallback-metod för om API inte fungerar
    private List<NavigationConfigDto> GetFallbackNavigation()
    {
        return new List<NavigationConfigDto>
        {
            new() { PageKey = "omkonsortiet", DisplayName = "Om konsortiet", ItemType = "static", 
                   SortOrder = 1, IsVisibleToGuests = true, IsVisibleToMembers = true, IsActive = true },
            new() { PageKey = "omsystemet", DisplayName = "Om systemet", ItemType = "static", 
                   SortOrder = 2, IsVisibleToGuests = true, IsVisibleToMembers = true, IsActive = true },
            new() { PageKey = "visioner", DisplayName = "Visioner & verksamhetsidé", ItemType = "static", 
                   SortOrder = 3, IsVisibleToGuests = true, IsVisibleToMembers = true, IsActive = true },
            new() { PageKey = "kontakt", DisplayName = "Kontakta oss", ItemType = "static", 
                   SortOrder = 17, IsVisibleToGuests = true, IsVisibleToMembers = true, IsActive = true }
        };
    }
}