@using KronoxFront.Components.Shared.UI
@using KronoxFront.ViewModels
@using KronoxFront.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NewsService NewsService
@inject DocumentService DocumentService
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@inject ILogger<NewsSection> Logger

@if (isLoadingNews)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Laddar nyheter...</span>
        </div>
        <p class="mt-2 text-muted">Hämtar senaste nyheterna...</p>
    </div>
}
else if (hasNewsError)
{
    <div class="alert alert-warning" role="alert">
        <h4 class="alert-heading">Kunde inte ladda nyheter</h4>
        <p>Det uppstod ett problem när vi försökte hämta de senaste nyheterna. Vänligen försök igen senare.</p>
        <button class="btn btn-outline-primary" @onclick="LoadNews">
            <i class="fa-solid fa-refresh me-1"></i> Försök igen
        </button>
    </div>
}
else if (!filteredNews.Any())
{
    <div class="text-center py-5">
        <i class="fa-solid fa-newspaper fa-3x text-muted mb-3"></i>
        <h3 class="text-muted">Inga nyheter att visa</h3>
        <p class="text-muted">
            @if (selectedYear.HasValue)
            {
                <span>Det finns inga nyheter för @selectedYear.</span>
            }
            else if (includeArchived)
            {
                <span>Det finns inga nyheter att visa.</span>
            }
            else
            {
                <span>Det finns för närvarande inga publicerade nyheter.</span>
            }
        </p>
    </div>
}
else
{
    @* Filtersektion om ShowFilters är sant *@
    @if (ShowFilters)
    {
        <div class="row mb-4 align-items-center">
            <div class="col-md-6">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h2 class="h4 mb-0">
                        <i class="fa-solid fa-newspaper me-2 text-primary"></i>
                        @Title
                    </h2>
                }
            </div>
            <div class="col-md-6">
                <div class="d-flex gap-2 flex-wrap">
                    <select class="form-select form-select-sm" @onchange="OnSortChanged" style="max-width: 200px;">
                        <option value="newest" selected="@(sortOrder == "newest")">Senaste först</option>
                        <option value="oldest" selected="@(sortOrder == "oldest")">Äldsta först</option>
                        <option value="title" selected="@(sortOrder == "title")">Titel A-Ö</option>
                    </select>
                    
                    @if (availableYears.Count > 1)
                    {
                        <select class="form-select form-select-sm" @onchange="OnYearChanged" style="max-width: 120px;">
                            <option value="">Alla år</option>
                            @foreach (var year in availableYears.OrderByDescending(y => y))
                            {
                                <option value="@year" selected="@(selectedYear == year)">@year</option>
                            }
                        </select>
                    }
                </div>
            </div>
        </div>
    }

    @* Nyhetsrutor *@
    <div class="row">
        @foreach (var newsItem in GetSortedNews())
        {
            <div class="col-12 mb-4">
                <div class="card h-100 shadow-sm border-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h3 class="card-title h5 mb-0 text-primary">@newsItem.Title</h3>
                            <div class="d-flex gap-1 flex-shrink-0 ms-2">
                                @if (newsItem.IsScheduled)
                                {
                                    <span class="badge bg-info">
                                        <i class="fa-solid fa-clock me-1"></i> Schemalagd
                                    </span>
                                }
                                @if (newsItem.IsArchived)
                                {
                                    <span class="badge bg-secondary">
                                        <i class="fa-solid fa-archive me-1"></i> Arkiverad
                                    </span>
                                }
                            </div>
                        </div>

                        <div class="text-muted small mb-3">
                            <i class="fa-solid fa-calendar me-1"></i>
                            Publicerad: @FormatSwedishDateTime(newsItem.PublishedDate)
                        </div>
                        
                        <div class="card-text">
                            @if (expandedItems.Contains(newsItem.Id))
                            {
                                @* Expanderad vy - visa allt innehåll och dokument *@
                                @((MarkupString)newsItem.Content)
        
                                @* Visa bifogade dokument ENDAST i expanderad vy *@
                                @if (newsDocuments.ContainsKey(newsItem.Id) && newsDocuments[newsItem.Id].Any())
                                {
                                    <div class="mt-4 p-3 bg-light rounded border-start border-primary border-3">
                                        <h6 class="text-primary mb-3">
                                            <i class="fa-solid fa-paperclip me-2"></i>
                                            Bifogade dokument
                                        </h6>
                                        <div class="list-group list-group-flush">
                                            @foreach (var doc in newsDocuments[newsItem.Id].OrderBy(d => d.SortOrder))
                                            {
                                                <div class="list-group-item list-group-item-action p-3 mb-2 rounded d-flex justify-content-between align-items-center">
                                                    <div class="d-flex align-items-center">
                                                        <i class="@GetFileIcon(doc.FileName) fa-lg me-3"></i>
                                                        <div>
                                                            <div class="fw-medium">@doc.DisplayName</div>
                                                            <small class="text-muted">@doc.FormattedFileSize</small>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => OpenDocumentViewer(doc.Id, doc.DisplayName)">
                                                        <i class="fa-solid fa-eye me-1"></i> Visa
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                
                                <div class="mt-3">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => CollapseItem(newsItem.Id)">
                                        <i class="fa-solid fa-chevron-up me-1"></i> Visa mindre
                                    </button>
                                </div>
                            }
                            else
                            {
                                @* Kollapsad vy - visa förhandsvisning av innehållet *@
                                var plainText = GetPlainTextPreview(newsItem.Content);
                                var hasDocuments = newsDocuments.ContainsKey(newsItem.Id) && newsDocuments[newsItem.Id].Any();
                                
                                @if (plainText.Length > PreviewLength)
                                {
                                    <p>@(plainText.Substring(0, PreviewLength))...</p>
                                }
                                else
                                {
                                    @((MarkupString)newsItem.Content)
                                }
                                
                                @* Visa alltid "Läs mer" om det finns mer innehåll eller dokument *@
                                @if (plainText.Length > PreviewLength || hasDocuments)
                                {
                                    <button class="btn btn-primary btn-sm mt-3" @onclick="() => ExpandItem(newsItem.Id)">
                                        <i class="fa-solid fa-chevron-down me-1"></i> 
                                        Läs mer
                                        @if (hasDocuments)
                                        {
                                            <span class="badge bg-white text-primary ms-2">
                                                <i class="fa-solid fa-paperclip"></i> 
                                                @newsDocuments[newsItem.Id].Count
                                            </span>
                                        }
                                    </button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    @* Paginering om ShowPagination är sant och det finns fler sidor *@
    @if (ShowPagination && newsList.TotalPages > 1)
    {
        <nav aria-label="Sidnavigering för nyheter" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(newsList.HasPreviousPage ? "" : "disabled")">
                    <button class="page-link" @onclick="() => ChangePage(newsList.Page - 1)" disabled="@(!newsList.HasPreviousPage)">
                        <i class="fa-solid fa-chevron-left"></i> Föregående
                    </button>
                </li>
                
                @for (int i = Math.Max(1, newsList.Page - 2); i <= Math.Min(newsList.TotalPages, newsList.Page + 2); i++)
                {
                    <li class="page-item @(i == newsList.Page ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                    </li>
                }
                
                <li class="page-item @(newsList.HasNextPage ? "" : "disabled")">
                    <button class="page-link" @onclick="() => ChangePage(newsList.Page + 1)" disabled="@(!newsList.HasNextPage)">
                        Nästa <i class="fa-solid fa-chevron-right"></i>
                    </button>
                </li>
            </ul>
        </nav>
    }
    
    @* Arkiverade nyheter om ShowArchiveToggle är sant *@
    @if (ShowArchiveToggle)
    {
        <div class="mt-4 pt-3 border-top text-center">
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="includeArchived" 
                       @bind="includeArchived" @bind:after="HandleArchiveToggle">
                <label class="form-check-label" for="includeArchived">
                    <i class="fa-solid fa-archive me-1"></i>
                    Visa arkiverade nyheter
                </label>
            </div>
            @if (includeArchived && filteredNews.Count(n => n.IsArchived) > 0)
            {
                <small class="text-muted d-block mt-1">
                    Visar @filteredNews.Count(n => n.IsArchived) arkiverade nyheter
                </small>
            }
        </div>
    }

    @* Länk till alla nyheter om ShowAllNewsLink är sant *@
    @if (ShowAllNewsLink && !string.IsNullOrEmpty(PageKey) && PageKey != "medlemsnytt")
    {
        <div class="text-center mt-4">
            <a href="/medlemsnytt" class="btn btn-outline-primary">
                <i class="fa-solid fa-newspaper me-1"></i>
                Visa alla nyheter
            </a>
        </div>
    }
}

<DocumentViewer IsVisible="@showDocumentViewer" 
                DocumentId="@currentDocumentId" 
                DocumentTitle="@currentDocumentTitle"
                OnClose="@CloseDocumentViewer"
                OnDownload="@DownloadDocument" />

@code {
    [Parameter] public string PageKey { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Nyheter";
    [Parameter] public int MaxItems { get; set; } = 10;
    [Parameter] public int PreviewLength { get; set; } = 300;
    [Parameter] public bool ShowFilters { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public bool ShowArchiveToggle { get; set; } = true;
    [Parameter] public bool ShowAllNewsLink { get; set; } = false;

    private NewsListViewModel newsList = new();
    private bool isLoadingNews = true;
    private bool hasNewsError = false;
    private bool includeArchived = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private HashSet<int> expandedItems = new();

    // Filtreringsvariabler
    private string sortOrder = "newest";
    private int? selectedYear = null;
    private List<int> availableYears = new();
    private List<NewsItemViewModel> filteredNews = new();

    // Dokumentvariabler
    private bool showDocumentViewer = false;
    private int currentDocumentId = 0;
    private string currentDocumentTitle = "";
    private Dictionary<int, List<NewsDocumentViewModel>> newsDocuments = new();

    protected override async Task OnInitializedAsync()
    {
        // Anpassa pageSize baserat på MaxItems om det specificeras
        if (MaxItems != 10)
        {
            pageSize = MaxItems;
        }
        
        await LoadNews();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Ladda om nyheter om parametrar ändras
        await LoadNews();
    }

    private async Task LoadNews()
    {
        isLoadingNews = true;
        hasNewsError = false;
        
        try
        {
            newsList = await NewsService.GetMemberNewsAsync(includeArchived, currentPage, pageSize);
            
            // Ladda dokument för alla nyheter
            await LoadNewsDocuments();
            
            // Uppdatera tillgängliga år och filtrerade nyheter
            UpdateAvailableYears();
            FilterNews();
            
            Logger.LogInformation("Laddat {Count} nyheter för PageKey: {PageKey}", newsList.Posts.Count, PageKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid laddning av nyheter för PageKey: {PageKey}", PageKey);
            hasNewsError = true;
        }
        finally
        {
            isLoadingNews = false;
        }
    }

    private async Task LoadNewsDocuments()
    {
        newsDocuments.Clear();
        
        foreach (var news in newsList.Posts)
        {
            try
            {
                var documents = await NewsService.GetNewsDocumentsAsync(news.Id);
                if (documents.Any())
                {
                    newsDocuments[news.Id] = documents;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Kunde inte ladda dokument för nyhet {NewsId}", news.Id);
            }
        }
    }

    private async Task HandleArchiveToggle()
    {
        await LoadNews();
    }

    private void UpdateAvailableYears()
    {
        availableYears = newsList.Posts
            .Select(n => n.PublishedDate.Year)
            .Distinct()
            .OrderByDescending(y => y)
            .ToList();
    }

    private void FilterNews()
    {
        filteredNews = newsList.Posts.Where(n => 
            !selectedYear.HasValue || n.PublishedDate.Year == selectedYear.Value
        ).ToList();
    }

    private List<NewsItemViewModel> GetSortedNews()
    {
        var sortedNews = sortOrder switch
        {
            "oldest" => filteredNews.OrderBy(n => n.PublishedDate).ToList(),
            "title" => filteredNews.OrderBy(n => n.Title).ToList(),
            _ => filteredNews.OrderByDescending(n => n.PublishedDate).ToList() // "newest" (default)
        };

        // Begränsa till MaxItems om det inte är en fullständig nyhetssida
        if (!ShowPagination)
        {
            return sortedNews.Take(MaxItems).ToList();
        }

        return sortedNews;
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortOrder = e.Value?.ToString() ?? "newest";
        StateHasChanged();
    }

    private async Task OnYearChanged(ChangeEventArgs e)
    {
        selectedYear = string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString()!);
        FilterNews();
        StateHasChanged();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= newsList.TotalPages && page != currentPage)
        {
            currentPage = page;
            await LoadNews();
        }
    }

    private void ExpandItem(int itemId)
    {
        expandedItems.Add(itemId);
    }

    private void CollapseItem(int itemId)
    {
        expandedItems.Remove(itemId);
    }

    private string GetPlainTextPreview(string htmlContent)
    {
        var plainText = System.Text.RegularExpressions.Regex.Replace(htmlContent, "<.*?>", "");
        return System.Net.WebUtility.HtmlDecode(plainText);
    }

    private string FormatSwedishDateTime(DateTime dateTime)
    {
        var swedishTime = TimeZoneInfo.ConvertTimeFromUtc(dateTime,
            TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));
        return swedishTime.ToString("dd MMMM yyyy, HH:mm");
    }

    private void OpenDocumentViewer(int documentId, string title)
    {
        currentDocumentId = documentId;
        currentDocumentTitle = title;
        showDocumentViewer = true;
    }

    private void CloseDocumentViewer()
    {
        showDocumentViewer = false;
        currentDocumentId = 0;
        currentDocumentTitle = "";
    }

    private async Task DownloadDocument(int documentId)
    {
        try
        {
            var result = await DocumentService.DownloadDocumentAsync(documentId);
            if (result.HasValue)
            {
                var (stream, fileName) = result.Value;
                var streamRef = new DotNetStreamReference(stream: stream);
                await JS.InvokeVoidAsync("downloadFileFromStream", streamRef, fileName);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid nedladdning av dokument {DocumentId}", documentId);
        }
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fa-solid fa-file-pdf text-danger",
            ".doc" or ".docx" => "fa-solid fa-file-word text-primary",
            ".xls" or ".xlsx" => "fa-solid fa-file-excel text-success",
            ".ppt" or ".pptx" => "fa-solid fa-file-powerpoint text-warning",
            ".txt" => "fa-solid fa-file-lines text-secondary",
            ".zip" or ".rar" or ".7z" => "fa-solid fa-file-zipper text-info",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "fa-solid fa-file-image text-purple",
            ".mp4" or ".avi" or ".mov" or ".wmv" => "fa-solid fa-file-video text-danger",
            ".mp3" or ".wav" or ".flac" => "fa-solid fa-file-audio text-success",
            ".html" or ".htm" => "fa-solid fa-file-code text-warning",
            ".css" => "fa-solid fa-file-code text-info",
            ".js" => "fa-solid fa-file-code text-warning",
            ".json" => "fa-solid fa-file-code text-secondary",
            ".xml" => "fa-solid fa-file-code text-muted",
            _ => "fa-solid fa-file text-muted"
        };
    }
}