@using KronoxFront.ViewModels
@using KronoxFront.Services
@inject CmsService Cms
@inject IToastService Toast
@inject ILogger<PageSectionConfigurator> Logger

<div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h3 class="h5 mb-0">
            <i class="fa-solid fa-layer-group me-2"></i>
            Sidsektioner
        </h3>
    </div>
    <div class="card-body">
        <p class="text-muted mb-3">Välj vilka sektioner som ska visas på denna sida:</p>
        
        <div class="row">
            @foreach (var sectionItem in AvailableSections.OrderBy(s => s.SortOrder))
            {
                <div class="col-md-6 mb-3">
                    <div class="card @(sectionItem.IsEnabled ? "border-success" : "border-light")">
                        <div class="card-body p-3">
                            <div class="form-check">
                                <input type="checkbox" 
                                       class="form-check-input" 
                                       id="sectionItem-@sectionItem.Type"
                                       checked="@sectionItem.IsEnabled"
                                       @onchange="@(args => OnSectionCheckboxChanged(sectionItem, args))" />
                                <label class="form-check-label fw-bold" for="sectionItem-@sectionItem.Type">
                                    @GetSectionDisplayName(sectionItem.Type)
                                </label>
                            </div>
                            <small class="text-muted d-block mt-1">
                                @GetSectionDescription(sectionItem.Type)
                            </small>
                            
                            @if (sectionItem.IsEnabled)
                            {
                                <div class="mt-2">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Ordning:</span>
                                        <input type="number" 
                                               class="form-control" 
                                               style="max-width: 80px;"
                                               value="@sectionItem.SortOrder"
                                               @onchange="@(args => OnSortOrderChanged(sectionItem, args))"
                                               min="0" max="99" />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="mt-3 text-end">
            <button type="button" class="btn btn-outline-secondary me-2" @onclick="ResetToDefaults">
                <i class="fa-solid fa-undo me-1"></i>
                Återställ standard
            </button>
            <button type="button" class="btn btn-success" @onclick="SaveConfiguration" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1"></span>
                }
                else
                {
                    <i class="fa-solid fa-save me-1"></i>
                }
                Spara konfiguration
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string PageKey { get; set; } = "";
    [Parameter] public List<SectionConfigItem> AvailableSections { get; set; } = new();
    [Parameter] public EventCallback OnConfigurationChanged { get; set; }
    [Parameter] public EventCallback<List<SectionConfigItem>> OnSave { get; set; }
    
    private bool isSaving = false;
    
    protected override void OnInitialized()
    {
        // Säkerställ att alltid alla tillgängliga sektioner finns
        EnsureAllSectionsAvailable();
    }
    
    private void EnsureAllSectionsAvailable()
    {
        var allSectionTypes = Enum.GetValues<SectionType>().ToList();
        
        // Ta bort ContactForm från alla sidor utom kontaktsidan
        var pageKeyLower = PageKey.ToLowerInvariant();
        if (pageKeyLower != "kontaktaoss" && pageKeyLower != "kontakt")
        {
            allSectionTypes = allSectionTypes.Where(t => t != SectionType.ContactForm).ToList();
        }
        
        foreach (var sectionType in allSectionTypes)
        {
            if (!AvailableSections.Any(s => s.Type == sectionType))
            {
                // Lägg till saknade sektioner som inaktiverade
                AvailableSections.Add(new SectionConfigItem
                {
                    Type = sectionType,
                    IsEnabled = GetDefaultEnabledState(sectionType, PageKey),
                    SortOrder = AvailableSections.Count
                });
            }
        }
    }
    
    private void InitializeDefaultSections()
    {
        var allSections = Enum.GetValues<SectionType>()
            .Select((type, index) => new SectionConfigItem
            {
                Type = type,
                IsEnabled = GetDefaultEnabledState(type, PageKey),
                SortOrder = index
            }).ToList();
            
        AvailableSections.AddRange(allSections);
    }
    
    private bool GetDefaultEnabledState(SectionType type, string pageKey)
    {
        var key = pageKey.ToLowerInvariant();
        
        return (key, type) switch
        {
            ("home", SectionType.Banner) => true,
            ("home", SectionType.Intro) => true,
            ("home", SectionType.FeatureSections) => true,
            ("home", SectionType.MemberLogos) => true,
            
            ("kontaktaoss" or "kontakt", SectionType.Banner) => true,
            ("kontaktaoss" or "kontakt", SectionType.Intro) => true,
            ("kontaktaoss" or "kontakt", SectionType.ContactForm) => true,
            ("kontaktaoss" or "kontakt", SectionType.MemberLogos) => true,
            
            ("dokument", SectionType.Banner) => true,
            ("dokument", SectionType.Intro) => true,
            ("dokument", SectionType.DocumentSection) => true,
            
            ("medlemsnytt", SectionType.Banner) => true,
            ("medlemsnytt", SectionType.Intro) => true,
            ("medlemsnytt", SectionType.NewsSection) => true,
            ("medlemsnytt", SectionType.MemberLogos) => true,
            
            (_, SectionType.Banner) => true,
            (_, SectionType.Intro) => true,
            _ => false
        };
    }
    
    private async Task OnSectionCheckboxChanged(SectionConfigItem sectionItem, ChangeEventArgs args)
    {
        sectionItem.IsEnabled = (bool)(args.Value ?? false);
        await OnConfigurationChanged.InvokeAsync();
    }
    
    private async Task OnSortOrderChanged(SectionConfigItem sectionItem, ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int newOrder))
        {
            sectionItem.SortOrder = newOrder;
            await OnConfigurationChanged.InvokeAsync();
        }
    }
    
    private async Task SaveConfiguration()
    {
        isSaving = true;
        try
        {
            await OnSave.InvokeAsync(AvailableSections);
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void ResetToDefaults()
    {
        foreach (var sectionItem in AvailableSections)
        {
            sectionItem.IsEnabled = GetDefaultEnabledState(sectionItem.Type, PageKey);
            sectionItem.SortOrder = (int)sectionItem.Type;
        }
        StateHasChanged();
    }
    
    private string GetSectionDisplayName(SectionType type)
    {
        return type switch
        {
            SectionType.Banner => "Bannerbild",
            SectionType.Intro => "Intro-sektion",
            SectionType.NavigationButtons => "Navigeringsknappar",
            SectionType.FeatureSections => "Feature-sektioner",
            SectionType.FaqSections => "FAQ-sektioner",
            SectionType.DocumentSection => "Dokumentsektion",
            SectionType.MemberLogos => "Medlemslogotyper",
            SectionType.ContactForm => "Kontaktformulär",
            SectionType.NewsSection => "Nyhetssektion",
            SectionType.ActionPlanTable => "Handlingsplanstabell",
            SectionType.DevelopmentSuggestionForm => "Utvecklingsförslagformulär",
            _ => type.ToString()
        };
    }
    
    private string GetSectionDescription(SectionType type)
    {
        return type switch
        {
            SectionType.Banner => "Stor bannerbild högst upp på sidan",
            SectionType.Intro => "Introduktionstext med valfri bild",
            SectionType.NavigationButtons => "Navigeringsknappar under intro",
            SectionType.FeatureSections => "Flexibla innehållssektioner",
            SectionType.FaqSections => "Frågor och svar (accordion)",
            SectionType.DocumentSection => "Länk till dokumentsida",
            SectionType.MemberLogos => "Medlemsorganisationers logotyper",
            SectionType.ContactForm => "Kontaktformulär och kontaktuppgifter",
            SectionType.NewsSection => "Nyhetssektion som visar publicerade nyheter",
            SectionType.ActionPlanTable => "Tabell med handlingsplaner",
            SectionType.DevelopmentSuggestionForm => "Formulär för utvecklingsförslag från medlemmar",
            _ => "Anpassad sektion"
        };
    }
}