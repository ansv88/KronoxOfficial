@using KronoxFront.ViewModels
@using KronoxFront.Services
@using KronoxFront.DTOs
@using Microsoft.AspNetCore.Authorization
@using System.Reflection
@inject IHttpClientFactory HttpClientFactory
@inject IToastService Toast
@inject CacheService Cache

<div class="card mb-4" id="navigation-settings-card">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="h5 mb-0">
            <i class="fa-solid fa-globe me-2"></i>
            Sidtillgänglighet & navigation
        </h5>
        <div class="d-flex align-items-center gap-2">
            @if (navigationConfig != null)
            {
                @if (navigationConfig.IsActive == false)
                {
                    <span class="badge bg-danger fs-6">INAKTIVERAD</span>
                }
                else if (HasAnyRestrictions())
                {
                    <span class="badge bg-warning text-dark fs-6">AKTIV - BEGRÄNSAD</span>
                }
                else
                {
                    <span class="badge bg-success fs-6">AKTIV - PUBLIK</span>
                }
            }
            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleSettings">
                <i class="fa-solid fa-@(showSettings ? "eye-slash" : "cog")"></i>
                @(showSettings ? "Dölj" : "Visa") inställningar
            </button>
        </div>
    </div>
    
    @if (showSettings)
    {
        <div class="card-body">
            @if (navigationConfig != null)
            {
                <EditForm Model="navigationConfig" OnValidSubmit="SaveNavigationSettings">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-medium">Länktext i navigation</label>
                                <InputText class="form-control" @bind-Value="navigationConfig.DisplayName" />
                                <ValidationMessage For="() => navigationConfig.DisplayName" />
                                <div class="form-text">Detta namn visas i navigationsmenyn</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-medium">Sorteringsordning</label>
                                <InputNumber class="form-control" @bind-Value="navigationConfig.SortOrder" />
                                <ValidationMessage For="() => navigationConfig.SortOrder" />
                                <div class="form-text">Lägre nummer = högre upp</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-medium">Status</label>
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="navigationConfig.IsActive" />
                                    <label class="form-check-label">Aktiv i navigation</label>
                                </div>
                                
                                @if (!navigationConfig.IsActive)
                                {
                                    <div class="alert alert-danger py-2 mt-2 mb-0">
                                        <small>
                                            <i class="fa-solid fa-exclamation-triangle me-1"></i>
                                            <strong>KRITISKT:</strong> Sidan är inaktiverad och går inte att besöka!
                                        </small>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-success py-2 mt-2 mb-0">
                                        <small>
                                            <i class="fa-solid fa-check-circle me-1"></i>
                                            <strong>Aktiv:</strong> Sidan är tillgänglig för användare.
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <!-- Åtkomstinformation (alltid synlig) -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card @GetAccessCardClass()">
                                <div class="card-body py-3">
                                    <div class="d-flex align-items-center">
                                        <i class="@GetAccessIcon() fa-lg me-3"></i>
                                        <div>
                                            <h6 class="mb-1 @GetAccessTextClass()">
                                                @GetAccessTitle()
                                            </h6>
                                            <small class="@GetAccessTextClass()">
                                                @GetAccessDescription()
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @{
                        bool isFixedPageCheck = IsFixedPage();
                    }
                    
                    @if (isFixedPageCheck)
                    {
                        <div class="card border-info mb-3">
                            <div class="card-header bg-info bg-opacity-10">
                                <h6 class="mb-0 text-info-emphasis">
                                    <i class="fa-solid fa-info-circle me-2"></i>
                                    Fast systemsida
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="mb-3 text-muted">
                                    Detta är en fast systemsida med fördefinierade behörighetsregler. 
                                    Synlighetsinställningar styrs automatiskt av sidans kod och kan inte ändras.
                                </p>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <h6 class="fw-medium text-muted mb-2">
                                                <i class="fa-solid fa-globe me-2"></i>
                                                Synlighet för gäster
                                            </h6>
                                            @if (navigationConfig.IsVisibleToGuests)
                                            {
                                                <div class="alert alert-success py-2 mb-0">
                                                    <small>
                                                        <i class="fa-solid fa-check-circle me-1"></i>
                                                        <strong>Tillgänglig:</strong> Sidan kan besökas av oinloggade användare.

                                                        @if (!HasAnyRestrictions())
                                                        {
                                                            <br><em>Observera: Vissa sektioner kan ha rollbaserad åtkomst.</em>
                                                        }
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-warning py-2 mb-0">
                                                    <small>
                                                        <i class="fa-solid fa-shield-alt me-1"></i>
                                                        <strong>Begränsad:</strong> Sidan kräver inloggning eller specifika roller.
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <h6 class="fw-medium text-muted mb-2">
                                                <i class="fa-solid fa-user-check me-2"></i>
                                                Synlighet för medlemmar
                                            </h6>
                                            <div class="alert alert-info py-2 mb-0">
                                                <small>
                                                    <i class="fa-solid fa-info-circle me-1"></i>
                                                    <strong>Automatisk:</strong> Alla inloggade användare ser länken i navigationen.
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="alert alert-light border-info mt-3">
                                    <small class="text-muted">
                                        <i class="fa-solid fa-lightbulb me-2"></i>
                                        <strong>Förklaring:</strong> För fasta systemsidor styrs åtkomstbehörigheter av 
                                        <code>[Authorize]</code>-attribut eller policies i sidans kod. 
                                        @if (PageKey.Equals("dokument", StringComparison.OrdinalIgnoreCase))
                                        {
                                            <text>Dokumentsidan har dessutom rollbaserad innehållsfiltrering per kategori.</text>
                                        }
                                        @if (!HasAnyRestrictions())
                                        {
                                            <text><br><strong>Innehållsobservation:</strong> Även om sidan är öppen för alla kan enskilda sektioner
                                                (t.ex. feature-sektioner eller privat innehåll) vara konfigurerade att endast visas för inloggade användare eller specifika roller.
                                            </text>
                                        }
                                        <text>
                                            <br><strong>Du kan endast aktivera/inaktivera sidan i navigation, men inte ändra vilka som har åtkomst till innehållet.</strong>
                                         </text>
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Full redigeringskontroll ENDAST för custom pages -->
                        <div class="card border-success mb-3">
                            <div class="card-header bg-success bg-opacity-10">
                                <h6 class="mb-0 text-success-emphasis">
                                    <i class="fa-solid fa-edit me-2"></i>
                                    Anpassad sida - Full kontroll
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="mb-3 text-muted">
                                    Detta är en anpassad sida som du kan konfigurera fritt. 
                                    Du har full kontroll över synlighetsinställningar och behörigheter.
                                </p>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label fw-medium">
                                                <i class="fa-solid fa-globe me-1"></i>
                                                Synlighet för gäster
                                            </label>
                                            <div class="form-check">
                                                <InputCheckbox class="form-check-input" @bind-Value="navigationConfig.IsVisibleToGuests" />
                                                <label class="form-check-label">Visa för oinloggade användare</label>
                                            </div>
                                            <div class="form-text">
                                                Avgör om gäster (oinloggade användare) ska kunna se denna sida.
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label fw-medium">
                                                <i class="fa-solid fa-user-check me-1"></i>
                                                Synlighet för medlemmar
                                            </label>
                                            <div class="form-check">
                                                <InputCheckbox class="form-check-input" @bind-Value="navigationConfig.IsVisibleToMembers" />
                                                <label class="form-check-label">Visa för inloggade användare</label>
                                            </div>
                                            <div class="form-text">
                                                Hantera fullständiga rollbegränsningar via <a href="/admin/pages" class="text-decoration-none">Hantera sidor</a>.
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="alert alert-light border-success mt-3">
                                    <small class="text-muted">
                                        <i class="fa-solid fa-info-circle me-2"></i>
                                        <strong>Anpassad sida:</strong> Du kan fritt konfigurera alla inställningar för denna sida. 
                                        Ändringar här påverkar både navigation och sidåtkomst.
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary btn-sm" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <text>Sparar...</text>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1"></i>
                                <text>Spara navigationsinställningar</text>
                            }
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fa-solid fa-info-circle me-2"></i>
                    Laddar navigationsinställningar...
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string PageKey { get; set; } = "";
    [Parameter] public string? InitialDisplayName { get; set; }
    [Parameter] public EventCallback<string> OnDisplayNameChanged { get; set; }
    
    private NavigationConfigViewModel? navigationConfig;
    private bool showSettings = false;
    private bool isSaving = false;
    private List<string> pageAuthorizeRoles = new();

    // Lista över ALLA fasta sidor med fördefinierade behörighetsregler, alla dessa har låsta synlighetsinställningar som styrs av kod
    private static readonly HashSet<string> FixedPages = new(StringComparer.OrdinalIgnoreCase)
    {
        // Publika fasta sidor (ingen [Authorize]) - synlighet låst till publik
        "home", 
        "omkonsortiet", 
        "omsystemet", 
        "visioner", 
        "kontaktaoss",
        
        // Begränsade fasta sidor (med [Authorize]) - synlighet låst enligt auktorisering
        "dokument",         // [Authorize(Policy = "ExcludeNewUser")] + rollbaserad innehållsfiltrering
        "medlemsnytt",      // [Authorize]
        "forvaltning",      // [Authorize] 
        "forvnsg",          // [Authorize(Roles = "Admin,Styrelse")]
        "forstyrelsen"      // [Authorize(Roles = "Admin,Styrelse")]
    };

    protected override async Task OnInitializedAsync()
    {
        DetectPageAuthorizeRoles();
        await LoadNavigationConfig();
        
        // För fasta sidor: sätt synlighetsinställningar baserat på rollbegränsningar
        if (navigationConfig != null && IsFixedPage())
        {
            SyncVisibilityWithRoleRestrictions();
        }
    }

    private async Task LoadNavigationConfig()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            var response = await httpClient.GetAsync($"api/navigation/page/{PageKey}");
            
            if (response.IsSuccessStatusCode)
            {
                var dto = await response.Content.ReadFromJsonAsync<NavigationConfigDto>();
                if (dto != null)
                {
                    navigationConfig = new NavigationConfigViewModel
                    {
                        Id = dto.Id,
                        PageKey = dto.PageKey,
                        DisplayName = dto.DisplayName,
                        ItemType = dto.ItemType,
                        SortOrder = dto.SortOrder,
                        IsVisibleToGuests = dto.IsVisibleToGuests,
                        IsVisibleToMembers = dto.IsVisibleToMembers,
                        IsActive = dto.IsActive,
                        IsSystemItem = dto.IsSystemItem,
                        RequiredRoles = dto.RequiredRoles
                    };
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationConfig = new NavigationConfigViewModel
                {
                    PageKey = PageKey,
                    DisplayName = InitialDisplayName ?? PageKey,
                    ItemType = "static",
                    SortOrder = 50,
                    IsVisibleToGuests = !HasAnyRestrictions(),
                    IsVisibleToMembers = true,
                    IsActive = true
                };
            }
        }
        catch (Exception)
        {
            await Toast.Error("Kunde inte ladda navigationsinställningar");
        }
    }

    private void DetectPageAuthorizeRoles()
    {
        try
        {
            // Speciell hantering för dokumentsidan som har Policy = "ExcludeNewUser"
            if (PageKey.Equals("dokument", StringComparison.OrdinalIgnoreCase))
            {
                // Dokument har Policy = "ExcludeNewUser" vilket betyder att alla utom "Ny användare" kan komma åt Plus rollbaserad innehållsfiltrering per kategori
                pageAuthorizeRoles.Add("RequiresAuthentication");
                pageAuthorizeRoles.Add("ExcludeNewUser");
                return;
            }

            var componentType = PageKey switch
            {
                // Publika sidor (ingen [Authorize])
                "home" => typeof(KronoxFront.Components.Pages.Home),
                "omkonsortiet" => typeof(KronoxFront.Components.Pages.Omkonsortiet),
                "omsystemet" => typeof(KronoxFront.Components.Pages.Omsystemet),
                "visioner" => typeof(KronoxFront.Components.Pages.Visionerverksamhetside),
                "kontaktaoss" => typeof(KronoxFront.Components.Pages.Kontaktaoss),
                
                // Begränsade sidor (med [Authorize])
                "medlemsnytt" => typeof(KronoxFront.Components.Pages.Medlemsnytt),
                "forvaltning" => typeof(KronoxFront.Components.Pages.Forvaltning),
                "forvnsg" => typeof(KronoxFront.Components.Pages.Forvnsg),
                "forstyrelsen" => typeof(KronoxFront.Components.Pages.Forstyrelsen),
                _ => null
            };

            if (componentType != null)
            {
                var authorizeAttrs = componentType.GetCustomAttributes<AuthorizeAttribute>();
                foreach (var attr in authorizeAttrs)
                {
                    if (!string.IsNullOrEmpty(attr.Roles))
                    {
                        var roles = attr.Roles.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                             .Select(r => r.Trim())
                                             .ToList();
                        pageAuthorizeRoles.AddRange(roles);
                    }
                    else
                    {
                        // [Authorize] utan roller betyder "kräver inloggning"
                        pageAuthorizeRoles.Add("RequiresAuthentication");
                    }
                }
            }
        }
        catch
        {
            // Ignore errors in reflection
        }
    }

    private bool IsFixedPage()
    {
        return !string.IsNullOrEmpty(PageKey) && FixedPages.Contains(PageKey);
    }

    // Synkronisera synlighetsinställningar med rollbegränsningar för fasta sidor
    private void SyncVisibilityWithRoleRestrictions()
    {
        if (navigationConfig == null || !IsFixedPage()) return;

        // För fasta sidor: sätt automatiskt synlighet baserat på rollbegränsningar
        navigationConfig.IsVisibleToGuests = !HasAnyRestrictions();
        navigationConfig.IsVisibleToMembers = true; // Inloggade kan alltid se länken i navigation
    }

    // Kontrollera om sidan har NÅGRA begränsningar (roller ELLER inloggningskrav)
    private bool HasAnyRestrictions()
    {
        var effectiveRoles = GetEffectiveRoles();
        return effectiveRoles.Any();
    }

    // Kontrollera om sidan har specifika rollbegränsningar (inte bara inloggningskrav)
    private bool HasRestrictedRoles()
    {
        var effectiveRoles = GetEffectiveRoles();
        return effectiveRoles.Any(role => role != "RequiresAuthentication" && role != "ExcludeNewUser");
    }

    private List<string> GetEffectiveRoles()
    {
        if (pageAuthorizeRoles.Any())
            return pageAuthorizeRoles;
            
        if (!string.IsNullOrEmpty(navigationConfig?.RequiredRoles))
            return navigationConfig.RequiredRoles.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                                  .Select(r => r.Trim())
                                                  .ToList();
        
        return new List<string>();
    }

    private string GetAccessTitle()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
            return "Tillgänglig för alla besökare";
        
        // Speciell hantering för dokument med Policy = "ExcludeNewUser"
        if (roles.Contains("ExcludeNewUser"))
            return "Kräver inloggning med rollbaserad innehållsfiltrering";
        
        // Hantera [Authorize] utan specifika roller
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "Kräver inloggning";
        
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        if (!specificRoles.Any())
            return "Kräver inloggning";
        
        var roleNames = specificRoles.Select(GetRoleDisplayName);
        return specificRoles.Count == 1 
            ? $"Endast tillgänglig för {roleNames.First()}" 
            : $"Endast tillgänglig för {string.Join(" och ", roleNames)}-roller";
    }

    private string GetAccessDescription()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
        {
            return "Denna sida är öppen för alla besökare, inklusive oinloggade användare, men vissa sektioner kan ha rollbaserad åtkomst";
        }
        
        // Speciell hantering för dokument med Policy = "ExcludeNewUser"
        if (roles.Contains("ExcludeNewUser"))
            return "Sidan kräver inloggning (utom nya användare) och filtrerar innehåll baserat på användarens roller";
        
        // Hantera [Authorize] utan specifika roller
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "Sidan kräver inloggning men har inga specifika rollbegränsningar";
        
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        if (!specificRoles.Any())
            return "Sidan kräver inloggning men har inga specifika rollbegränsningar";
        
        return $"Endast användare med {(specificRoles.Count == 1 ? "denna roll" : "dessa roller")} kan komma åt sidan";
    }

    private string GetAccessIcon()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
            return "fa-solid fa-globe text-success";
        
        if (roles.Contains("ExcludeNewUser"))
            return "fa-solid fa-user-shield text-warning";
        
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "fa-solid fa-user text-info";
            
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "fa-solid fa-user-shield text-warning" : "fa-solid fa-user text-info";
    }

    private string GetAccessCardClass()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
            return "bg-success bg-opacity-10 border-success";
        
        if (roles.Contains("ExcludeNewUser"))
            return "bg-warning bg-opacity-10 border-warning";
        
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "bg-info bg-opacity-10 border-info";
            
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "bg-warning bg-opacity-10 border-warning" : "bg-info bg-opacity-10 border-info";
    }

    private string GetAccessTextClass()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
            return "text-success-emphasis";
        
        if (roles.Contains("ExcludeNewUser"))
            return "text-warning-emphasis";
        
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "text-info-emphasis";
            
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "text-warning-emphasis" : "text-info-emphasis";
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "Admin" => "Administratör",
            "Styrelse" => "Styrelse", 
            "Medlem" => "Medlem",
            "Ny användare" => "Ny användare",
            "RequiresAuthentication" => "Inloggade användare",
            "ExcludeNewUser" => "Verifierade användare",
            _ => role
        };
    }

    private void ToggleSettings()
    {
        showSettings = !showSettings;
    }

    private async Task SaveNavigationSettings()
    {
        if (navigationConfig == null) return;

        // För fasta sidor: synkronisera synlighetsinställningar innan sparning
        if (IsFixedPage())
        {
            SyncVisibilityWithRoleRestrictions();
        }

        isSaving = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");
            
            if (navigationConfig.Id == 0)
            {
                var createRequest = new
                {
                    PageKey = navigationConfig.PageKey,
                    DisplayName = navigationConfig.DisplayName,
                    ItemType = navigationConfig.ItemType,
                    SortOrder = navigationConfig.SortOrder,
                    IsVisibleToGuests = navigationConfig.IsVisibleToGuests,
                    IsVisibleToMembers = navigationConfig.IsVisibleToMembers,
                    IsActive = navigationConfig.IsActive,
                    IsSystemItem = navigationConfig.IsSystemItem,
                    RequiredRoles = navigationConfig.RequiredRoles
                };
                await httpClient.PostAsJsonAsync("api/navigation", createRequest);
            }
            else
            {
                var updateRequest = new
                {
                    DisplayName = navigationConfig.DisplayName,
                    SortOrder = navigationConfig.SortOrder,
                    IsVisibleToGuests = navigationConfig.IsVisibleToGuests,
                    IsVisibleToMembers = navigationConfig.IsVisibleToMembers,
                    IsActive = navigationConfig.IsActive,
                    RequiredRoles = navigationConfig.RequiredRoles
                };
                await httpClient.PutAsJsonAsync($"api/navigation/{navigationConfig.Id}", updateRequest);
            }

            // Invalidera navigation cache
            Cache.InvalidateGroup("navigation");

            await Toast.Success("Navigationsinställningar sparade!");
            
            if (OnDisplayNameChanged.HasDelegate)
            {
                await OnDisplayNameChanged.InvokeAsync(navigationConfig.DisplayName);
            }
        }
        catch (Exception)
        {
            await Toast.Error("Fel vid sparning av navigationsinställningar");
        }
        finally
        {
            isSaving = false;
        }
    }
}