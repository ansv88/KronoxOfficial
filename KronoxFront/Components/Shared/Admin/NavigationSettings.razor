@using KronoxFront.ViewModels
@using KronoxFront.Services
@using KronoxFront.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Reflection
@inject IHttpClientFactory HttpClientFactory
@inject IToastService Toast
@inject CacheService Cache
@inject NavigationEvents NavEvents
@inject ILogger<NavigationSettings> Logger

<div class="card mb-4" id="navigation-settings-card">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="h5 mb-0">
            <i class="fa-solid fa-globe me-2" aria-hidden="true"></i>
            Sidtillgänglighet & navigation
        </h5>
        <div class="d-flex align-items-center gap-2">
            @if (navigationConfig != null)
            {
                if (!navigationConfig.IsActive)
                {
                    <span class="badge bg-danger fs-6">INAKTIVERAD</span>
                }
                else if (HasAnyRestrictions())
                {
                    <span class="badge bg-warning text-dark fs-6">AKTIV - BEGRÄNSAD</span>
                }
                else
                {
                    <span class="badge bg-success fs-6">AKTIV - PUBLIK</span>
                }
            }
            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleSettings">
                <i class="fa-solid fa-@(showSettings ? "eye-slash" : "cog")" aria-hidden="true"></i>
                @(showSettings ? "Dölj" : "Visa") inställningar
            </button>
        </div>
    </div>

    @if (showSettings)
    {
        <div class="card-body">
            @if (navigationConfig != null)
            {
                <EditForm Model="navigationConfig" OnValidSubmit="SaveNavigationSettings">
                    <DataAnnotationsValidator />
                    @if (PageKey.Equals("home", StringComparison.OrdinalIgnoreCase))
                    {
                        <div class="alert alert-warning d-flex align-items-center" role="alert">
                            <i class="fa-solid fa-shield-halved me-2" aria-hidden="true"></i>
                            <div>
                                Startsidan är en system‑sida. Den är alltid aktiv, synlig för alla och kan inte avaktiveras.
                            </div>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Visningsnamn</label>
                                <input class="form-control" value="@(InitialDisplayName ?? "Startsida")" disabled />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Ordning</label>
                                <input type="number" class="form-control" value="0" disabled />
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <span class="badge bg-warning text-dark">
                                    <i class="fa-solid fa-shield-halved me-1" aria-hidden="true"></i> System
                                </span>
                            </div>
                            <div class="col-12">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" checked disabled />
                                    <label class="form-check-label">Aktiv</label>
                                </div>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" checked disabled />
                                    <label class="form-check-label">Synlig för gäster</label>
                                </div>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" checked disabled />
                                    <label class="form-check-label">Synlig för medlemmar</label>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-medium" for="displayName">Länktext i navigation</label>
                                    <InputText id="displayName" class="form-control" @bind-Value="navigationConfig.DisplayName" />
                                    <ValidationMessage For="() => navigationConfig.DisplayName" />
                                    <div class="form-text">Detta namn visas i navigationsmenyn</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label fw-medium" for="sortOrder">Sorteringsordning</label>
                                    <InputNumber id="sortOrder" class="form-control" @bind-Value="navigationConfig.SortOrder" />
                                    <ValidationMessage For="() => navigationConfig.SortOrder" />
                                    <div class="form-text">Lägre nummer = högre upp</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label fw-medium">Status</label>

                                    @if (IsFixedPage())
                                    {
                                        <div class="form-check mb-1">
                                            <InputCheckbox class="form-check-input"
                                                           @bind-Value="navigationConfig.IsActive"
                                                           @onchange="OnFixedIsActiveChanged"
                                                           disabled="@IsHomePage()" />
                                            <label class="form-check-label">Aktiv/Inaktiv sida</label>
                                        </div>
                                        @if (IsHomePage())
                                        {
                                            <div class="form-text text-muted mb-2">
                                                Startsidan kan inte inaktiveras och visas inte som länk i navigationen.
                                            </div>
                                        }

                                        <div class="mb-2">
                                            @if (!navigationConfig.IsActive)
                                            {
                                                <div class="alert alert-warning py-2 mb-0">
                                                    <small>
                                                        <i class="fa-solid fa-eye-slash me-1" aria-hidden="true"></i>
                                                        Inaktiverad: Länken tas bort från navigationen och direktbesök ger 404.
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-success py-2 mb-0">
                                                    <small>
                                                        <i class="fa-solid fa-eye me-1" aria-hidden="true"></i>
                                                        @if (IsHomePage())
                                                        {
                                                            <span>Aktiv: Startsidan är alltid tillgänglig via /. Den visas inte som länk i navigationen.</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Aktiv: Länken visas i navigationen. Åtkomst styrs av sidans behörighet.</span>
                                                        }
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-check mb-1">
                                            <InputCheckbox class="form-check-input"
                                                           @bind-Value="showInNavigation"
                                                           @onchange="OnShowInNavigationChanged" />
                                            <label class="form-check-label">Visa i navigation</label>
                                        </div>
                                        <div class="form-text mb-2">
                                            Styr endast synligheten i menyn. Direktlänk kräver att sidan är aktiv.
                                        </div>

                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input"
                                                           @bind-Value="navigationConfig.IsActive"
                                                           @onchange="OnIsActiveChanged" />
                                            <label class="form-check-label">Aktiv/Inaktiv sida</label>
                                        </div>
                                        <div class="form-text">
                                            Inaktiverad sida går inte att besöka (404) och tas bort från navigationen.
                                        </div>

                                        @if (!navigationConfig.IsActive)
                                        {
                                            <div class="alert alert-danger py-2 mt-2 mb-0">
                                                <small>
                                                    <i class="fa-solid fa-exclamation-triangle me-1" aria-hidden="true"></i>
                                                    <strong>Inaktiverad:</strong> Sidan är avpublicerad, ger 404 vid direktlänk och är borttagen från navigationen.
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-success py-2 mt-2 mb-0">
                                                <small>
                                                    <i class="fa-solid fa-check-circle me-1" aria-hidden="true"></i>
                                                    <strong>Aktiv:</strong> Sidan är tillgänglig för användare och kan visas i navigationen.
                                                </small>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="card @GetAccessCardClass()">
                                    <div class="card-body py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="@GetAccessIcon() fa-lg me-3" aria-hidden="true"></i>
                                            <div>
                                                <h6 class="mb-1 @GetAccessTextClass()">@GetAccessTitle()</h6>
                                                <small class="@GetAccessTextClass()">@GetAccessDescription()</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (IsFixedPage())
                        {
                            <div class="card border-info mb-3">
                                <div class="card-header bg-info bg-opacity-10">
                                    <h6 class="mb-0 text-info-emphasis">
                                        <i class="fa-solid fa-info-circle me-2" aria-hidden="true"></i>
                                        Fast systemsida
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (IsHomePage())
                                    {
                                        <p class="mb-3 text-muted">
                                            Detta är startsidan. Den kan inte inaktiveras och visas inte som länk i navigationen.
                                            Åtkomst styrs av sidans kod/behörighet.
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="mb-3 text-muted">
                                            Detta är en fast systemsida. När du inaktiverar sidan tas länken bort från navigationen
                                            och direktbesök ger 404. Åtkomstregler styrs av sidans kod.
                                        </p>
                                    }

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <h6 class="fw-medium text-muted mb-2">
                                                    <i class="fa-solid fa-globe me-2" aria-hidden="true"></i>
                                                    Synlighet för gäster
                                                </h6>
                                                @if (navigationConfig.IsVisibleToGuests)
                                                {
                                                    <div class="alert alert-success py-2 mb-0">
                                                        <small>
                                                            <i class="fa-solid fa-check-circle me-1" aria-hidden="true"></i>
                                                            <strong>Tillgänglig:</strong> Sidan kan besökas av oinloggade användare.
                                                            @if (!HasAnyRestrictions())
                                                            {
                                                                <br />
                                                                <em>Observera: Vissa sektioner kan ha rollbaserad åtkomst.</em>
                                                            }
                                                        </small>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="alert alert-warning py-2 mb-0">
                                                        <small>
                                                            <i class="fa-solid fa-shield-alt me-1" aria-hidden="true"></i>
                                                            <strong>Begränsad:</strong> Sidan kräver inloggning eller specifika roller.
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <h6 class="fw-medium text-muted mb-2">
                                                    <i class="fa-solid fa-user-check me-2" aria-hidden="true"></i>
                                                    Synlighet för medlemmar
                                                </h6>
                                                <div class="alert alert-info py-2 mb-0">
                                                    <small>
                                                        <i class="fa-solid fa-info-circle me-1" aria-hidden="true"></i>
                                                        <strong>Automatisk:</strong> Alla inloggade användare ser länken i navigationen (om aktiv).
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="alert alert-light border-info mt-3">
                                        <small class="text-muted">
                                            <i class="fa-solid fa-lightbulb me-2" aria-hidden="true"></i>
                                            <strong>Förklaring:</strong> Åtkomst styrs av <code>[Authorize]</code>-attribut eller policies i sidans kod.
                                            @if (PageKey.Equals("dokument", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <text>Dokumentsidan har dessutom rollbaserad innehållsfiltrering per kategori.</text>
                                            }
                                            @if (!IsHomePage())
                                            {
                                                <text><br /><strong>Inaktiverad fast sida:</strong> Döljer länken i navigationen och ger 404 vid direktbesök.</text>
                                            }
                                            @if (!HasAnyRestrictions())
                                            {
                                                <text><br /><strong>Innehållsobservation:</strong> Enskilda sektioner kan vara rollstyrda.</text>
                                            }
                                            @if (IsHomePage())
                                            {
                                                <text><br /><strong>Begränsning:</strong> Startsidan kan inte inaktiveras.</text>
                                            }
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card border-success mb-3">
                                <div class="card-header bg-success bg-opacity-10">
                                    <h6 class="mb-0 text-success-emphasis">
                                        <i class="fa-solid fa-edit me-2" aria-hidden="true"></i>
                                        Anpassad sida - Full kontroll
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="mb-3 text-muted">
                                        Detta är en anpassad sida. När du inaktiverar sidan blir den inte besökbar (404) och tas bort från navigationen.
                                    </p>

                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="mb-3">
                                                <label class="form-label fw-medium" for="isVisibleGuests">
                                                    <i class="fa-solid fa-globe me-1" aria-hidden="true"></i>
                                                    Publik synlighet
                                                </label>
                                                <div class="form-check">
                                                    <InputCheckbox id="isVisibleGuests" class="form-check-input"
                                                                   @bind-Value="navigationConfig.IsVisibleToGuests"
                                                                   @onchange="OnPublicVisibilityChanged" />
                                                    <label class="form-check-label">Gör sidan publik (synlig för oinloggade)</label>
                                                </div>
                                                <div class="form-text">
                                                    Rollbehörigheter för inloggade ändras i
                                                    <a href="/admin/pages" class="text-decoration-none">Hantera sidor</a>.
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="alert alert-light border-success mt-3">
                                        <small class="text-muted">
                                            <i class="fa-solid fa-info-circle me-2" aria-hidden="true"></i>
                                            <strong>Anpassad sida:</strong> Ändringar här påverkar både navigation och sidåtkomst.
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary btn-sm" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <text>Sparar...</text>
                            }
                            else
                            {
                                <i class="fa-solid fa-save me-1" aria-hidden="true"></i>
                                <text>Spara navigationsinställningar</text>
                            }
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fa-solid fa-info-circle me-2" aria-hidden="true"></i>
                    Laddar navigationsinställningar...
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string PageKey { get; set; } = "";
    [Parameter] public string? InitialDisplayName { get; set; }
    [Parameter] public EventCallback<string> OnDisplayNameChanged { get; set; }

    private NavigationConfigViewModel? navigationConfig;
    private bool showSettings = false;
    private bool isSaving = false;

    private CustomPageDto? customPage;
    private bool showInNavigation = true;

    private readonly List<string> pageAuthorizeRoles = new();

    private static readonly HashSet<string> FixedPages = new(StringComparer.OrdinalIgnoreCase)
    {
        "home","omkonsortiet","omsystemet","visioner","kontaktaoss",
        "dokument","medlemsnytt","forvaltning","forvnsg","forstyrelsen"
    };

    protected override async Task OnInitializedAsync()
    {
        DetectPageAuthorizeRoles();
        await LoadNavigationConfig();

        if (navigationConfig != null && IsFixedPage())
        {
            SyncVisibilityWithRoleRestrictions();
        }
    }

    private async Task LoadNavigationConfig()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");

            var navResponse = await httpClient.GetAsync($"api/navigation/page/{PageKey}");
            if (navResponse.IsSuccessStatusCode)
            {
                var dto = await navResponse.Content.ReadFromJsonAsync<NavigationConfigDto>();
                if (dto != null)
                {
                    navigationConfig = new NavigationConfigViewModel
                    {
                        Id = dto.Id,
                        PageKey = dto.PageKey,
                        DisplayName = dto.DisplayName,
                        ItemType = dto.ItemType,
                        SortOrder = dto.SortOrder,
                        IsVisibleToGuests = dto.IsVisibleToGuests,
                        IsVisibleToMembers = dto.IsVisibleToMembers,
                        IsActive = dto.IsActive,
                        IsSystemItem = dto.IsSystemItem,
                        RequiredRoles = dto.RequiredRoles ?? string.Empty
                    };
                }
            }
            else if (navResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationConfig = new NavigationConfigViewModel
                {
                    PageKey = PageKey,
                    DisplayName = InitialDisplayName ?? PageKey,
                    ItemType = IsFixedPage() ? "static" : "custom",
                    SortOrder = 50,
                    IsVisibleToGuests = true,
                    IsVisibleToMembers = true,
                    IsActive = true,
                    RequiredRoles = string.Empty
                };
            }

            var pageResponse = await httpClient.GetAsync($"api/custompage/{PageKey}");
            if (pageResponse.IsSuccessStatusCode)
            {
                customPage = await pageResponse.Content.ReadFromJsonAsync<CustomPageDto>();
                if (customPage != null)
                {
                    navigationConfig ??= new NavigationConfigViewModel();

                    navigationConfig.PageKey = customPage.PageKey;
                    navigationConfig.DisplayName = customPage.DisplayName ?? navigationConfig.DisplayName ?? customPage.PageKey;
                    navigationConfig.SortOrder = customPage.SortOrder;

                    navigationConfig.IsActive = customPage.IsActive;
                    showInNavigation = customPage.ShowInNavigation;

                    var roles = customPage.RequiredRoles ?? new List<string>();
                    navigationConfig.IsVisibleToGuests = roles.Count == 0;
                    navigationConfig.RequiredRoles = roles.Count > 0 ? string.Join(",", roles) : string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda navigationsinställningar för {PageKey}", PageKey);
            await Toast.Error("Kunde inte ladda navigationsinställningar");
        }
    }

    private void DetectPageAuthorizeRoles()
    {
        try
        {
            if (PageKey.Equals("dokument", StringComparison.OrdinalIgnoreCase))
            {
                pageAuthorizeRoles.Add("RequiresAuthentication");
                pageAuthorizeRoles.Add("ExcludeNewUser");
                return;
            }

            var componentType = PageKey switch
            {
                "home" => typeof(KronoxFront.Components.Pages.Home),
                "omkonsortiet" => typeof(KronoxFront.Components.Pages.Omkonsortiet),
                "omsystemet" => typeof(KronoxFront.Components.Pages.Omsystemet),
                "visioner" => typeof(KronoxFront.Components.Pages.Visionerverksamhetside),
                "kontaktaoss" => typeof(KronoxFront.Components.Pages.Kontaktaoss),
                "medlemsnytt" => typeof(KronoxFront.Components.Pages.Medlemsnytt),
                "forvaltning" => typeof(KronoxFront.Components.Pages.Forvaltning),
                "forvnsg" => typeof(KronoxFront.Components.Pages.Forvnsg),
                "forstyrelsen" => typeof(KronoxFront.Components.Pages.Forstyrelsen),
                _ => null
            };

            if (componentType != null)
            {
                var authorizeAttrs = componentType.GetCustomAttributes<AuthorizeAttribute>();
                foreach (var attr in authorizeAttrs)
                {
                    if (!string.IsNullOrEmpty(attr.Roles))
                    {
                        var roles = attr.Roles.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
                        pageAuthorizeRoles.AddRange(roles);
                    }
                    else
                    {
                        pageAuthorizeRoles.Add("RequiresAuthentication");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Kunde inte hämta Authorize‑attribut för {PageKey}", PageKey);
        }
    }

    private bool IsFixedPage() => !string.IsNullOrEmpty(PageKey) && FixedPages.Contains(PageKey);
    private bool IsHomePage() => string.Equals(PageKey, "home", StringComparison.OrdinalIgnoreCase);

    private void SyncVisibilityWithRoleRestrictions()
    {
        if (navigationConfig == null || !IsFixedPage()) return;
        navigationConfig.IsVisibleToGuests = !HasAnyRestrictions();
        navigationConfig.IsVisibleToMembers = true;
    }

    private bool HasAnyRestrictions()
    {
        var effectiveRoles = GetEffectiveRoles();
        return effectiveRoles.Any();
    }

    private List<string> GetEffectiveRoles()
    {
        if (pageAuthorizeRoles.Any()) return pageAuthorizeRoles;
        if (customPage?.RequiredRoles is { } cpRoles && cpRoles.Any()) return cpRoles;

        if (!string.IsNullOrEmpty(navigationConfig?.RequiredRoles))
            return navigationConfig!.RequiredRoles!.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

        return new List<string>();
    }

    private string GetAccessTitle()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any()) return "Tillgänglig för alla besökare";
        if (roles.Contains("ExcludeNewUser")) return "Kräver inloggning med rollbaserad innehållsfiltrering";
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1) return "Kräver inloggning";

        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        if (!specificRoles.Any()) return "Kräver inloggning";

        var roleNames = specificRoles.Select(GetRoleDisplayName);
        return specificRoles.Count == 1
            ? $"Endast tillgänglig för {roleNames.First()}"
            : $"Endast tillgänglig för {string.Join(" och ", roleNames)}-roller";
    }

    private string GetAccessDescription()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any())
            return "Denna sida är öppen för alla besökare, inklusive oinloggade användare, men vissa sektioner kan ha rollbaserad åtkomst";

        if (roles.Contains("ExcludeNewUser"))
            return "Sidan kräver inloggning (utom nya användare) och filtrerar innehåll baserat på användarens roller";

        if (roles.Contains("RequiresAuthentication") && roles.Count == 1)
            return "Sidan kräver inloggning men har inga specifika rollbegränsningar";

        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        if (!specificRoles.Any()) return "Sidan kräver inloggning men har inga specifika rollbegränsningar";

        return $"Endast användare med {(specificRoles.Count == 1 ? "denna roll" : "dessa roller")} kan komma åt sidan";
    }

    private string GetAccessIcon()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any()) return "fa-solid fa-globe text-success";
        if (roles.Contains("ExcludeNewUser")) return "fa-solid fa-user-shield text-warning";
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1) return "fa-solid fa-user text-info";
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "fa-solid fa-user-shield text-warning" : "fa-solid fa-user text-info";
    }

    private string GetAccessCardClass()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any()) return "bg-success bg-opacity-10 border-success";
        if (roles.Contains("ExcludeNewUser")) return "bg-warning bg-opacity-10 border-warning";
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1) return "bg-info bg-opacity-10 border-info";
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "bg-warning bg-opacity-10 border-warning" : "bg-info bg-opacity-10 border-info";
    }

    private string GetAccessTextClass()
    {
        var roles = GetEffectiveRoles();
        if (!roles.Any()) return "text-success-emphasis";
        if (roles.Contains("ExcludeNewUser")) return "text-warning-emphasis";
        if (roles.Contains("RequiresAuthentication") && roles.Count == 1) return "text-info-emphasis";
        var specificRoles = roles.Where(r => r != "RequiresAuthentication" && r != "ExcludeNewUser").ToList();
        return specificRoles.Any() ? "text-warning-emphasis" : "text-info-emphasis";
    }

    private string GetRoleDisplayName(string role) => role switch
    {
        "Admin" => "Administratör",
        "Styrelse" => "Styrelse",
        "Medlem" => "Medlem",
        "Ny användare" => "Ny användare",
        "RequiresAuthentication" => "Inloggade användare",
        "ExcludeNewUser" => "Verifierade användare",
        _ => role
    };

    private void ToggleSettings() => showSettings = !showSettings;

    private async Task OnFixedIsActiveChanged(ChangeEventArgs _)
    {
        if (navigationConfig == null) return;
        SyncVisibilityWithRoleRestrictions();
        await SaveNavigationConfigOnly();
    }

    private Task OnShowInNavigationChanged(ChangeEventArgs _) => SaveNavigationSettings();
    private Task OnIsActiveChanged(ChangeEventArgs _) => SaveNavigationSettings();
    private Task OnPublicVisibilityChanged(ChangeEventArgs _) => SaveNavigationSettings();

    private async Task SaveNavigationSettings()
    {
        if (navigationConfig == null) return;

        // Trimma och validera visningsnamn innan spar
        navigationConfig.DisplayName = (navigationConfig.DisplayName ?? string.Empty).Trim();
        if (!IsFixedPage() && string.IsNullOrWhiteSpace(navigationConfig.DisplayName))
        {
            await Toast.Error("Länktext i navigation får inte vara tom.");
            return;
        }

        if (IsFixedPage())
        {
            SyncVisibilityWithRoleRestrictions();
            await SaveNavigationConfigOnly();
            return;
        }

        if (customPage is null)
        {
            await Toast.Error("Kunde inte hitta sidans grunddata (CustomPage).");
            return;
        }

        if (isSaving) return;
        isSaving = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");

            var currentRoles = customPage.RequiredRoles ?? new List<string>();
            var updatedRoles = navigationConfig.IsVisibleToGuests
                ? new List<string>()
                : (currentRoles.Any() ? new List<string>(currentRoles) : new List<string> { "Medlem" });

            var updateRequest = new
            {
                Title = customPage.Title,
                DisplayName = navigationConfig.DisplayName,
                Description = customPage.Description,
                IsActive = navigationConfig.IsActive,
                ShowInNavigation = showInNavigation,
                NavigationType = customPage.NavigationType,
                ParentPageKey = customPage.ParentPageKey,
                SortOrder = navigationConfig.SortOrder,
                RequiredRoles = updatedRoles
            };

            var resp = await httpClient.PutAsJsonAsync($"api/custompage/{PageKey}", updateRequest);
            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                Logger.LogWarning("Fel vid PUT custompage/{PageKey}: {Status} - {Body}", PageKey, resp.StatusCode, err);
                await Toast.Error("Fel vid sparning av sidinställningar");
                return;
            }

            customPage.DisplayName = navigationConfig.DisplayName;
            customPage.SortOrder = navigationConfig.SortOrder;
            customPage.IsActive = navigationConfig.IsActive;
            customPage.ShowInNavigation = showInNavigation;
            customPage.RequiredRoles = updatedRoles;

            navigationConfig.IsVisibleToGuests = updatedRoles.Count == 0;
            navigationConfig.RequiredRoles = updatedRoles.Count > 0 ? string.Join(",", updatedRoles) : string.Empty;

            Cache.InvalidateGroup("navigation");
            await Toast.Success("Navigationsinställningar sparade!");

            if (OnDisplayNameChanged.HasDelegate)
                await OnDisplayNameChanged.InvokeAsync(navigationConfig.DisplayName ?? string.Empty);

            NavEvents.NotifyUpdated();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av navigationsinställningar för {PageKey}", PageKey);
            await Toast.Error("Fel vid sparning av navigationsinställningar");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task SaveNavigationConfigOnly()
    {
        if (navigationConfig == null) return;

        // Trimma visningsnamn (kan vara viktigt om backend validerar)
        navigationConfig.DisplayName = (navigationConfig.DisplayName ?? string.Empty).Trim();

        if (isSaving) return;
        isSaving = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("KronoxAPI");

            if (navigationConfig.Id == 0)
            {
                var createRequest = new NavigationConfigDto
                {
                    PageKey = navigationConfig.PageKey,
                    DisplayName = navigationConfig.DisplayName,
                    ItemType = navigationConfig.ItemType,
                    SortOrder = navigationConfig.SortOrder,
                    IsVisibleToGuests = navigationConfig.IsVisibleToGuests,
                    IsVisibleToMembers = navigationConfig.IsVisibleToMembers,
                    IsActive = navigationConfig.IsActive,
                    IsSystemItem = navigationConfig.IsSystemItem,
                    RequiredRoles = navigationConfig.RequiredRoles ?? string.Empty
                };

                var postResp = await httpClient.PostAsJsonAsync("api/navigation", createRequest);
                if (!postResp.IsSuccessStatusCode)
                {
                    var err = await postResp.Content.ReadAsStringAsync();
                    Logger.LogWarning("Kunde inte skapa navigation för {PageKey}: {Status} - {Body}", PageKey, postResp.StatusCode, err);
                    await Toast.Error($"Kunde inte skapa navigation: {err}");
                    return;
                }

                var getResp = await httpClient.GetAsync($"api/navigation/page/{navigationConfig.PageKey}");
                if (getResp.IsSuccessStatusCode)
                {
                    var dto = await getResp.Content.ReadFromJsonAsync<NavigationConfigDto>();
                    if (dto != null)
                    {
                        navigationConfig.Id = dto.Id;
                    }
                }
            }
            else
            {
                var updateRequest = new NavigationUpdateDto
                {
                    DisplayName = navigationConfig.DisplayName,
                    SortOrder = navigationConfig.SortOrder,
                    GuestSortOrder = navigationConfig.GuestSortOrder,
                    MemberSortOrder = navigationConfig.MemberSortOrder,
                    IsVisibleToGuests = navigationConfig.IsVisibleToGuests,
                    IsVisibleToMembers = navigationConfig.IsVisibleToMembers,
                    IsActive = navigationConfig.IsActive,
                    RequiredRoles = navigationConfig.RequiredRoles ?? string.Empty
                };

                var putResp = await httpClient.PutAsJsonAsync($"api/navigation/{navigationConfig.Id}", updateRequest);
                if (!putResp.IsSuccessStatusCode)
                {
                    var err = await putResp.Content.ReadAsStringAsync();
                    Logger.LogWarning("Kunde inte uppdatera navigation {Id} för {PageKey}: {Status} - {Body}", navigationConfig.Id, PageKey, putResp.StatusCode, err);
                    await Toast.Error($"Kunde inte uppdatera navigation: {err}");
                    return;
                }
            }

            Cache.InvalidateGroup("navigation");
            await Toast.Success("Navigationsinställningar sparade!");
            if (OnDisplayNameChanged.HasDelegate)
                await OnDisplayNameChanged.InvokeAsync(navigationConfig.DisplayName ?? string.Empty);
            NavEvents.NotifyUpdated();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av navigationskonfiguration för {PageKey}", PageKey);
            await Toast.Error("Fel vid sparning av navigationsinställningar");
        }
        finally
        {
            isSaving = false;
        }
    }
}