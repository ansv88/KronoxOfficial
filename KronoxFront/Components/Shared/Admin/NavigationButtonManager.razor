@using KronoxFront.ViewModels
@inject IConfiguration Configuration

<div class="card mb-4">
    <div class="card-header bg-light">
        <h3 class="h5 mb-0">Navigeringsknappar</h3>
    </div>
    <div class="card-body">
        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="show-nav-buttons"
                   @bind="ShowNavigationButtons" @bind:after="OnShowNavigationButtonsChanged" />
            <label class="form-check-label" for="show-nav-buttons">Visa navigeringsknappar</label>
        </div>

        @if (ShowNavigationButtons)
        {
            @if (HasAnyInvalidMaskedUrl)
            {
                <div class="alert alert-warning" role="alert">
                    <i class="fa-solid fa-triangle-exclamation me-1" aria-hidden="true"></i>
                    En eller flera knappar använder en maskerad länk via <code>/go/&lt;slug&gt;</code> som saknas i Redirects‑konfigurationen. Lägg till slug i <code>appsettings.json</code> under <code>Redirects</code>, eller ändra URL.
                </div>
            }

            @if (NavigationButtons.Any())
            {
                <div class="mb-3">
                    <h6>Befintliga knappar:</h6>
                    @foreach (var (button, index) in NavigationButtons.OrderBy(b => b.SortOrder).Select((b, i) => (b, i)))
                    {
                        var missingSlug = GetMissingRedirectSlug(button.Url);
                        var invalidUrl = !string.IsNullOrWhiteSpace(button.Url) && !IsValidUrlOrPath(button.Url);
                        <div class="row mb-3 p-3 border rounded">
                            <div class="col-md-4">
                                <label class="form-label small fw-medium" for="btn-text-@index">Knapptext</label>
                                <input id="btn-text-@index" type="text" class="form-control form-control-sm"
                                       placeholder="T.ex. Manualen"
                                       @bind="button.Text" @bind:after="OnButtonFieldChanged" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label small fw-medium" for="btn-url-@index">Länk</label>
                                <input id="btn-url-@index" type="text" class="form-control form-control-sm"
                                       placeholder="T.ex. /go/manualen eller https://exempel.se"
                                       @bind="button.Url" @bind:after="OnButtonFieldChanged" />
                                @if (!string.IsNullOrWhiteSpace(missingSlug))
                                {
                                    <div class="form-text text-danger">
                                        Slug <strong>@missingSlug</strong> saknas i Redirects. Lägg till <code>@missingSlug</code> i appsettings under <code>Redirects</code> eller ändra URL.
                                    </div>
                                }
                                else if (invalidUrl)
                                {
                                    <div class="form-text text-danger">
                                        Ogiltig URL. Ange absolut URL (https://...) eller en relativ sökväg som börjar med <code>/</code>.
                                    </div>
                                }
                                else
                                {
                                    <div class="form-text">
                                        Tips: Använd <code>/go/&lt;slug&gt;</code> om du vill maskera extern mål‑URL (hover visar endast den interna vägen).
                                    </div>
                                }
                            </div>
                            <div class="col-md-2">
                                <label class="form-label small fw-medium" for="btn-icon-@index">Font Awesome ikon</label>
                                <input id="btn-icon-@index" type="text" class="form-control form-control-sm"
                                       placeholder="T.ex. fa-solid fa-arrow-right"
                                       @bind="button.IconClass" @bind:after="OnButtonFieldChanged" />
                                <div class="form-text small">
                                    <a href="https://fontawesome.com/icons" target="_blank" class="text-decoration-none small" rel="noopener">fontawesome.com/icons</a>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label small fw-medium">Åtgärder</label>
                                <div class="d-flex gap-1">
                                    @if (index > 0)
                                    {
                                        <button type="button" class="btn btn-sm btn-outline-secondary"
                                                @onclick="() => MoveButtonUp(button)" title="Flytta upp" aria-label="Flytta upp">
                                            <i class="fa-solid fa-arrow-up" aria-hidden="true"></i>
                                        </button>
                                    }
                                    @if (index < NavigationButtons.Count - 1)
                                    {
                                        <button type="button" class="btn btn-sm btn-outline-secondary"
                                                @onclick="() => MoveButtonDown(button)" title="Flytta ner" aria-label="Flytta ner">
                                            <i class="fa-solid fa-arrow-down" aria-hidden="true"></i>
                                        </button>
                                    }
                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                            @onclick="() => RemoveButton(button)" title="Ta bort" aria-label="Ta bort">
                                        <i class="fa-solid fa-times" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <div class="mb-3">
                <h6>Lägg till ny knapp:</h6>
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label fw-medium" for="new-btn-text">Knapptext</label>
                        <input id="new-btn-text" type="text" class="form-control"
                               placeholder="T.ex. Manualen"
                               @bind="newButtonText" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-medium" for="new-btn-url">Länk</label>
                        <input id="new-btn-url" type="text" class="form-control"
                               placeholder="T.ex. /go/manualen, /anvandartraff eller https://exempel.se"
                               @bind="newButtonUrl" />
                        @if (!string.IsNullOrWhiteSpace(GetMissingRedirectSlug(newButtonUrl)))
                        {
                            <div class="form-text text-danger">
                                Slug <strong>@GetMissingRedirectSlug(newButtonUrl)</strong> saknas i Redirects. Lägg till i appsettings eller ändra URL.
                            </div>
                        }
                        else if (!string.IsNullOrWhiteSpace(newButtonUrl) && !IsValidUrlOrPath(newButtonUrl))
                        {
                            <div class="form-text text-danger">
                                Ogiltig URL. Ange absolut URL (https://...) eller en relativ sökväg som börjar med <code>/</code>.
                            </div>
                        }
                        else
                        {
                            <div class="form-text">
                                Använd <code>/go/&lt;slug&gt;</code> för att dölja extern mål‑URL i hover/statusrad.
                            </div>
                        }
                    </div>
                    <div class="col-md-2">
                        <label class="form-label fw-medium" for="new-btn-icon">Font Awesome ikon</label>
                        <input id="new-btn-icon" type="text" class="form-control"
                               placeholder="T.ex. fa-solid fa-arrow-right"
                               @bind="newButtonIcon" />
                        <div class="form-text small">
                            <a href="https://fontawesome.com/icons" target="_blank" class="text-decoration-none small" rel="noopener">
                                fontawesome.com/icons
                            </a>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label fw-medium" aria-hidden="true">&nbsp;</label>
                        <button type="button" class="btn btn-primary d-block"
                                @onclick="AddButton"
                                disabled="@IsNewButtonInvalid">
                            <i class="fa-solid fa-plus" aria-hidden="true"></i> Lägg till
                        </button>
                    </div>
                </div>
            </div>

            @if (NavigationButtons.Any())
            {
                <div class="alert alert-info">
                    <strong>Förhandsgranskning:</strong><br />
                    <div class="d-flex flex-wrap gap-2 mt-2">
                        @foreach (var button in NavigationButtons.OrderBy(b => b.SortOrder))
                        {
                            <span class="btn btn-dark btn-sm px-3 py-2">
                                @button.Text <i class="@button.IconClass ms-1" aria-hidden="true"></i>
                            </span>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public bool ShowNavigationButtons { get; set; }
    [Parameter] public List<NavigationButtonViewModel> NavigationButtons { get; set; } = new();
    [Parameter] public EventCallback<bool> ShowNavigationButtonsChanged { get; set; }
    [Parameter] public EventCallback NavigationButtonsChanged { get; set; }

    private string newButtonText = "";
    private string newButtonUrl = "";
    private string newButtonIcon = "fa-solid fa-arrow-right";

    // Redirect-slugs hämtade från appsettings: "Redirects": { "<slug>": "target" }
    private HashSet<string> redirectSlugs = new(StringComparer.OrdinalIgnoreCase);

    protected override Task OnInitializedAsync()
    {
        var section = Configuration.GetSection("Redirects");
        foreach (var child in section.GetChildren())
        {
            if (!string.IsNullOrWhiteSpace(child.Key))
                redirectSlugs.Add(child.Key);
        }
        return Task.CompletedTask;
    }

    private bool HasAnyInvalidMaskedUrl =>
        NavigationButtons.Any(b => !string.IsNullOrWhiteSpace(GetMissingRedirectSlug(b.Url)));

    private static bool IsMaskedGoUrl(string? url)
        => !string.IsNullOrWhiteSpace(url) && url!.StartsWith("/go/", StringComparison.OrdinalIgnoreCase);

    private static string ExtractGoSlug(string url)
    {
        if (!IsMaskedGoUrl(url)) return "";
        var withoutPrefix = url[4..]; // hoppa över "/go/"
        var end = withoutPrefix.IndexOfAny(new[] { '/', '?', '#' });
        return end >= 0 ? withoutPrefix[..end] : withoutPrefix;
    }

    private string GetMissingRedirectSlug(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return "";
        if (!IsMaskedGoUrl(url)) return "";

        var slug = ExtractGoSlug(url);
        if (string.IsNullOrWhiteSpace(slug)) return "";
        return redirectSlugs.Contains(slug) ? "" : slug;
    }

    private bool IsValidUrlOrPath(string url)
    {
        // Tillåt absolut http/https eller en relativ sökväg som börjar med "/"
        if (url.StartsWith("/", StringComparison.Ordinal)) return true;
        return Uri.TryCreate(url, UriKind.Absolute, out var u) && (u.Scheme == Uri.UriSchemeHttp || u.Scheme == Uri.UriSchemeHttps);
    }

    private bool IsNewButtonInvalid =>
        string.IsNullOrWhiteSpace(newButtonText) ||
        string.IsNullOrWhiteSpace(newButtonUrl) ||
        !string.IsNullOrWhiteSpace(GetMissingRedirectSlug(newButtonUrl)) ||
        !IsValidUrlOrPath(newButtonUrl);

    private async Task OnShowNavigationButtonsChanged()
    {
        if (ShowNavigationButtonsChanged.HasDelegate)
        {
            await ShowNavigationButtonsChanged.InvokeAsync(ShowNavigationButtons);
        }
    }

    private async Task OnButtonFieldChanged()
    {
        // Trimmar fält och notifierar förälder
        foreach (var b in NavigationButtons)
        {
            b.Text = b.Text?.Trim() ?? "";
            b.Url = b.Url?.Trim() ?? "";
            b.IconClass = b.IconClass?.Trim() ?? "";
        }
        await NotifyChange();
    }

    private async Task AddButton()
    {
        if (IsNewButtonInvalid) return;

        NavigationButtons.Add(new NavigationButtonViewModel
        {
            Text = newButtonText.Trim(),
            Url = newButtonUrl.Trim(),
            IconClass = string.IsNullOrWhiteSpace(newButtonIcon) ? "fa-solid fa-arrow-right" : newButtonIcon.Trim(),
            SortOrder = NavigationButtons.Count
        });

        // Rensa fälten
        newButtonText = "";
        newButtonUrl = "";
        newButtonIcon = "fa-solid fa-arrow-right";

        await NotifyChange();
    }

    private async Task RemoveButton(NavigationButtonViewModel button)
    {
        NavigationButtons.Remove(button);
        for (int i = 0; i < NavigationButtons.Count; i++)
        {
            NavigationButtons[i].SortOrder = i;
        }
        await NotifyChange();
    }

    private async Task MoveButtonUp(NavigationButtonViewModel button)
    {
        var index = NavigationButtons.IndexOf(button);
        if (index > 0)
        {
            NavigationButtons.RemoveAt(index);
            NavigationButtons.Insert(index - 1, button);

            for (int i = 0; i < NavigationButtons.Count; i++)
                NavigationButtons[i].SortOrder = i;

            await NotifyChange();
        }
    }

    private async Task MoveButtonDown(NavigationButtonViewModel button)
    {
        var index = NavigationButtons.IndexOf(button);
        if (index < NavigationButtons.Count - 1)
        {
            NavigationButtons.RemoveAt(index);
            NavigationButtons.Insert(index + 1, button);

            for (int i = 0; i < NavigationButtons.Count; i++)
                NavigationButtons[i].SortOrder = i;

            await NotifyChange();
        }
    }

    private async Task NotifyChange()
    {
        if (NavigationButtonsChanged.HasDelegate)
        {
            await NavigationButtonsChanged.InvokeAsync();
        }
    }
}