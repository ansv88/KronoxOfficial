@using System.Text.Json
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms
@using KronoxFront.ViewModels
@using KronoxFront.Services
@inject IJSRuntime JS
@inject ILogger<FeatureSectionManager> Logger
@inject IToastService ToastService

@* 
   Komponent för att hantera innehållssektioner på hemsidan.
   Tillåter administratörer att lägga till, ta bort, ändra och sortera sektioner 
   med rubrik, innehåll och valfri bild.
*@

<div class="card mb-4">
    <div class="card-header bg-light">
        <h3 class="h5 mb-0">Featuresektioner</h3>
    </div>
    <div class="card-body">
        @foreach (var (item, index) in Sections.Select((section, index) => (section, index)))
        {
            <div class="card mb-3">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="h6 mb-0">Sektion @(index + 1)</h4>
                    <div>
                        @if (index > 0)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveSection(index, -1)" aria-label="Flytta sektion upp">
                                <i class="fa-solid fa-arrow-up"></i>
                            </button>
                        }
                        @if (index < Sections.Count - 1)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveSection(index, 1)" aria-label="Flytta sektion ner">
                                <i class="fa-solid fa-arrow-down"></i>
                            </button>
                        }
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveSection(index)" aria-label="Ta bort sektion">
                            <i class="fa-solid fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="mb-2 form-check">
                                <input type="checkbox" class="form-check-input" id="@($"has-image-{index}")"
                                       @bind="item.HasImage" @bind:after="() => SectionsChanged()" aria-label="Inkludera bild i sektion @(index + 1)" />
                                <label class="form-check-label" for="@($"has-image-{index}")">Inkludera bild</label>
                            </div>
                            @if (item.HasImage)
                            {
                                <span class="form-label">Sektionsbild</span>
                                <div class="border p-3 mb-2 bg-light text-center" style="min-height: 150px;">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" class="img-fluid img-thumbnail mb-2"
                                             style="max-height: 150px; cursor: pointer"
                                             @onclick="() => PreviewImage(item.ImageUrl)"
                                             alt="@(string.IsNullOrEmpty(item.ImageAltText) ? $"Bild för sektion {index + 1}" : item.ImageAltText)" />
                                        <div class="mt-2 d-flex justify-content-center">
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearImage(index)" aria-label="Ta bort sektionsbild">
                                                <i class="fa-solid fa-times"></i> Ta bort bild
                                            </button>
                                        </div>
                                        <div class="mt-2">
                                            <label class="form-label" for="@($"image-alt-{index}")">Bildbeskrivning (alt-text):</label>
                                            <input id="@($"image-alt-{index}")"
                                                   type="text"
                                                   class="form-control form-control-sm"
                                                   @bind="item.ImageAltText"
                                                   @bind:after="() => SectionsChanged()"
                                                   placeholder="Beskriv bilden för tillgänglighet"
                                                   aria-label="Bildbeskrivning för sektion @(index + 1)" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            @{
                                                var inputFileAriaLabel = $"Välj bild för sektion {index + 1}";
                                            }
                                            <InputFile OnChange="@(e => HandleFileSelected(e, index))"
                                                       class="form-control"
                                                       accept="image/*"
                                                       aria-label="@inputFileAriaLabel" />
                                            <div class="text-muted small mt-2">
                                                Klicka för att välja bild (rekommenderad storlek: 800x600px)
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label" for="@($"title-{index}")">Rubrik</label>
                                <input type="text" class="form-control" id="@($"title-{index}")"
                                       @bind="item.Title" @bind:after="() => SectionsChanged()"
                                       aria-label="Rubrik för sektion @(index + 1)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="@($"feature-editor-{index}")">Innehåll</label>
                                <textarea id="@($"feature-editor-{index}")"
                                          @bind="item.Content"
                                          @bind:event="oninput"
                                          @ref="editorTextAreas[index]"
                                          aria-label="Innehåll för sektion @(index + 1)">
                                    </textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <button type="button" class="btn btn-outline-primary" @onclick="AddSection" aria-label="Lägg till ny sektion">
            <i class="fa-solid fa-plus me-1"></i> Lägg till sektion
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(previewImageUrl))
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
         role="dialog" aria-modal="true" aria-labelledby="imagePreviewTitle">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content border-0 bg-transparent">
                <span id="imagePreviewTitle" class="visually-hidden">Förhandsgranskning av bild</span>
                <button type="button" class="btn-close btn-close-white ms-auto me-n4 mt-n4"
                        @onclick="ClosePreviewImage"
                        aria-label="Stäng bildförhandsvisning"></button>
                <img src="@previewImageUrl" class="img-fluid rounded-3" alt="Förhandsgranskad bild" />
            </div>
        </div>
    </div>
}

@if (showImageUploadDialog)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
         role="dialog" aria-modal="true" aria-labelledby="uploadImageTitle">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="uploadImageTitle">Ladda upp bild</h5>
                    <button type="button" class="btn-close" @onclick="CloseImageUploadDialog" aria-label="Stäng"></button>
                </div>
                <div class="modal-body">
                    @if (selectedFile != null)
                    {
                        <div class="mb-3">
                            <label class="form-label">Vald fil: @selectedFile.Name (@FormatFileSize(selectedFile.Size))</label>
                        </div>
                    }
                    <div class="mb-3">
                        <label for="altText" class="form-label">Bildbeskrivning (alt-text):</label>
                        <input type="text" class="form-control" id="altText" @bind="tempAltText"
                               placeholder="Beskriv bilden för tillgänglighet"
                               aria-label="Bildbeskrivning för uppladdad bild" />
                        <div class="form-text">
                            Detta hjälper skärmläsare och förbättrar tillgängligheten för användare med synskador.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseImageUploadDialog"
                            aria-label="Avbryt uppladdning">
                        Avbryt
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="UploadSelectedImage"
                            disabled="@(selectedFile == null)"
                            aria-label="Ladda upp vald bild">
                        Ladda upp
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<FeatureSectionViewModel> Sections { get; set; } = new();
    [Parameter] public EventCallback OnSectionsChanged { get; set; }
    [Parameter] public EventCallback<ImageUploadInfo> OnImageUpload { get; set; }
    [Parameter] public EventCallback<ImageDeleteInfo> OnImageDelete { get; set; }

    // Bildförhandsvisningsegenskaper
    private string? previewImageUrl;
    private bool showImageUploadDialog = false;
    private IBrowserFile? selectedFile;
    private int? currentSectionIndex;
    private string tempAltText = string.Empty;

    // Texteditor-referenser
    private Dictionary<int, ElementReference> editorTextAreas = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeTinyMCE();
        }
    }

    // Initierar TinyMCE-editorn för alla sektioner
    private async Task InitializeTinyMCE()
    {
        try
        {
            foreach (var (index, _) in Sections.Select((_, i) => (i, _)))
            {
                var editorId = $"feature-editor-{index}";
                await JS.InvokeVoidAsync("initTinyMCE", editorId);

                // Verifiera att editorn skapades
                try
                {
                    var exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
                    if (!exists)
                    {
                        Logger.LogWarning("TinyMCE-editor {EditorId} skapades inte vid första försöket, försöker igen", editorId);
                        await Task.Delay(100);
                        await JS.InvokeVoidAsync("initTinyMCE", editorId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Kunde inte verifiera om TinyMCE-editor {EditorId} existerar, fortsätter ändå", editorId);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editorer");
            await ToastService.Error("Ett fel uppstod vid initialisering av texteditorer");
        }
    }

    // Uppdaterar alla TinyMCE-editorer i sektionerna
    public async Task RefreshEditors()
    {
        try
        {
            await JS.InvokeVoidAsync("destroyAllEditors");
            await InitializeTinyMCE();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppdatering av TinyMCE-editorer");
            await ToastService.Error("Ett fel uppstod vid uppdatering av editorer");
        }
    }

    // Lägger till en ny sektion och initierar dess TinyMCE-editor
    private async Task AddSection()
    {
        try
        {
            int newIndex = Sections.Count;

            // Skapa ny sektion med standardvärden
            Sections.Add(new FeatureSectionViewModel
                {
                    Id = 0, // Ny post får temporärt ID 0
                    PageKey = "home",
                    Title = "Ny sektion",
                    Content = "<p>Lägg till innehåll här...</p>",
                    ImageUrl = "",
                    ImageAltText = "",
                    HasImage = true,
                    SortOrder = newIndex
                });

            // Skapa referens för textareaelement om den inte redan finns
            if (!editorTextAreas.ContainsKey(newIndex))
            {
                editorTextAreas[newIndex] = new ElementReference();
            }

            // Notifiera om ändringar och uppdatera UI
            SectionsChanged();
            StateHasChanged();

            // Ge tid för DOM att uppdateras före initialisering av editorn
            await Task.Delay(100);

            // Initiera TinyMCE-editor för den nya sektionen
            await InitializeSectionEditor(newIndex);

            Logger.LogInformation("Ny sektion #{Index} har lagts till", newIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid tillägg av ny sektion");
            await ToastService.Error("Ett fel uppstod när en ny sektion skulle läggas till");
        }
    }

    // Initialiserar TinyMCE-editorn för en specifik sektion
    private async Task InitializeSectionEditor(int index)
    {
        string editorId = $"feature-editor-{index}";

        try
        {
            await JS.InvokeVoidAsync("initTinyMCE", editorId);

            // Verifiera att editorn faktiskt skapades
            var exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
            if (!exists)
            {
                Logger.LogWarning("TinyMCE-editor {EditorId} skapades inte vid första försöket, försöker igen", editorId);
                await Task.Delay(200);
                await JS.InvokeVoidAsync("initTinyMCE", editorId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editor {EditorId} för sektion #{Index}", editorId, index);
            throw; // Kasta vidare för att huvudmetoden ska hantera det
        }
    }

    // Information om bild som ska laddas upp
    public class ImageUploadInfo
    {
        public IBrowserFile? File { get; set; }
        public int SectionIndex { get; set; }
        public FeatureSectionViewModel? Section { get; set; }
        public Action? CloseModal { get; set; }
    }

    // Information om bild som ska tas bort
    public class ImageDeleteInfo
    {
        public int SectionIndex { get; set; }
        public string? ImageUrl { get; set; }
    }

    // Tar bort en sektion med angivet index
    private void RemoveSection(int index)
    {
        try
        {
            if (index >= 0 && index < Sections.Count)
            {
                Sections.RemoveAt(index);
                SectionsChanged();
                Logger.LogInformation("Sektion #{Index} borttagen", index);
            }
            else
            {
                Logger.LogWarning("Försökte ta bort sektion med ogiltigt index: {Index}", index);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid borttagning av sektion #{Index}", index);
            ToastService.Error("Ett fel uppstod när sektionen skulle tas bort").GetAwaiter().GetResult();
        }
    }

    // Flyttar en sektion uppåt eller nedåt i listan
    private void MoveSection(int index, int direction)
    {
        try
        {
            int newIndex = index + direction;
            if (newIndex >= 0 && newIndex < Sections.Count)
            {
                var item = Sections[index];
                Sections.RemoveAt(index);
                Sections.Insert(newIndex, item);
                SectionsChanged();
            }
            else
            {
                Logger.LogWarning("Försökte flytta sektion till ogiltig position: {Index} till {NewIndex}", index, newIndex);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid flyttning av sektion #{Index} i riktning {Direction}", index, direction);
            ToastService.Error("Ett fel uppstod när sektionen skulle flyttas").GetAwaiter().GetResult();
        }
    }

    // Notifierar förälderkomponenten om att sektioner har ändrats
    private void SectionsChanged()
    {
        try
        {
            if (OnSectionsChanged.HasDelegate)
            {
                _ = OnSectionsChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid notifiering om sektionsändringar");
        }
    }

    // Öppnar bildförhandsvisning
    private void PreviewImage(string imageUrl)
    {
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                previewImageUrl = imageUrl;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid förhandsvisning av bild");
            ToastService.Error("Kunde inte visa bilden").GetAwaiter().GetResult();
        }
    }

    // Stänger bildförhandsvisning
    private void ClosePreviewImage()
    {
        previewImageUrl = null;
    }

    // Hanterar val av fil för uppladdning
    private void HandleFileSelected(InputFileChangeEventArgs e, int index)
    {
        try
        {
            if (e.File != null)
            {
                selectedFile = e.File;
                currentSectionIndex = index;
                tempAltText = "";
                showImageUploadDialog = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid hantering av filväljarens ändringar");
            ToastService.Error("Ett fel uppstod när filen skulle hanteras").GetAwaiter().GetResult();
        }
    }

    // Laddar upp vald bild via förälderns callback
    private async Task UploadSelectedImage()
    {
        if (selectedFile == null || !currentSectionIndex.HasValue || !OnImageUpload.HasDelegate)
        {
            CloseImageUploadDialog();
            return;
        }

        try
        {

            if (currentSectionIndex.Value < 0 || currentSectionIndex.Value >= Sections.Count)
            {
                Logger.LogWarning("Ogiltigt sektionsindex vid bilduppladdning: {Index}", currentSectionIndex.Value);
                CloseImageUploadDialog();
                return;
            }

            var section = Sections[currentSectionIndex.Value];

            var info = new ImageUploadInfo
                {
                    SectionIndex = currentSectionIndex.Value,
                    File = selectedFile,
                    Section = section,
                    CloseModal = CloseImageUploadDialog
                };

            await OnImageUpload.InvokeAsync(info);
            Sections[currentSectionIndex.Value].ImageAltText = tempAltText;
            SectionsChanged();

            CloseImageUploadDialog();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppladdning av bild för sektion #{Index}", currentSectionIndex);
            await ToastService.Error("Ett fel inträffade vid uppladdning av bilden");
            CloseImageUploadDialog();
        }
    }

    // Stänger bilduppladdningsdialogrutan och återställer tillstånd
    private void CloseImageUploadDialog()
    {
        showImageUploadDialog = false;
        selectedFile = null;
        currentSectionIndex = null;
        tempAltText = string.Empty;
        StateHasChanged();
    }

    // Tar bort bild från en sektion och notifierar föräldern
    private async Task ClearImage(int index)
    {
        try
        {
            var imageUrl = Sections[index].ImageUrl;

            if (!string.IsNullOrEmpty(imageUrl) && OnImageDelete.HasDelegate)
            {
                await OnImageDelete.InvokeAsync(new ImageDeleteInfo
                    {
                        SectionIndex = index,
                        ImageUrl = imageUrl
                    });
            }

            Sections[index].ImageUrl = "";
            Sections[index].ImageAltText = "";
            SectionsChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid borttagning av bild för sektion #{Index}", index);
            await ToastService.Error("Ett fel inträffade när bilden skulle tas bort");
        }
    }

    // Formaterar filstorlek till läsbara enheter
    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024)
            return $"{bytes} bytes";
        else if (bytes < 1024 * 1024)
            return $"{bytes / 1024.0:F1} KB";
        else if (bytes < 1024 * 1024 * 1024)
            return $"{bytes / (1024.0 * 1024.0):F1} MB";
        else
            return $"{bytes / (1024.0 * 1024.0 * 1024.0):F1} GB";
    }
}