@using KronoxFront.ViewModels
@using KronoxFront.Services
@using Microsoft.AspNetCore.Components.Forms
@using KronoxFront.Components.Shared.Admin
@using KronoxFront.ViewModels.Faq
@inject IJSRuntime JS
@inject ILogger<FaqEditor> Logger
@inject IToastService Toast
@inject CmsService Cms
@implements IAsyncDisposable

<AdminSectionFrame Title="FAQ-sektioner" IconClass="fa-solid fa-circle-question">
    <ChildContent>
        @foreach (var (section, sectionIndex) in FaqSections.Select((s, i) => (s, i)))
        {
            <div class="card mb-4">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="h6 mb-0">FAQ-sektion @(sectionIndex + 1)</h4>
                    <div>
                        @if (sectionIndex > 0)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveFaqSection(sectionIndex, -1)">
                                <i class="fa-solid fa-arrow-up"></i>
                            </button>
                        }
                        @if (sectionIndex < FaqSections.Count - 1)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveFaqSection(sectionIndex, 1)">
                                <i class="fa-solid fa-arrow-down"></i>
                            </button>
                        }
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFaqSection(sectionIndex)">
                            <i class="fa-solid fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Rubrik</label>
                        <input type="text" class="form-control" @bind="section.Title" @bind:after="OnFaqChanged" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Beskrivning</label>
                        <textarea id="faq-description-@sectionIndex"
                                  class="form-control tinymce-editor" 
                                  rows="2" 
                                  @bind="section.Description" 
                                  @bind:after="OnFaqChanged"></textarea>
                    </div>

                    @* FAQ Items *@
                    <div class="border rounded p-3 bg-light">
                        <h5 class="h6 mb-3">Frågor och svar</h5>

                        @foreach (var (item, itemIndex) in section.FaqItems.Select((i, idx) => (i, idx)))
                        {
                            <div class="card mb-3">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <span class="fw-bold">Fråga @(itemIndex + 1)</span>
                                    <div>
                                        @if (itemIndex > 0)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveFaqItem(sectionIndex, itemIndex, -1)">
                                                <i class="fa-solid fa-arrow-up"></i>
                                            </button>
                                        }
                                        @if (itemIndex < section.FaqItems.Count - 1)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveFaqItem(sectionIndex, itemIndex, 1)">
                                                <i class="fa-solid fa-arrow-down"></i>
                                            </button>
                                        }
                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFaqItem(sectionIndex, itemIndex)">
                                            <i class="fa-solid fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @if (item.HasImage)
                                        {
                                            <div class="col-md-4 mb-3">
                                                <div class="form-check mb-2">
                                                    <input type="checkbox" class="form-check-input" @bind="item.HasImage" @bind:after="OnFaqChanged" />
                                                    <label class="form-check-label">Inkludera bild</label>
                                                </div>
                                                <div class="border p-3 bg-white text-center" style="min-height: 150px;">
                                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                                    {
                                                        <img src="@item.ImageUrl" class="img-fluid img-thumbnail mb-2" style="max-height: 150px;" />
                                                        <div class="mt-2 d-flex justify-content-center gap-2">
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenLibraryFor(sectionIndex, itemIndex)">
                                                                <i class="fa-solid fa-images me-1"></i> Välj från bildbibliotek
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearFaqImage(sectionIndex, itemIndex)">
                                                                <i class="fa-solid fa-times"></i> Ta bort bild
                                                            </button>
                                                        </div>
                                                        <div class="mt-2 text-start">
                                                            <label class="form-label">Bildbeskrivning:</label>
                                                            <input type="text" class="form-control form-control-sm" @bind="item.ImageAltText" @bind:after="OnFaqChanged" placeholder="Beskriv bilden" />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <InputFile OnChange="@(e => HandleFaqImageSelected(e, sectionIndex, itemIndex))" class="form-control" accept="image/*" />
                                                        <div class="text-muted small mt-2">Klicka för att välja bild</div>
                                                        <div class="mt-2">
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenLibraryFor(sectionIndex, itemIndex)">
                                                                <i class="fa-solid fa-images me-1"></i> Välj från bildbibliotek
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-md-8">
                                                <div class="mb-3">
                                                    <label class="form-label">Fråga</label>
                                                    <input type="text" class="form-control" @bind="item.Question" @bind:after="OnFaqChanged" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Svar</label>
                                                    <textarea id="faq-editor-@sectionIndex-@itemIndex" 
                                                              class="form-control tinymce-editor" 
                                                              rows="4" 
                                                              @bind="item.Answer" 
                                                              @bind:after="OnFaqChanged"></textarea>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-12">
                                                <div class="form-check mb-3">
                                                    <input type="checkbox" class="form-check-input" @bind="item.HasImage" @bind:after="OnFaqChanged" />
                                                    <label class="form-check-label">Inkludera bild</label>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Fråga</label>
                                                    <input type="text" class="form-control" @bind="item.Question" @bind:after="OnFaqChanged" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Svar</label>
                                                    <textarea id="faq-editor-@sectionIndex-@itemIndex" 
                                                              class="form-control tinymce-editor" 
                                                              rows="4" 
                                                              @bind="item.Answer" 
                                                              @bind:after="OnFaqChanged"></textarea>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => AddFaqItem(FaqSections[sectionIndex], sectionIndex)">
                            <i class="fa-solid fa-plus me-1"></i> Lägg till fråga
                        </button>
                    </div>
                </div>
            </div>
        }

        <button type="button" class="btn btn-outline-primary" @onclick="AddFaqSection">
            <i class="fa-solid fa-plus me-1"></i> Lägg till FAQ-sektion
        </button>
    </ChildContent>

    <FooterContent>
        <button type="button" class="btn btn-outline-primary" @onclick="AddFaqSection">
            <i class="fa-solid fa-plus me-1"></i> Lägg till FAQ-sektion
        </button>
    </FooterContent>
</AdminSectionFrame>

@if (libraryOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fa-solid fa-images me-2"></i>Bildbibliotek</h5>
                    <button type="button" class="btn-close" @onclick="CloseLibrary"></button>
                </div>
                <div class="modal-body">
                    @if (libraryLoading)
                    {
                        <div class="text-muted">Laddar...</div>
                    }
                    else if (!allImages.Any())
                    {
                        <div class="alert alert-info">Inga bilder hittades.</div>
                    }
                    else
                    {
                        <div class="row g-3">
                            @foreach (var img in allImages)
                            {
                                <div class="col-sm-6 col-md-4">
                                    <div class="card h-100">
                                        <img src="@img.Url" class="card-img-top" alt="@img.AltText" />
                                        <div class="card-body">
                                            <div class="small text-muted text-truncate" title="@img.Url">@img.Url</div>
                                            <button class="btn btn-sm btn-primary mt-2" @onclick="() => UseFromLibrary(img)">
                                                Använd i FAQ
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseLibrary">Stäng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<FaqSectionViewModel> FaqSections { get; set; } = new();
    [Parameter] public EventCallback OnFaqSectionsChanged { get; set; }
    [Parameter] public EventCallback<FaqImageUploadInfo> OnFaqImageUpload { get; set; }
    [Parameter] public string PageKey { get; set; } = "";

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    // Bildbibliotek
    private bool libraryOpen;
    private bool libraryLoading;
    private List<PageImageViewModel> allImages = new();
    private (int sectionIndex, int itemIndex)? targetItem;

    private async Task AddFaqSection()
    {
        var newSection = new FaqSectionViewModel
        {
            Id = 0,
            Title = "Ny FAQ-sektion",
            Description = "",
            SortOrder = FaqSections.Count,
            FaqItems = new List<FaqItemViewModel>()
        };

        FaqSections.Add(newSection);
        await OnFaqChanged();
        StateHasChanged();
        
        // Initiera editor för ny sektion
        var sectionIndex = FaqSections.Count - 1;
        var descriptionEditorId = $"faq-description-{sectionIndex}";
        await InitializeEditorWithRetry(descriptionEditorId);
    }

    private async Task AddFaqItem(FaqSectionViewModel section, int sectionIndex)
    {
        section.FaqItems.Add(new FaqItemViewModel
        {
            FaqSectionId = sectionIndex,
            Question = "Ny fråga",
            Answer = "<p>Svara på frågan här...</p>",
            SortOrder = section.FaqItems.Count,
            HasImage = false
        });

        if (OnFaqSectionsChanged.HasDelegate)
        {
            await OnFaqSectionsChanged.InvokeAsync();
        }

        StateHasChanged();
        await Task.Delay(300); // Längre delay för nya items

        var itemIndex = section.FaqItems.Count - 1;
        var editorId = $"faq-editor-{sectionIndex}-{itemIndex}";
        
        // Retry-pattern för nya editorer
        for (int attempt = 0; attempt < 3; attempt++)
        {
            try
            {
                await JS.InvokeVoidAsync("initTinyMCE", editorId);
                Logger.LogInformation("Ny FAQ-editor {EditorId} initierad efter {Attempt} försök", editorId, attempt + 1);
                break;
            }
            catch (Exception ex) when (attempt < 2)
            {
                Logger.LogWarning("Försök {Attempt} misslyckades för FAQ-editor {EditorId}: {Message}", 
                    attempt + 1, editorId, ex.Message);
                await Task.Delay(200 * (attempt + 1));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Kunde inte initiera FAQ-editor {EditorId} efter 3 försök", editorId);
            }
        }
    }

    private async Task InitializeEditorWithRetry(string editorId, int maxRetries = 3)
    {
        for (int retry = 0; retry < maxRetries; retry++)
        {
            try
            {
                await JS.InvokeVoidAsync("initTinyMCE", editorId);
                Logger.LogInformation("Editor {EditorId} initialiserad efter {RetryCount} försök", editorId, retry + 1);
                return;
            }
            catch (Exception ex) when (retry < maxRetries - 1)
            {
                Logger.LogWarning("Försök {RetryCount} misslyckades för editor {EditorId}: {Message}", 
                    retry + 1, editorId, ex.Message);
                await Task.Delay(200 * (retry + 1), _cancellationTokenSource.Token);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Kunde inte initiera editor {EditorId} efter {MaxRetries} försök", 
                    editorId, maxRetries);
                break;
            }
        }
    }

    public async Task InitializeEditorsOnly()
    {
        try
        {
            var initTasks = new List<Task>();
            
            foreach (var (sectionIndex, section) in FaqSections.Select((s, i) => (i, s)))
            {
                var descriptionEditorId = $"faq-description-{sectionIndex}";
                initTasks.Add(InitializeEditorWithRetry(descriptionEditorId));
                
                foreach (var (itemIndex, item) in section.FaqItems.Select((i, idx) => (idx, i)))
                {
                    var editorId = $"faq-editor-{sectionIndex}-{itemIndex}";
                    initTasks.Add(InitializeEditorWithRetry(editorId));
                }
            }
            
            await Task.WhenAll(initTasks);
            Logger.LogInformation("✅ FAQ InitializeEditorsOnly slutförd - alla editorer initialiserade");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av FAQ-editorer");
        }
    }

    private async Task RemoveFaqSection(int sectionIndex)
    {
        if (sectionIndex >= 0 && sectionIndex < FaqSections.Count)
        {
            FaqSections.RemoveAt(sectionIndex);
            await OnFaqChanged();
        }
    }

    private async Task MoveFaqSection(int index, int direction)
    {
        int newIndex = index + direction;
        if (newIndex >= 0 && newIndex < FaqSections.Count)
        {
            var section = FaqSections[index];
            FaqSections.RemoveAt(index);
            FaqSections.Insert(newIndex, section);
            await OnFaqChanged();
        }
    }

    private async Task RemoveFaqItem(int sectionIndex, int itemIndex)
    {
        if (sectionIndex >= 0 && sectionIndex < FaqSections.Count &&
            itemIndex >= 0 && itemIndex < FaqSections[sectionIndex].FaqItems.Count)
        {
            FaqSections[sectionIndex].FaqItems.RemoveAt(itemIndex);
            await OnFaqChanged();
        }
    }

    private async Task MoveFaqItem(int sectionIndex, int itemIndex, int direction)
    {
        if (sectionIndex >= 0 && sectionIndex < FaqSections.Count)
        {
            var items = FaqSections[sectionIndex].FaqItems;
            int newIndex = itemIndex + direction;

            if (newIndex >= 0 && newIndex < items.Count)
            {
                var item = items[itemIndex];
                items.RemoveAt(itemIndex);
                items.Insert(newIndex, item);
                await OnFaqChanged();
            }
        }
    }

    private async Task ClearFaqImage(int sectionIndex, int itemIndex)
    {
        if (sectionIndex >= 0 && sectionIndex < FaqSections.Count &&
            itemIndex >= 0 && itemIndex < FaqSections[sectionIndex].FaqItems.Count)
        {
            var item = FaqSections[sectionIndex].FaqItems[itemIndex];
            item.ImageUrl = "";
            item.ImageAltText = "";
            await OnFaqChanged();
        }
    }

    private async Task HandleFaqImageSelected(InputFileChangeEventArgs e, int sectionIndex, int itemIndex)
    {
        if (e.File != null && OnFaqImageUpload.HasDelegate)
        {
            var info = new FaqImageUploadInfo
            {
                File = e.File,
                SectionIndex = sectionIndex,
                ItemIndex = itemIndex,
                Item = FaqSections[sectionIndex].FaqItems[itemIndex]
            };

            await OnFaqImageUpload.InvokeAsync(info);
        }
    }

    private async Task OnFaqChanged()
    {
        if (OnFaqSectionsChanged.HasDelegate)
        {
            await OnFaqSectionsChanged.InvokeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeFaqEditors();
        }
    }

    private async Task InitializeFaqEditors()
    {
        try
        {
            var initTasks = new List<Task>();
            
            for (int sectionIndex = 0; sectionIndex < FaqSections.Count; sectionIndex++)
            {
                // Beskrivnings-editor
                var descriptionEditorId = $"faq-description-{sectionIndex}";
                initTasks.Add(InitializeEditorWithRetry(descriptionEditorId));
                
                // Svar-editorer
                for (int itemIndex = 0; itemIndex < FaqSections[sectionIndex].FaqItems.Count; itemIndex++)
                {
                    var editorId = $"faq-editor-{sectionIndex}-{itemIndex}";
                    initTasks.Add(InitializeEditorWithRetry(editorId));
                }
            }
            
            await Task.WhenAll(initTasks);
            Logger.LogInformation("Alla FAQ-editorer initialiserade");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av FAQ-editorer");
        }
    }

    public async Task RefreshEditors()
    {
        try
        {
            // Initiera endast saknade
            for (int s = 0; s < FaqSections.Count; s++)
            {
                var descId = $"faq-description-{s}";
                if (!await JS.InvokeAsync<bool>("tinymceExists", descId) &&
                    await JS.InvokeAsync<bool>("elementExists", descId))
                {
                    await JS.InvokeVoidAsync("initTinyMCE", descId);
                }

                for (int i = 0; i < FaqSections[s].FaqItems.Count; i++)
                {
                    var ansId = $"faq-editor-{s}-{i}";
                    if (!await JS.InvokeAsync<bool>("tinymceExists", ansId) &&
                        await JS.InvokeAsync<bool>("elementExists", ansId))
                    {
                        await JS.InvokeVoidAsync("initTinyMCE", ansId);
                    }
                }
            }
            Logger.LogInformation("FaqManager inkrementell refresh klar");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "FaqManager RefreshEditors fel");
        }
    }

    private async Task DestroyFaqSectionEditors(int sectionIndex)
    {
        var ids = new List<string> { $"faq-description-{sectionIndex}" };
        for (int i = 0; i < FaqSections[sectionIndex].FaqItems.Count; i++)
            ids.Add($"faq-editor-{sectionIndex}-{i}");
        await JS.InvokeVoidAsync("destroyEditors", ids);
    }

    private async Task DestroyFaqItemEditor(int sectionIndex, int itemIndex)
    {
        var id = $"faq-editor-{sectionIndex}-{itemIndex}";
        await JS.InvokeVoidAsync("destroyEditors", new[] { id });
    }

    // Bildbibliotek
    private async Task OpenLibraryFor(int sectionIndex, int itemIndex)
    {
        targetItem = (sectionIndex, itemIndex);
        libraryOpen = true;
        libraryLoading = true;
        StateHasChanged();

        try
        {
            allImages = await Cms.GetAllImagesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda bildbiblioteket");
            await Toast.Error("Kunde inte ladda bildbiblioteket");
        }
        finally
        {
            libraryLoading = false;
        }
    }

    private void CloseLibrary()
    {
        libraryOpen = false;
        targetItem = null;
    }

    private async Task UseFromLibrary(PageImageViewModel img)
    {
        if (targetItem is null) return;
        var (sectionIndex, itemIndex) = targetItem.Value;

        try
        {
            // Registrera referens på sidan om PageKey finns
            if (!string.IsNullOrWhiteSpace(PageKey))
            {
                _ = await Cms.RegisterExistingImageAsync(PageKey, img.Url, img.AltText ?? "");
            }

            var item = FaqSections[sectionIndex].FaqItems[itemIndex];
            item.ImageUrl = img.Url;
            item.HasImage = true;
            if (string.IsNullOrWhiteSpace(item.ImageAltText))
                item.ImageAltText = img.AltText ?? "";

            await OnFaqChanged();
            await Toast.Success("Bild vald från biblioteket.");
            CloseLibrary();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid val av FAQ-bild från biblioteket");
            await Toast.Error("Kunde inte använda vald bild.");
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();
        
        try
        {
            await JS.InvokeVoidAsync("destroyAllEditors");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Fel vid rensning av TinyMCE-editorer");
        }
        
        _cancellationTokenSource.Dispose();
    }
}