@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms
@using KronoxFront.ViewModels
@using KronoxFront.Services
@using KronoxFront.Components.Shared.Admin
@using KronoxFront.ViewModels.Features
@inject IJSRuntime JS
@inject ILogger<FeatureSectionEditor> Logger
@inject IToastService ToastService
@inject CmsService Cms

<AdminSectionFrame Title="Featuresektioner" IconClass="fa-solid fa-star">
    <ChildContent>
        @foreach (var (item, index) in Sections.Select((section, index) => (section, index)))
        {
            <div class="card mb-3">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="h6 mb-0">Sektion @(index + 1)</h4>
                    <div>
                        @if (index > 0)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveSection(index, -1)" aria-label="Flytta sektion upp">
                                <i class="fa-solid fa-arrow-up"></i>
                            </button>
                        }
                        @if (index < Sections.Count - 1)
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" @onclick="() => MoveSection(index, 1)" aria-label="Flytta sektion ner">
                                <i class="fa-solid fa-arrow-down"></i>
                            </button>
                        }
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveSection(index)" aria-label="Ta bort sektion">
                            <i class="fa-solid fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="mb-2 form-check">
                                <input type="checkbox" class="form-check-input" id="@($"has-image-{index}")"
                                       @bind="item.HasImage" @bind:after="() => SectionsChanged()" aria-label="Inkludera bild i sektion @(index + 1)" />
                                <label class="form-check-label" for="@($"has-image-{index}")">Inkludera bild</label>
                            </div>
                            @if (item.HasImage)
                            {
                                <span class="form-label">Sektionsbild</span>
                                <div class="border p-3 mb-2 bg-light text-center" style="min-height: 150px;">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" class="img-fluid img-thumbnail mb-2"
                                             style="max-height: 150px; cursor: pointer"
                                             @onclick="() => PreviewImage(item.ImageUrl)"
                                             alt="@(string.IsNullOrEmpty(item.ImageAltText) ? $"Bild för sektion {index + 1}" : item.ImageAltText)" />
                                        <div class="mt-2 d-flex justify-content-center gap-2">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenLibraryFor(index)" aria-label="Välj bild från biblioteket">
                                                <i class="fa-solid fa-images me-1"></i> Välj från bildbibliotek
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearImage(index)" aria-label="Ta bort sektionsbild">
                                                <i class="fa-solid fa-times"></i> Ta bort bild
                                            </button>
                                        </div>
                                        <div class="mt-2">
                                            <label class="form-label" for="@($"image-alt-{index}")">Bildbeskrivning (alt-text):</label>
                                            <input id="@($"image-alt-{index}")"
                                                   type="text"
                                                   class="form-control form-control-sm"
                                                   @bind="item.ImageAltText"
                                                   @bind:after="() => SectionsChanged()"
                                                   placeholder="Beskriv bilden för tillgänglighet"
                                                   aria-label="Bildbeskrivning för sektion @(index + 1)" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            @{
                                                var inputFileAriaLabel = $"Välj bild för sektion {index + 1}";
                                            }
                                            <InputFile OnChange="@(e => HandleFileSelected(e, index))"
                                                       class="form-control"
                                                       accept="image/*"
                                                       aria-label="@inputFileAriaLabel" />
                                            <div class="text-muted small mt-2">
                                                Klicka för att välja bild (rekommenderad storlek: 800x600px)
                                            </div>
                                            <div class="mt-2">
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenLibraryFor(index)" aria-label="Välj bild från biblioteket">
                                                    <i class="fa-solid fa-images me-1"></i> Välj från bildbibliotek
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label" for="@($"title-{index}")">Rubrik</label>
                                <input type="text" class="form-control" id="@($"title-{index}")"
                                       @bind="item.Title" @bind:after="() => SectionsChanged()"
                                       aria-label="Rubrik för sektion @(index + 1)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="@($"feature-editor-{index}")">Innehåll</label>
                                <textarea id="@($"feature-editor-{index}")"
                                          @bind="item.Content"
                                          @bind:event="oninput"
                                          @ref="editorTextAreas[index]"
                                          aria-label="Innehåll för sektion @(index + 1)">
                                </textarea>
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@($"has-private-{index}")"
                                           @bind="item.HasPrivateContent" @bind:after="() => HandlePrivateContentToggle(index)" />
                                    <label class="form-check-label" for="@($"has-private-{index}")">
                                        <i class="fa-solid fa-users me-1"></i> Inkludera medlemsinformation
                                    </label>
                                </div>
                            </div>

                            @if (item.HasPrivateContent)
                            {
                                <div class="border rounded p-3 mb-3 bg-light">
                                    <small class="text-muted fw-bold">
                                        <i class="fa-solid fa-lock me-1"></i> Medlemsinformation (visas endast för inloggade)
                                    </small>

                                    <div class="mb-3 mt-2">
                                        <label class="form-label" for="@($"private-content-editor-{index}")">Privat innehåll</label>
                                        <textarea id="@($"private-content-editor-{index}")"
                                                  @bind="item.PrivateContent"
                                                  @bind:event="oninput"
                                                  class="form-control tinymce-editor"
                                                  rows="4"
                                                  placeholder="Extra text som endast visas för inloggade medlemmar"
                                                  @ref="privateEditorTextAreas[index]">
                                        </textarea>
                                        <div class="form-text">Detta fält är för ytterligare text, t.ex. förklaringar eller instruktioner.</div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label" for="@($"contact-heading-{index}")">Rubrik för kontaktpersoner</label>
                                        <input type="text" class="form-control" id="@($"contact-heading-{index}")"
                                               @bind="item.ContactHeading" @bind:after="() => SectionsChanged()"
                                               placeholder="T.ex. 'Kontaktinformation för styrelsen' eller 'Gruppen består av följande personer'"
                                               aria-label="Rubrik för kontaktpersoner i sektion @(index + 1)" />
                                        <div class="form-text">Denna rubrik visas ovanför kontaktpersonerna för inloggade medlemmar.</div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Kontaktpersoner</label>
                                        <div class="form-text mb-2">
                                            <i class="fa-solid fa-info-circle me-1"></i>
                                            Kontaktpersoner visas endast för inloggade medlemmar.
                                        </div>

                                        <div class="border p-2 rounded bg-white">
                                            @if (item.ContactPersons.Any())
                                            {
                                                @for (int contactIndex = 0; contactIndex < item.ContactPersons.Count; contactIndex++)
                                                {
                                                    var contact = item.ContactPersons[contactIndex];
                                                    var localContactIndex = contactIndex;

                                                    <div class="border rounded p-3 mb-3 bg-light">
                                                        <div class="row mb-2">
                                                            <div class="col-md-3">
                                                                <label class="form-label small fw-bold">Namn *</label>
                                                                <input type="text" class="form-control form-control-sm"
                                                                       @bind="contact.Name" placeholder="Förnamn Efternamn"
                                                                       @bind:after="() => SectionsChanged()" />
                                                            </div>

                                                            <div class="col-md-3">
                                                                <label class="form-label small fw-bold">Organisation</label>
                                                                <input type="text" class="form-control form-control-sm"
                                                                       @bind="contact.Organization" placeholder="Högskola/Universitet"
                                                                       @bind:after="() => SectionsChanged()" />
                                                            </div>

                                                            <div class="col-md-2">
                                                                <label class="form-label small fw-bold">E-post</label>
                                                                <input type="email" class="form-control form-control-sm"
                                                                       @bind="contact.Email" placeholder="namn@domain.se"
                                                                       @bind:after="() => SectionsChanged()" />
                                                            </div>

                                                            <div class="col-md-2">
                                                                <label class="form-label small fw-bold">Telefon</label>
                                                                <input type="text" class="form-control form-control-sm"
                                                                       @bind="contact.Phone" placeholder="08-123 45 67"
                                                                       @bind:after="() => SectionsChanged()" />
                                                            </div>

                                                            <div class="col-md-2 d-flex align-items-end">
                                                                <button type="button" class="btn btn-sm btn-outline-danger w-100"
                                                                        @onclick="() => RemoveContactPerson(index, localContactIndex)"
                                                                        title="Ta bort kontaktperson">
                                                                    <i class="fa-solid fa-times"></i> Ta bort
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            <button type="button" class="btn btn-sm btn-outline-primary"
                                                    @onclick="() => AddContactPerson(index)">
                                                <i class="fa-solid fa-plus me-1"></i> Lägg till kontaktperson
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </ChildContent>

    <FooterContent>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary" @onclick="AddSection" aria-label="Lägg till ny sektion">
                <i class="fa-solid fa-plus me-1"></i> Lägg till sektion
            </button>
            <button type="button" class="btn btn-primary" @onclick="SaveSections" aria-label="Spara featuresektioner">
                <i class="fa-solid fa-save me-1"></i> Spara featuresektioner
            </button>
        </div>
    </FooterContent>
</AdminSectionFrame>

@if (!string.IsNullOrEmpty(previewImageUrl))
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
         role="dialog" aria-modal="true" aria-labelledby="imagePreviewTitle">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content border-0 bg-transparent">
                <span id="imagePreviewTitle" class="visually-hidden">Förhandsgranskning av bild</span>
                <button type="button" class="btn-close btn-close-white ms-auto me-n4 mt-n4"
                        @onclick="ClosePreviewImage"
                        aria-label="Stäng bildförhandsvisning"></button>
                <img src="@previewImageUrl" class="img-fluid rounded-3" alt="Förhandsgranskad bild" />
            </div>
        </div>
    </div>
}

@if (showImageUploadDialog)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);"
         role="dialog" aria-modal="true" aria-labelledby="uploadImageTitle">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="uploadImageTitle">Ladda upp bild</h5>
                    <button type="button" class="btn-close" @onclick="CloseImageUploadDialog" aria-label="Stäng"></button>
                </div>
                <div class="modal-body">
                    @if (selectedFile != null)
                    {
                        <div class="mb-3">
                            <label class="form-label">Vald fil: @selectedFile.Name (@FormatFileSize(selectedFile.Size))</label>
                        </div>
                    }
                    <div class="mb-3">
                        <label for="altText" class="form-label">Bildbeskrivning (alt-text):</label>
                        <input type="text" class="form-control" id="altText" @bind="tempAltText"
                               placeholder="Beskriv bilden för tillgänglighet"
                               aria-label="Bildbeskrivning för uppladdad bild" />
                        <div class="form-text">
                            Detta hjälper skärmläsare och förbättrar tillgängligheten för användare med synskador.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseImageUploadDialog"
                            aria-label="Avbryt uppladdning">
                        Avbryt
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="UploadSelectedImage"
                            disabled="@(selectedFile == null)"
                            aria-label="Ladda upp vald bild">
                        Ladda upp
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (libraryOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fa-solid fa-images me-2"></i>Bildbibliotek</h5>
                    <button type="button" class="btn-close" @onclick="CloseLibrary"></button>
                </div>
                <div class="modal-body">
                    @if (libraryLoading)
                    {
                        <div class="text-muted">Laddar...</div>
                    }
                    else if (!allImages.Any())
                    {
                        <div class="alert alert-info">Inga bilder hittades.</div>
                    }
                    else
                    {
                        <div class="row g-3">
                            @foreach (var img in allImages)
                            {
                                <div class="col-sm-6 col-md-4">
                                    <div class="card h-100">
                                        <img src="@img.Url" class="card-img-top" alt="@img.AltText" />
                                        <div class="card-body">
                                            <div class="small text-muted text-truncate" title="@img.Url">@img.Url</div>
                                            <button class="btn btn-sm btn-primary mt-2" @onclick="() => UseFromLibrary(img)">
                                                Använd i sektion
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseLibrary">Stäng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<FeatureSectionViewModel> Sections { get; set; } = new();
    [Parameter] public EventCallback OnSectionsChanged { get; set; }
    [Parameter] public EventCallback<ImageUploadInfo> OnImageUpload { get; set; }
    [Parameter] public EventCallback<ImageDeleteInfo> OnImageDelete { get; set; }
    [Parameter] public EventCallback OnSaveSections { get; set; }

    // Bildförhandsvisningsegenskaper
    private string? previewImageUrl;
    private bool showImageUploadDialog = false;
    private IBrowserFile? selectedFile;
    private int? currentSectionIndex;
    private string tempAltText = string.Empty;

    // Texteditor-referenser
    private Dictionary<int, ElementReference> editorTextAreas = new();
    private Dictionary<int, ElementReference> privateEditorTextAreas = new();

    // Bildbibliotek
    private bool libraryOpen = false;
    private bool libraryLoading = false;
    private List<PageImageViewModel> allImages = new();
    private int? targetSectionForLibrary;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeTinyMCE();
        }
    }

    private async Task SaveSections()
    {
        try
        {
            // Se till att TinyMCE-innehåll skrivs tillbaka till textareas
            try
            {
                await JS.InvokeVoidAsync("syncAllEditors");
                await Task.Delay(50);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Kunde inte synkronisera editorer före sparning av featuresektioner");
            }

            if (OnSaveSections.HasDelegate)
            {
                await OnSaveSections.InvokeAsync();
            }
            else
            {
                await ToastService.Info("Ingen sparcallback kopplad för featuresektioner.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid sparning av featuresektioner");
            await ToastService.Error("Ett fel uppstod när featuresektioner skulle sparas");
        }
    }

    // Initierar TinyMCE-editorn för alla sektioner
    private async Task InitializeTinyMCE()
    {
        try
        {
            foreach (var (index, section) in Sections.Select((s, i) => (i, s)))
            {
                // Initiera huvudeditor
                var editorId = $"feature-editor-{index}";
                await JS.InvokeVoidAsync("initTinyMCE", editorId);

                // Initiera privat editor om den finns
                if (section.HasPrivateContent)
                {
                    var privateEditorId = $"private-content-editor-{index}";
                    await JS.InvokeVoidAsync("initTinyMCE", privateEditorId);
                }

                // Verifiera att editorerna skapades
                try
                {
                    var exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
                    if (!exists)
                    {
                        Logger.LogWarning("TinyMCE-editor {EditorId} skapades inte vid första försöket, försöker igen", editorId);
                        await Task.Delay(100);
                        await JS.InvokeVoidAsync("initTinyMCE", editorId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Kunde inte verifiera om TinyMCE-editor {EditorId} existerar, fortsätter ändå", editorId);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editorer");
            await ToastService.Error("Ett fel uppstod vid initialisering av texteditorer");
        }
    }

    public async Task InitializeEditorsOnly()
    {
        try
        {
            foreach (var (index, section) in Sections.Select((s, i) => (i, s)))
            {
                var editorId = $"feature-editor-{index}";
                await JS.InvokeVoidAsync("initTinyMCE", editorId);

                if (section.HasPrivateContent)
                {
                    var privateEditorId = $"private-content-editor-{index}";
                    await JS.InvokeVoidAsync("initTinyMCE", privateEditorId);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av feature-editorer");
        }
    }

    public async Task RefreshEditors()
    {
        try
        {
            // Inkrementell refresh - initiera endast saknade editorer
            foreach (var (index, section) in Sections.Select((s, i) => (i, s)))
            {
                // Kontrollera huvudeditor
                var editorId = $"feature-editor-{index}";
                if (!await JS.InvokeAsync<bool>("tinymceExists", editorId) &&
                    await JS.InvokeAsync<bool>("elementExists", editorId))
                {
                    await JS.InvokeVoidAsync("initTinyMCE", editorId);
                    Logger.LogInformation("Initialiserade saknad feature-editor: {EditorId}", editorId);
                }

                // Kontrollera privat editor
                if (section.HasPrivateContent)
                {
                    var privateEditorId = $"private-content-editor-{index}";
                    if (!await JS.InvokeAsync<bool>("tinymceExists", privateEditorId) &&
                        await JS.InvokeAsync<bool>("elementExists", privateEditorId))
                        {
                            await JS.InvokeVoidAsync("initTinyMCE", privateEditorId);
                            Logger.LogInformation("Initialiserade saknad private-editor: {EditorId}", privateEditorId);
                        }
                }
            }

            Logger.LogInformation("FeatureSectionManager inkrementell refresh slutförd");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid inkrementell refresh av feature-editorer");
            // Fallback till full refresh om något går fel
            try
            {
                await InitializeEditorsOnly();
            }
            catch (Exception fallbackEx)
            {
                Logger.LogError(fallbackEx, "Även fallback misslyckades");
            }
        }
    }

    // Hanterar när privat innehåll toggles
    private async Task HandlePrivateContentToggle(int index)
    {
        SectionsChanged();
        StateHasChanged();

        // Ge tid för DOM att uppdateras
        await Task.Delay(200);

        // Om privat innehåll aktiverades, initiera TinyMCE för det
        if (Sections[index].HasPrivateContent)
        {
            var privateEditorId = $"private-content-editor-{index}";
            try
            {
                await JS.InvokeVoidAsync("initTinyMCE", privateEditorId);
                Logger.LogInformation("TinyMCE initierat för privat editor: {EditorId}", privateEditorId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fel vid initialisering av privat TinyMCE-editor {EditorId}", privateEditorId);
            }
        }
    }

    // Lägger till en ny sektion och initierar dess TinyMCE-editor
    private async Task AddSection()
    {
        try
        {
            int newIndex = Sections.Count;

            // Skapa ny sektion med standardvärden
            Sections.Add(new FeatureSectionViewModel
                {
                    Id = 0, // Ny post får temporärt ID 0
                    PageKey = "home",
                    Title = "Ny sektion",
                    Content = "<p>Lägg till innehåll här...</p>",
                    ImageUrl = "",
                    ImageAltText = "",
                    HasImage = true,
                    SortOrder = newIndex,
                    HasPrivateContent = false,
                    PrivateContent = "",
                    ContactHeading = "",
                    ContactPersons = new List<ContactPersonViewModel>()
                });

            // Skapa referenser för textareaelement om de inte redan finns
            if (!editorTextAreas.ContainsKey(newIndex))
            {
                editorTextAreas[newIndex] = new ElementReference();
            }
            if (!privateEditorTextAreas.ContainsKey(newIndex))
            {
                privateEditorTextAreas[newIndex] = new ElementReference();
            }

            // Notifiera om ändringar och uppdatera UI
            SectionsChanged();
            StateHasChanged();

            // Ge tid för DOM att uppdateras före initialisering av editorn
            await Task.Delay(100);

            // Initiera TinyMCE-editor för den nya sektionen
            await InitializeSectionEditor(newIndex);

            Logger.LogInformation("Ny sektion #{Index} har lagts till", newIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid tillägg av ny sektion");
            await ToastService.Error("Ett fel uppstod när en ny sektion skulle läggas till");
        }
    }

    // Initialiserar TinyMCE-editorn för en specifik sektion
    private async Task InitializeSectionEditor(int index)
    {
        string editorId = $"feature-editor-{index}";

        try
        {
            await JS.InvokeVoidAsync("initTinyMCE", editorId);

            // Verifiera att editorn faktiskt skapades
            var exists = await JS.InvokeAsync<bool>("tinymceExists", editorId);
            if (!exists)
            {
                Logger.LogWarning("TinyMCE-editor {EditorId} skapades inte vid första försöket, försöker igen", editorId);
                await Task.Delay(200);
                await JS.InvokeVoidAsync("initTinyMCE", editorId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid initialisering av TinyMCE-editor {EditorId} för sektion #{Index}", editorId, index);
            throw; // Kasta vidare för att huvudmetoden ska hantera det
        }
    }

    // Tar bort en sektion med angivet index
    private void RemoveSection(int index)
    {
        try
        {
            if (index >= 0 && index < Sections.Count)
            {
                Sections.RemoveAt(index);
                SectionsChanged();
                Logger.LogInformation("Sektion #{Index} borttagen", index);
            }
            else
            {
                Logger.LogWarning("Försökte ta bort sektion med ogiltigt index: {Index}", index);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid borttagning av sektion #{Index}", index);
            ToastService.Error("Ett fel uppstod när sektionen skulle tas bort").GetAwaiter().GetResult();
        }
    }

    // Flyttar en sektion uppåt eller nedåt i listan
    private void MoveSection(int index, int direction)
    {
        try
        {
            int newIndex = index + direction;
            if (newIndex >= 0 && newIndex < Sections.Count)
            {
                var item = Sections[index];
                Sections.RemoveAt(index);
                Sections.Insert(newIndex, item);
                SectionsChanged();
            }
            else
            {
                Logger.LogWarning("Försökte flytta sektion till ogiltig position: {Index} till {NewIndex}", index, newIndex);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid flyttning av sektion #{Index} i riktning {Direction}", index, direction);
            ToastService.Error("Ett fel uppstod när sektionen skulle flyttas").GetAwaiter().GetResult();
        }
    }

    // Notifierar förälderkomponenten om att sektioner har ändrats
    private void SectionsChanged()
    {
        try
        {
            if (OnSectionsChanged.HasDelegate)
            {
                _ = OnSectionsChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid notifiering om sektionsändringar");
        }
    }

    // Hantering av kontaktpersoner
    private void AddContactPerson(int sectionIndex)
    {
        if (sectionIndex >= 0 && sectionIndex < Sections.Count)
        {
            Sections[sectionIndex].ContactPersons.Add(new ContactPersonViewModel
            {
                Name = "",
                Email = "",
                Phone = "",
                Organization = ""
            });
            SectionsChanged();
        }
    }

    private void RemoveContactPerson(int sectionIndex, int contactIndex)
    {
        if (sectionIndex >= 0 && sectionIndex < Sections.Count && 
            contactIndex >= 0 && contactIndex < Sections[sectionIndex].ContactPersons.Count)
        {
            Sections[sectionIndex].ContactPersons.RemoveAt(contactIndex);
            SectionsChanged();
        }
    }

    // Öppnar bildförhandsvisning
    private void PreviewImage(string imageUrl)
    {
        try
        {
            if (!string.IsNullOrEmpty(imageUrl))
            {
                previewImageUrl = imageUrl;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid förhandsvisning av bild");
            ToastService.Error("Kunde inte visa bilden").GetAwaiter().GetResult();
        }
    }

    // Stänger bildförhandsvisning
    private void ClosePreviewImage()
    {
        previewImageUrl = null;
    }

    // Hanterar val av fil för uppladdning
    private void HandleFileSelected(InputFileChangeEventArgs e, int index)
    {
        try
        {
            if (e.File != null)
            {
                selectedFile = e.File;
                currentSectionIndex = index;
                tempAltText = "";
                showImageUploadDialog = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid hantering av filväljarens ändringar");
            ToastService.Error("Ett fel uppstod när filen skulle hanteras").GetAwaiter().GetResult();
        }
    }

    // Laddar upp vald bild via förälderns callback
    private async Task UploadSelectedImage()
    {
        if (selectedFile == null || !currentSectionIndex.HasValue || !OnImageUpload.HasDelegate)
        {
            Logger.LogWarning("Kan inte ladda upp bild: selectedFile={SelectedFile}, currentSectionIndex={CurrentSectionIndex}, HasDelegate={HasDelegate}",
                selectedFile != null, currentSectionIndex.HasValue, OnImageUpload.HasDelegate);
            CloseImageUploadDialog();
            return;
        }

        try
        {
            if (currentSectionIndex.Value < 0 || currentSectionIndex.Value >= Sections.Count)
            {
                Logger.LogWarning("Ogiltigt sektionsindex vid bilduppladdning: {Index}", currentSectionIndex.Value);
                CloseImageUploadDialog();
                return;
            }

            var section = Sections[currentSectionIndex.Value];

            var info = new ImageUploadInfo
            {
                SectionIndex = currentSectionIndex.Value,
                File = selectedFile,
                Section = section,
                CloseModal = CloseImageUploadDialog
            };

            await OnImageUpload.InvokeAsync(info);

            // Sätt alt-text endast om den inte är tom
            if (!string.IsNullOrWhiteSpace(tempAltText))
            {
                Sections[currentSectionIndex.Value].ImageAltText = tempAltText;
            }

            SectionsChanged();
            CloseImageUploadDialog();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid uppladdning av bild för sektion #{Index}", currentSectionIndex);
            await ToastService.Error("Ett fel inträffade vid uppladdning av bilden");
            CloseImageUploadDialog();
        }
    }

    // Stänger bilduppladdningsdialogrutan och återställer tillstånd
    private void CloseImageUploadDialog()
    {
        showImageUploadDialog = false;
        selectedFile = null;
        currentSectionIndex = null;
        tempAltText = string.Empty;
        StateHasChanged();
    }

    // Tar bort bild från en sektion och notifierar föräldern
    private async Task ClearImage(int index)
    {
        try
        {
            var imageUrl = Sections[index].ImageUrl;

            if (!string.IsNullOrEmpty(imageUrl) && OnImageDelete.HasDelegate)
            {
                await OnImageDelete.InvokeAsync(new ImageDeleteInfo
                    {
                        SectionIndex = index,
                        ImageUrl = imageUrl
                    });
            }

            Sections[index].ImageUrl = "";
            Sections[index].ImageAltText = "";
            SectionsChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid borttagning av bild för sektion #{Index}", index);
            await ToastService.Error("Ett fel inträffade när bilden skulle tas bort");
        }
    }

    // Bildbibliotek
    private async Task OpenLibraryFor(int sectionIndex)
    {
        targetSectionForLibrary = sectionIndex;
        libraryOpen = true;
        libraryLoading = true;
        StateHasChanged();

        try
        {
            allImages = await Cms.GetAllImagesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kunde inte ladda bildbiblioteket");
            await ToastService.Error("Kunde inte ladda bildbiblioteket");
        }
        finally
        {
            libraryLoading = false;
        }
    }

    private void CloseLibrary()
    {
        libraryOpen = false;
        targetSectionForLibrary = null;
    }

    private async Task UseFromLibrary(PageImageViewModel img)
    {
        if (targetSectionForLibrary is null) return;
        var idx = targetSectionForLibrary.Value;

        try
        {
            var section = Sections[idx];

            // Registrera referens till sidan så filen inte raderas om den återanvänds
            if (!string.IsNullOrWhiteSpace(section.PageKey))
            {
                _ = await Cms.RegisterExistingImageAsync(section.PageKey, img.Url, img.AltText ?? "");
            }

            section.ImageUrl = img.Url;
            section.HasImage = true;
            if (string.IsNullOrWhiteSpace(section.ImageAltText))
                section.ImageAltText = img.AltText ?? "";

            SectionsChanged();
            await ToastService.Success("Bild vald från biblioteket.");
            CloseLibrary();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fel vid val av bild från biblioteket");
            await ToastService.Error("Kunde inte använda vald bild.");
        }
    }

    // Formaterar filstorlek till läsbara enheter
    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024)
            return $"{bytes} bytes";
        else if (bytes < 1024 * 1024)
            return $"{bytes / 1024.0:F1} KB";
        else if (bytes < 1024 * 1024 * 1024)
            return $"{bytes / (1024.0 * 1024.0):F1} MB";
        else
            return $"{bytes / (1024.0 * 1024.0 * 1024.0):F1} GB";
    }
}